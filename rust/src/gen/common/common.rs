// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common/common.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct KeyEnvelope {
    // message fields
    pub kek_label: ::std::string::String,
    pub aes_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyEnvelope {
    fn default() -> &'a KeyEnvelope {
        <KeyEnvelope as ::protobuf::Message>::default_instance()
    }
}

impl KeyEnvelope {
    pub fn new() -> KeyEnvelope {
        ::std::default::Default::default()
    }

    // string kek_label = 1;


    pub fn get_kek_label(&self) -> &str {
        &self.kek_label
    }
    pub fn clear_kek_label(&mut self) {
        self.kek_label.clear();
    }

    // Param is passed by value, moved
    pub fn set_kek_label(&mut self, v: ::std::string::String) {
        self.kek_label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kek_label(&mut self) -> &mut ::std::string::String {
        &mut self.kek_label
    }

    // Take field
    pub fn take_kek_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kek_label, ::std::string::String::new())
    }

    // bytes aes_key = 2;


    pub fn get_aes_key(&self) -> &[u8] {
        &self.aes_key
    }
    pub fn clear_aes_key(&mut self) {
        self.aes_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_aes_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.aes_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aes_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.aes_key
    }

    // Take field
    pub fn take_aes_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.aes_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for KeyEnvelope {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kek_label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.aes_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kek_label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kek_label);
        }
        if !self.aes_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.aes_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.kek_label.is_empty() {
            os.write_string(1, &self.kek_label)?;
        }
        if !self.aes_key.is_empty() {
            os.write_bytes(2, &self.aes_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyEnvelope {
        KeyEnvelope::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "kek_label",
                    |m: &KeyEnvelope| { &m.kek_label },
                    |m: &mut KeyEnvelope| { &mut m.kek_label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "aes_key",
                    |m: &KeyEnvelope| { &m.aes_key },
                    |m: &mut KeyEnvelope| { &mut m.aes_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<KeyEnvelope>(
                    "KeyEnvelope",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static KeyEnvelope {
        static mut instance: ::protobuf::lazy::Lazy<KeyEnvelope> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KeyEnvelope,
        };
        unsafe {
            instance.get(KeyEnvelope::new)
        }
    }
}

impl ::protobuf::Clear for KeyEnvelope {
    fn clear(&mut self) {
        self.kek_label.clear();
        self.aes_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeyEnvelope {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyEnvelope {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Location {
    // message fields
    pub latitude: f64,
    pub longitude: f64,
    pub altitude: f64,
    pub source: LocationSource,
    pub accuracy: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Location {
    fn default() -> &'a Location {
        <Location as ::protobuf::Message>::default_instance()
    }
}

impl Location {
    pub fn new() -> Location {
        ::std::default::Default::default()
    }

    // double latitude = 1;


    pub fn get_latitude(&self) -> f64 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f64) {
        self.latitude = v;
    }

    // double longitude = 2;


    pub fn get_longitude(&self) -> f64 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f64) {
        self.longitude = v;
    }

    // double altitude = 3;


    pub fn get_altitude(&self) -> f64 {
        self.altitude
    }
    pub fn clear_altitude(&mut self) {
        self.altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_altitude(&mut self, v: f64) {
        self.altitude = v;
    }

    // .common.LocationSource source = 4;


    pub fn get_source(&self) -> LocationSource {
        self.source
    }
    pub fn clear_source(&mut self) {
        self.source = LocationSource::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: LocationSource) {
        self.source = v;
    }

    // uint32 accuracy = 5;


    pub fn get_accuracy(&self) -> u32 {
        self.accuracy
    }
    pub fn clear_accuracy(&mut self) {
        self.accuracy = 0;
    }

    // Param is passed by value, moved
    pub fn set_accuracy(&mut self, v: u32) {
        self.accuracy = v;
    }
}

impl ::protobuf::Message for Location {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.latitude = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.longitude = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.altitude = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.source, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.accuracy = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.latitude != 0. {
            my_size += 9;
        }
        if self.longitude != 0. {
            my_size += 9;
        }
        if self.altitude != 0. {
            my_size += 9;
        }
        if self.source != LocationSource::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(4, self.source);
        }
        if self.accuracy != 0 {
            my_size += ::protobuf::rt::value_size(5, self.accuracy, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.latitude != 0. {
            os.write_double(1, self.latitude)?;
        }
        if self.longitude != 0. {
            os.write_double(2, self.longitude)?;
        }
        if self.altitude != 0. {
            os.write_double(3, self.altitude)?;
        }
        if self.source != LocationSource::UNKNOWN {
            os.write_enum(4, self.source.value())?;
        }
        if self.accuracy != 0 {
            os.write_uint32(5, self.accuracy)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Location {
        Location::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "latitude",
                    |m: &Location| { &m.latitude },
                    |m: &mut Location| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "longitude",
                    |m: &Location| { &m.longitude },
                    |m: &mut Location| { &mut m.longitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "altitude",
                    |m: &Location| { &m.altitude },
                    |m: &mut Location| { &mut m.altitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LocationSource>>(
                    "source",
                    |m: &Location| { &m.source },
                    |m: &mut Location| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "accuracy",
                    |m: &Location| { &m.accuracy },
                    |m: &mut Location| { &mut m.accuracy },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Location>(
                    "Location",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Location {
        static mut instance: ::protobuf::lazy::Lazy<Location> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Location,
        };
        unsafe {
            instance.get(Location::new)
        }
    }
}

impl ::protobuf::Clear for Location {
    fn clear(&mut self) {
        self.latitude = 0.;
        self.longitude = 0.;
        self.altitude = 0.;
        self.source = LocationSource::UNKNOWN;
        self.accuracy = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Location {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Location {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Modulation {
    LORA = 0,
    FSK = 1,
}

impl ::protobuf::ProtobufEnum for Modulation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Modulation> {
        match value {
            0 => ::std::option::Option::Some(Modulation::LORA),
            1 => ::std::option::Option::Some(Modulation::FSK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Modulation] = &[
            Modulation::LORA,
            Modulation::FSK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Modulation", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Modulation {
}

impl ::std::default::Default for Modulation {
    fn default() -> Self {
        Modulation::LORA
    }
}

impl ::protobuf::reflect::ProtobufValue for Modulation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Region {
    EU868 = 0,
    US915 = 2,
    CN779 = 3,
    EU433 = 4,
    AU915 = 5,
    CN470 = 6,
    AS923 = 7,
    KR920 = 8,
    IN865 = 9,
    RU864 = 10,
}

impl ::protobuf::ProtobufEnum for Region {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Region> {
        match value {
            0 => ::std::option::Option::Some(Region::EU868),
            2 => ::std::option::Option::Some(Region::US915),
            3 => ::std::option::Option::Some(Region::CN779),
            4 => ::std::option::Option::Some(Region::EU433),
            5 => ::std::option::Option::Some(Region::AU915),
            6 => ::std::option::Option::Some(Region::CN470),
            7 => ::std::option::Option::Some(Region::AS923),
            8 => ::std::option::Option::Some(Region::KR920),
            9 => ::std::option::Option::Some(Region::IN865),
            10 => ::std::option::Option::Some(Region::RU864),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Region] = &[
            Region::EU868,
            Region::US915,
            Region::CN779,
            Region::EU433,
            Region::AU915,
            Region::CN470,
            Region::AS923,
            Region::KR920,
            Region::IN865,
            Region::RU864,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Region", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Region {
}

impl ::std::default::Default for Region {
    fn default() -> Self {
        Region::EU868
    }
}

impl ::protobuf::reflect::ProtobufValue for Region {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LocationSource {
    UNKNOWN = 0,
    GPS = 1,
    CONFIG = 2,
    GEO_RESOLVER = 3,
}

impl ::protobuf::ProtobufEnum for LocationSource {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LocationSource> {
        match value {
            0 => ::std::option::Option::Some(LocationSource::UNKNOWN),
            1 => ::std::option::Option::Some(LocationSource::GPS),
            2 => ::std::option::Option::Some(LocationSource::CONFIG),
            3 => ::std::option::Option::Some(LocationSource::GEO_RESOLVER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LocationSource] = &[
            LocationSource::UNKNOWN,
            LocationSource::GPS,
            LocationSource::CONFIG,
            LocationSource::GEO_RESOLVER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("LocationSource", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for LocationSource {
}

impl ::std::default::Default for LocationSource {
    fn default() -> Self {
        LocationSource::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for LocationSource {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13common/common.proto\x12\x06common\"C\n\x0bKeyEnvelope\x12\x1b\n\tk\
    ek_label\x18\x01\x20\x01(\tR\x08kekLabel\x12\x17\n\x07aes_key\x18\x02\
    \x20\x01(\x0cR\x06aesKey\"\xac\x01\n\x08Location\x12\x1a\n\x08latitude\
    \x18\x01\x20\x01(\x01R\x08latitude\x12\x1c\n\tlongitude\x18\x02\x20\x01(\
    \x01R\tlongitude\x12\x1a\n\x08altitude\x18\x03\x20\x01(\x01R\x08altitude\
    \x12.\n\x06source\x18\x04\x20\x01(\x0e2\x16.common.LocationSourceR\x06so\
    urce\x12\x1a\n\x08accuracy\x18\x05\x20\x01(\rR\x08accuracy*\x1f\n\nModul\
    ation\x12\x08\n\x04LORA\x10\0\x12\x07\n\x03FSK\x10\x01*v\n\x06Region\x12\
    \t\n\x05EU868\x10\0\x12\t\n\x05US915\x10\x02\x12\t\n\x05CN779\x10\x03\
    \x12\t\n\x05EU433\x10\x04\x12\t\n\x05AU915\x10\x05\x12\t\n\x05CN470\x10\
    \x06\x12\t\n\x05AS923\x10\x07\x12\t\n\x05KR920\x10\x08\x12\t\n\x05IN865\
    \x10\t\x12\t\n\x05RU864\x10\n*D\n\x0eLocationSource\x12\x0b\n\x07UNKNOWN\
    \x10\0\x12\x07\n\x03GPS\x10\x01\x12\n\n\x06CONFIG\x10\x02\x12\x10\n\x0cG\
    EO_RESOLVER\x10\x03B0Z.github.com/brocaar/chirpstack-api/go/v3/commonJ\
    \x90\x0e\n\x06\x12\x04\0\0X\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\x08\x0e\n\x08\n\x01\x08\x12\x03\x04\0E\n\t\n\x02\
    \x08\x0b\x12\x03\x04\0E\n\n\n\x02\x05\0\x12\x04\x07\0\r\x01\n\n\n\x03\
    \x05\0\x01\x12\x03\x07\x05\x0f\n\x13\n\x04\x05\0\x02\0\x12\x03\t\x04\r\
    \x1a\x06\x20LoRa\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\t\x04\x08\n\x0c\n\
    \x05\x05\0\x02\0\x02\x12\x03\t\x0b\x0c\n\x12\n\x04\x05\0\x02\x01\x12\x03\
    \x0c\x04\x0c\x1a\x05\x20FSK\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0c\
    \x04\x07\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0c\n\x0b\n\n\n\x02\x05\
    \x01\x12\x04\x0f\0-\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0f\x05\x0b\n\x14\
    \n\x04\x05\x01\x02\0\x12\x03\x11\x04\x0e\x1a\x07\x20EU868\n\n\x0c\n\x05\
    \x05\x01\x02\0\x01\x12\x03\x11\x04\t\n\x0c\n\x05\x05\x01\x02\0\x02\x12\
    \x03\x11\x0c\r\n\x14\n\x04\x05\x01\x02\x01\x12\x03\x14\x04\x0e\x1a\x07\
    \x20US915\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x14\x04\t\n\x0c\n\
    \x05\x05\x01\x02\x01\x02\x12\x03\x14\x0c\r\n\x14\n\x04\x05\x01\x02\x02\
    \x12\x03\x17\x04\x0e\x1a\x07\x20CN779\n\n\x0c\n\x05\x05\x01\x02\x02\x01\
    \x12\x03\x17\x04\t\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x17\x0c\r\n\
    \x14\n\x04\x05\x01\x02\x03\x12\x03\x1a\x04\x0e\x1a\x07\x20EU433\n\n\x0c\
    \n\x05\x05\x01\x02\x03\x01\x12\x03\x1a\x04\t\n\x0c\n\x05\x05\x01\x02\x03\
    \x02\x12\x03\x1a\x0c\r\n\x14\n\x04\x05\x01\x02\x04\x12\x03\x1d\x04\x0e\
    \x1a\x07\x20AU915\n\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x1d\x04\t\n\
    \x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x1d\x0c\r\n\x14\n\x04\x05\x01\x02\
    \x05\x12\x03\x20\x04\x0e\x1a\x07\x20CN470\n\n\x0c\n\x05\x05\x01\x02\x05\
    \x01\x12\x03\x20\x04\t\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x20\x0c\r\
    \n\x14\n\x04\x05\x01\x02\x06\x12\x03#\x04\x0e\x1a\x07\x20AS923\n\n\x0c\n\
    \x05\x05\x01\x02\x06\x01\x12\x03#\x04\t\n\x0c\n\x05\x05\x01\x02\x06\x02\
    \x12\x03#\x0c\r\n\x14\n\x04\x05\x01\x02\x07\x12\x03&\x04\x0e\x1a\x07\x20\
    KR920\n\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x03&\x04\t\n\x0c\n\x05\x05\
    \x01\x02\x07\x02\x12\x03&\x0c\r\n\x14\n\x04\x05\x01\x02\x08\x12\x03)\x04\
    \x0e\x1a\x07\x20IN865\n\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03)\x04\t\n\
    \x0c\n\x05\x05\x01\x02\x08\x02\x12\x03)\x0c\r\n\x14\n\x04\x05\x01\x02\t\
    \x12\x03,\x04\x0f\x1a\x07\x20RU864\n\n\x0c\n\x05\x05\x01\x02\t\x01\x12\
    \x03,\x04\t\n\x0c\n\x05\x05\x01\x02\t\x02\x12\x03,\x0c\x0e\n\n\n\x02\x04\
    \0\x12\x040\09\x01\n\n\n\x03\x04\0\x01\x12\x030\x08\x13\n\x19\n\x04\x04\
    \0\x02\0\x12\x032\x04\x19\x1a\x0c\x20KEK\x20label.\n\n\r\n\x05\x04\0\x02\
    \0\x04\x12\x042\x040\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x032\x04\n\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x032\x0b\x14\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x032\x17\x18\n\xee\x01\n\x04\x04\0\x02\x01\x12\x038\x04\x16\x1a\xe0\
    \x01\x20AES\x20key\x20(when\x20the\x20kek_label\x20is\x20set,\x20this\
    \x20key\x20is\x20encrypted\x20using\x20a\x20key\n\x20known\x20to\x20the\
    \x20join-server\x20and\x20application-server.\n\x20For\x20more\x20inform\
    ation\x20please\x20refer\x20to\x20the\x20LoRaWAN\x20Backend\x20Interface\
    \n\x20'Key\x20Transport\x20Security'\x20section.\n\n\r\n\x05\x04\0\x02\
    \x01\x04\x12\x048\x042\x19\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x038\x04\t\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x038\n\x11\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x038\x14\x15\n\n\n\x02\x05\x02\x12\x04;\0G\x01\n\n\n\x03\x05\
    \x02\x01\x12\x03;\x05\x13\n\x17\n\x04\x05\x02\x02\0\x12\x03=\x04\x10\x1a\
    \n\x20Unknown.\n\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03=\x04\x0b\n\x0c\n\
    \x05\x05\x02\x02\0\x02\x12\x03=\x0e\x0f\n\x13\n\x04\x05\x02\x02\x01\x12\
    \x03@\x04\x0c\x1a\x06\x20GPS.\n\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03@\
    \x04\x07\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03@\n\x0b\n#\n\x04\x05\x02\
    \x02\x02\x12\x03C\x04\x0f\x1a\x16\x20Manually\x20configured.\n\n\x0c\n\
    \x05\x05\x02\x02\x02\x01\x12\x03C\x04\n\n\x0c\n\x05\x05\x02\x02\x02\x02\
    \x12\x03C\r\x0e\n\x1c\n\x04\x05\x02\x02\x03\x12\x03F\x04\x15\x1a\x0f\x20\
    Geo\x20resolver.\n\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03F\x04\x10\n\
    \x0c\n\x05\x05\x02\x02\x03\x02\x12\x03F\x13\x14\n\n\n\x02\x04\x01\x12\
    \x04I\0X\x01\n\n\n\x03\x04\x01\x01\x12\x03I\x08\x10\n\x18\n\x04\x04\x01\
    \x02\0\x12\x03K\x04\x18\x1a\x0b\x20Latitude.\n\n\r\n\x05\x04\x01\x02\0\
    \x04\x12\x04K\x04I\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03K\x04\n\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03K\x0b\x13\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03K\x16\x17\n\x19\n\x04\x04\x01\x02\x01\x12\x03N\x04\x19\x1a\
    \x0c\x20Longitude.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04N\x04K\x18\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03N\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03N\x0b\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03N\x17\
    \x18\n\x18\n\x04\x04\x01\x02\x02\x12\x03Q\x04\x18\x1a\x0b\x20Altitude.\n\
    \n\r\n\x05\x04\x01\x02\x02\x04\x12\x04Q\x04N\x19\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03Q\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03Q\x0b\x13\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03Q\x16\x17\n\x1f\n\x04\x04\x01\
    \x02\x03\x12\x03T\x04\x1e\x1a\x12\x20Location\x20source.\n\n\r\n\x05\x04\
    \x01\x02\x03\x04\x12\x04T\x04Q\x18\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\
    \x03T\x04\x12\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03T\x13\x19\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03T\x1c\x1d\n$\n\x04\x04\x01\x02\x04\x12\
    \x03W\x04\x18\x1a\x17\x20Accuracy\x20(in\x20meters).\n\n\r\n\x05\x04\x01\
    \x02\x04\x04\x12\x04W\x04T\x1e\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03W\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03W\x0b\x13\n\x0c\n\x05\x04\
    \x01\x02\x04\x03\x12\x03W\x16\x17b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
