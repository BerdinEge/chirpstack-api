// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `nc/nc.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct HandleUplinkMetaDataRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub tx_info: ::protobuf::SingularPtrField<super::gw::UplinkTXInfo>,
    pub rx_info: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>,
    pub phy_payload_byte_count: u32,
    pub mac_command_byte_count: u32,
    pub application_payload_byte_count: u32,
    pub message_type: MType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleUplinkMetaDataRequest {
    fn default() -> &'a HandleUplinkMetaDataRequest {
        <HandleUplinkMetaDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleUplinkMetaDataRequest {
    pub fn new() -> HandleUplinkMetaDataRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // .gw.UplinkTXInfo tx_info = 2;


    pub fn get_tx_info(&self) -> &super::gw::UplinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::UplinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::UplinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::UplinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::UplinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::UplinkTXInfo::new())
    }

    // repeated .gw.UplinkRXInfo rx_info = 3;


    pub fn get_rx_info(&self) -> &[super::gw::UplinkRXInfo] {
        &self.rx_info
    }
    pub fn clear_rx_info(&mut self) {
        self.rx_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_rx_info(&mut self, v: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>) {
        self.rx_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rx_info(&mut self) -> &mut ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        &mut self.rx_info
    }

    // Take field
    pub fn take_rx_info(&mut self) -> ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        ::std::mem::replace(&mut self.rx_info, ::protobuf::RepeatedField::new())
    }

    // uint32 phy_payload_byte_count = 4;


    pub fn get_phy_payload_byte_count(&self) -> u32 {
        self.phy_payload_byte_count
    }
    pub fn clear_phy_payload_byte_count(&mut self) {
        self.phy_payload_byte_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_phy_payload_byte_count(&mut self, v: u32) {
        self.phy_payload_byte_count = v;
    }

    // uint32 mac_command_byte_count = 5;


    pub fn get_mac_command_byte_count(&self) -> u32 {
        self.mac_command_byte_count
    }
    pub fn clear_mac_command_byte_count(&mut self) {
        self.mac_command_byte_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_mac_command_byte_count(&mut self, v: u32) {
        self.mac_command_byte_count = v;
    }

    // uint32 application_payload_byte_count = 6;


    pub fn get_application_payload_byte_count(&self) -> u32 {
        self.application_payload_byte_count
    }
    pub fn clear_application_payload_byte_count(&mut self) {
        self.application_payload_byte_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_payload_byte_count(&mut self, v: u32) {
        self.application_payload_byte_count = v;
    }

    // .nc.MType message_type = 7;


    pub fn get_message_type(&self) -> MType {
        self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type = MType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: MType) {
        self.message_type = v;
    }
}

impl ::protobuf::Message for HandleUplinkMetaDataRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rx_info)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.phy_payload_byte_count = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mac_command_byte_count = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.application_payload_byte_count = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.message_type, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rx_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.phy_payload_byte_count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.phy_payload_byte_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mac_command_byte_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.mac_command_byte_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.application_payload_byte_count != 0 {
            my_size += ::protobuf::rt::value_size(6, self.application_payload_byte_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.message_type != MType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(7, self.message_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rx_info {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.phy_payload_byte_count != 0 {
            os.write_uint32(4, self.phy_payload_byte_count)?;
        }
        if self.mac_command_byte_count != 0 {
            os.write_uint32(5, self.mac_command_byte_count)?;
        }
        if self.application_payload_byte_count != 0 {
            os.write_uint32(6, self.application_payload_byte_count)?;
        }
        if self.message_type != MType::UNKNOWN {
            os.write_enum(7, self.message_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleUplinkMetaDataRequest {
        HandleUplinkMetaDataRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &HandleUplinkMetaDataRequest| { &m.dev_eui },
                    |m: &mut HandleUplinkMetaDataRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkTXInfo>>(
                    "tx_info",
                    |m: &HandleUplinkMetaDataRequest| { &m.tx_info },
                    |m: &mut HandleUplinkMetaDataRequest| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkRXInfo>>(
                    "rx_info",
                    |m: &HandleUplinkMetaDataRequest| { &m.rx_info },
                    |m: &mut HandleUplinkMetaDataRequest| { &mut m.rx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "phy_payload_byte_count",
                    |m: &HandleUplinkMetaDataRequest| { &m.phy_payload_byte_count },
                    |m: &mut HandleUplinkMetaDataRequest| { &mut m.phy_payload_byte_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mac_command_byte_count",
                    |m: &HandleUplinkMetaDataRequest| { &m.mac_command_byte_count },
                    |m: &mut HandleUplinkMetaDataRequest| { &mut m.mac_command_byte_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "application_payload_byte_count",
                    |m: &HandleUplinkMetaDataRequest| { &m.application_payload_byte_count },
                    |m: &mut HandleUplinkMetaDataRequest| { &mut m.application_payload_byte_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MType>>(
                    "message_type",
                    |m: &HandleUplinkMetaDataRequest| { &m.message_type },
                    |m: &mut HandleUplinkMetaDataRequest| { &mut m.message_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleUplinkMetaDataRequest>(
                    "HandleUplinkMetaDataRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleUplinkMetaDataRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleUplinkMetaDataRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleUplinkMetaDataRequest,
        };
        unsafe {
            instance.get(HandleUplinkMetaDataRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleUplinkMetaDataRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.tx_info.clear();
        self.rx_info.clear();
        self.phy_payload_byte_count = 0;
        self.mac_command_byte_count = 0;
        self.application_payload_byte_count = 0;
        self.message_type = MType::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleUplinkMetaDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleUplinkMetaDataRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleDownlinkMetaDataRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub multicast_group_id: ::std::vec::Vec<u8>,
    pub tx_info: ::protobuf::SingularPtrField<super::gw::DownlinkTXInfo>,
    pub phy_payload_byte_count: u32,
    pub mac_command_byte_count: u32,
    pub application_payload_byte_count: u32,
    pub message_type: MType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleDownlinkMetaDataRequest {
    fn default() -> &'a HandleDownlinkMetaDataRequest {
        <HandleDownlinkMetaDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleDownlinkMetaDataRequest {
    pub fn new() -> HandleDownlinkMetaDataRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes multicast_group_id = 2;


    pub fn get_multicast_group_id(&self) -> &[u8] {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::vec::Vec::new())
    }

    // .gw.DownlinkTXInfo tx_info = 3;


    pub fn get_tx_info(&self) -> &super::gw::DownlinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::DownlinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::DownlinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::DownlinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::DownlinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::DownlinkTXInfo::new())
    }

    // uint32 phy_payload_byte_count = 4;


    pub fn get_phy_payload_byte_count(&self) -> u32 {
        self.phy_payload_byte_count
    }
    pub fn clear_phy_payload_byte_count(&mut self) {
        self.phy_payload_byte_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_phy_payload_byte_count(&mut self, v: u32) {
        self.phy_payload_byte_count = v;
    }

    // uint32 mac_command_byte_count = 5;


    pub fn get_mac_command_byte_count(&self) -> u32 {
        self.mac_command_byte_count
    }
    pub fn clear_mac_command_byte_count(&mut self) {
        self.mac_command_byte_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_mac_command_byte_count(&mut self, v: u32) {
        self.mac_command_byte_count = v;
    }

    // uint32 application_payload_byte_count = 6;


    pub fn get_application_payload_byte_count(&self) -> u32 {
        self.application_payload_byte_count
    }
    pub fn clear_application_payload_byte_count(&mut self) {
        self.application_payload_byte_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_payload_byte_count(&mut self, v: u32) {
        self.application_payload_byte_count = v;
    }

    // .nc.MType message_type = 7;


    pub fn get_message_type(&self) -> MType {
        self.message_type
    }
    pub fn clear_message_type(&mut self) {
        self.message_type = MType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_message_type(&mut self, v: MType) {
        self.message_type = v;
    }
}

impl ::protobuf::Message for HandleDownlinkMetaDataRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.phy_payload_byte_count = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mac_command_byte_count = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.application_payload_byte_count = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.message_type, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.multicast_group_id);
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.phy_payload_byte_count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.phy_payload_byte_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mac_command_byte_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.mac_command_byte_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.application_payload_byte_count != 0 {
            my_size += ::protobuf::rt::value_size(6, self.application_payload_byte_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.message_type != MType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(7, self.message_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if !self.multicast_group_id.is_empty() {
            os.write_bytes(2, &self.multicast_group_id)?;
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.phy_payload_byte_count != 0 {
            os.write_uint32(4, self.phy_payload_byte_count)?;
        }
        if self.mac_command_byte_count != 0 {
            os.write_uint32(5, self.mac_command_byte_count)?;
        }
        if self.application_payload_byte_count != 0 {
            os.write_uint32(6, self.application_payload_byte_count)?;
        }
        if self.message_type != MType::UNKNOWN {
            os.write_enum(7, self.message_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleDownlinkMetaDataRequest {
        HandleDownlinkMetaDataRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &HandleDownlinkMetaDataRequest| { &m.dev_eui },
                    |m: &mut HandleDownlinkMetaDataRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "multicast_group_id",
                    |m: &HandleDownlinkMetaDataRequest| { &m.multicast_group_id },
                    |m: &mut HandleDownlinkMetaDataRequest| { &mut m.multicast_group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::DownlinkTXInfo>>(
                    "tx_info",
                    |m: &HandleDownlinkMetaDataRequest| { &m.tx_info },
                    |m: &mut HandleDownlinkMetaDataRequest| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "phy_payload_byte_count",
                    |m: &HandleDownlinkMetaDataRequest| { &m.phy_payload_byte_count },
                    |m: &mut HandleDownlinkMetaDataRequest| { &mut m.phy_payload_byte_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mac_command_byte_count",
                    |m: &HandleDownlinkMetaDataRequest| { &m.mac_command_byte_count },
                    |m: &mut HandleDownlinkMetaDataRequest| { &mut m.mac_command_byte_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "application_payload_byte_count",
                    |m: &HandleDownlinkMetaDataRequest| { &m.application_payload_byte_count },
                    |m: &mut HandleDownlinkMetaDataRequest| { &mut m.application_payload_byte_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MType>>(
                    "message_type",
                    |m: &HandleDownlinkMetaDataRequest| { &m.message_type },
                    |m: &mut HandleDownlinkMetaDataRequest| { &mut m.message_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleDownlinkMetaDataRequest>(
                    "HandleDownlinkMetaDataRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleDownlinkMetaDataRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleDownlinkMetaDataRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleDownlinkMetaDataRequest,
        };
        unsafe {
            instance.get(HandleDownlinkMetaDataRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleDownlinkMetaDataRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.multicast_group_id.clear();
        self.tx_info.clear();
        self.phy_payload_byte_count = 0;
        self.mac_command_byte_count = 0;
        self.application_payload_byte_count = 0;
        self.message_type = MType::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleDownlinkMetaDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleDownlinkMetaDataRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleUplinkMACCommandRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub cid: u32,
    pub commands: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleUplinkMACCommandRequest {
    fn default() -> &'a HandleUplinkMACCommandRequest {
        <HandleUplinkMACCommandRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleUplinkMACCommandRequest {
    pub fn new() -> HandleUplinkMACCommandRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // uint32 cid = 2;


    pub fn get_cid(&self) -> u32 {
        self.cid
    }
    pub fn clear_cid(&mut self) {
        self.cid = 0;
    }

    // Param is passed by value, moved
    pub fn set_cid(&mut self, v: u32) {
        self.cid = v;
    }

    // repeated bytes commands = 6;


    pub fn get_commands(&self) -> &[::std::vec::Vec<u8>] {
        &self.commands
    }
    pub fn clear_commands(&mut self) {
        self.commands.clear();
    }

    // Param is passed by value, moved
    pub fn set_commands(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.commands = v;
    }

    // Mutable pointer to the field.
    pub fn mut_commands(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.commands
    }

    // Take field
    pub fn take_commands(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.commands, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HandleUplinkMACCommandRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cid = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.commands)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if self.cid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cid, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.commands {
            my_size += ::protobuf::rt::bytes_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if self.cid != 0 {
            os.write_uint32(2, self.cid)?;
        }
        for v in &self.commands {
            os.write_bytes(6, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleUplinkMACCommandRequest {
        HandleUplinkMACCommandRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &HandleUplinkMACCommandRequest| { &m.dev_eui },
                    |m: &mut HandleUplinkMACCommandRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cid",
                    |m: &HandleUplinkMACCommandRequest| { &m.cid },
                    |m: &mut HandleUplinkMACCommandRequest| { &mut m.cid },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "commands",
                    |m: &HandleUplinkMACCommandRequest| { &m.commands },
                    |m: &mut HandleUplinkMACCommandRequest| { &mut m.commands },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleUplinkMACCommandRequest>(
                    "HandleUplinkMACCommandRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleUplinkMACCommandRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleUplinkMACCommandRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleUplinkMACCommandRequest,
        };
        unsafe {
            instance.get(HandleUplinkMACCommandRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleUplinkMACCommandRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.cid = 0;
        self.commands.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleUplinkMACCommandRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleUplinkMACCommandRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MType {
    UNKNOWN = 0,
    JOIN_REQUEST = 1,
    JOIN_ACCEPT = 2,
    UNCONFIRMED_DATA_UP = 3,
    UNCONFIRMED_DATA_DOWN = 4,
    CONFIRMED_DATA_UP = 5,
    CONFIRMED_DATA_DOWN = 6,
    REJOIN_REQUEST = 7,
}

impl ::protobuf::ProtobufEnum for MType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MType> {
        match value {
            0 => ::std::option::Option::Some(MType::UNKNOWN),
            1 => ::std::option::Option::Some(MType::JOIN_REQUEST),
            2 => ::std::option::Option::Some(MType::JOIN_ACCEPT),
            3 => ::std::option::Option::Some(MType::UNCONFIRMED_DATA_UP),
            4 => ::std::option::Option::Some(MType::UNCONFIRMED_DATA_DOWN),
            5 => ::std::option::Option::Some(MType::CONFIRMED_DATA_UP),
            6 => ::std::option::Option::Some(MType::CONFIRMED_DATA_DOWN),
            7 => ::std::option::Option::Some(MType::REJOIN_REQUEST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MType] = &[
            MType::UNKNOWN,
            MType::JOIN_REQUEST,
            MType::JOIN_ACCEPT,
            MType::UNCONFIRMED_DATA_UP,
            MType::UNCONFIRMED_DATA_DOWN,
            MType::CONFIRMED_DATA_UP,
            MType::CONFIRMED_DATA_DOWN,
            MType::REJOIN_REQUEST,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MType {
}

impl ::std::default::Default for MType {
    fn default() -> Self {
        MType::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for MType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bnc/nc.proto\x12\x02nc\x1a\x1bgoogle/protobuf/empty.proto\x1a\x0bgw\
    /gw.proto\"\xe9\x02\n\x1bHandleUplinkMetaDataRequest\x12\x17\n\x07dev_eu\
    i\x18\x01\x20\x01(\x0cR\x06devEui\x12)\n\x07tx_info\x18\x02\x20\x01(\x0b\
    2\x10.gw.UplinkTXInfoR\x06txInfo\x12)\n\x07rx_info\x18\x03\x20\x03(\x0b2\
    \x10.gw.UplinkRXInfoR\x06rxInfo\x123\n\x16phy_payload_byte_count\x18\x04\
    \x20\x01(\rR\x13phyPayloadByteCount\x123\n\x16mac_command_byte_count\x18\
    \x05\x20\x01(\rR\x13macCommandByteCount\x12C\n\x1eapplication_payload_by\
    te_count\x18\x06\x20\x01(\rR\x1bapplicationPayloadByteCount\x12,\n\x0cme\
    ssage_type\x18\x07\x20\x01(\x0e2\t.nc.MTypeR\x0bmessageType\"\xf0\x02\n\
    \x1dHandleDownlinkMetaDataRequest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\
    \x0cR\x06devEui\x12,\n\x12multicast_group_id\x18\x02\x20\x01(\x0cR\x10mu\
    lticastGroupId\x12+\n\x07tx_info\x18\x03\x20\x01(\x0b2\x12.gw.DownlinkTX\
    InfoR\x06txInfo\x123\n\x16phy_payload_byte_count\x18\x04\x20\x01(\rR\x13\
    phyPayloadByteCount\x123\n\x16mac_command_byte_count\x18\x05\x20\x01(\rR\
    \x13macCommandByteCount\x12C\n\x1eapplication_payload_byte_count\x18\x06\
    \x20\x01(\rR\x1bapplicationPayloadByteCount\x12,\n\x0cmessage_type\x18\
    \x07\x20\x01(\x0e2\t.nc.MTypeR\x0bmessageType\"f\n\x1dHandleUplinkMACCom\
    mandRequest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\x10\
    \n\x03cid\x18\x02\x20\x01(\rR\x03cid\x12\x1a\n\x08commands\x18\x06\x20\
    \x03(\x0cR\x08commands*\xaf\x01\n\x05MType\x12\x0b\n\x07UNKNOWN\x10\0\
    \x12\x10\n\x0cJOIN_REQUEST\x10\x01\x12\x0f\n\x0bJOIN_ACCEPT\x10\x02\x12\
    \x17\n\x13UNCONFIRMED_DATA_UP\x10\x03\x12\x19\n\x15UNCONFIRMED_DATA_DOWN\
    \x10\x04\x12\x15\n\x11CONFIRMED_DATA_UP\x10\x05\x12\x17\n\x13CONFIRMED_D\
    ATA_DOWN\x10\x06\x12\x12\n\x0eREJOIN_REQUEST\x10\x072\x9b\x02\n\x18Netwo\
    rkControllerService\x12Q\n\x14HandleUplinkMetaData\x12\x1f.nc.HandleUpli\
    nkMetaDataRequest\x1a\x16.google.protobuf.Empty\"\0\x12U\n\x16HandleDown\
    linkMetaData\x12!.nc.HandleDownlinkMetaDataRequest\x1a\x16.google.protob\
    uf.Empty\"\0\x12U\n\x16HandleUplinkMACCommand\x12!.nc.HandleUplinkMACCom\
    mandRequest\x1a\x16.google.protobuf.Empty\"\0B,Z*github.com/brocaar/chir\
    pstack-api/go/v3/ncJ\xa7\x15\n\x06\x12\x04\0\0\\\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\n\n\x08\n\x01\x08\x12\x03\
    \x04\0A\n\t\n\x02\x08\x0b\x12\x03\x04\0A\n\t\n\x02\x03\0\x12\x03\x06\x07\
    $\n\t\n\x02\x03\x01\x12\x03\x07\x07\x14\n\n\n\x02\x05\0\x12\x04\n\0\x13\
    \x01\n\n\n\x03\x05\0\x01\x12\x03\n\x05\n\n\x0b\n\x04\x05\0\x02\0\x12\x03\
    \x0b\x04\x10\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0b\x04\x0b\n\x0c\n\x05\
    \x05\0\x02\0\x02\x12\x03\x0b\x0e\x0f\n\x0b\n\x04\x05\0\x02\x01\x12\x03\
    \x0c\x04\x15\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0c\x04\x10\n\x0c\n\
    \x05\x05\0\x02\x01\x02\x12\x03\x0c\x13\x14\n\x0b\n\x04\x05\0\x02\x02\x12\
    \x03\r\x04\x14\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\r\x04\x0f\n\x0c\n\
    \x05\x05\0\x02\x02\x02\x12\x03\r\x12\x13\n\x0b\n\x04\x05\0\x02\x03\x12\
    \x03\x0e\x04\x1c\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0e\x04\x17\n\x0c\
    \n\x05\x05\0\x02\x03\x02\x12\x03\x0e\x1a\x1b\n\x0b\n\x04\x05\0\x02\x04\
    \x12\x03\x0f\x04\x1e\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x0f\x04\x19\n\
    \x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0f\x1c\x1d\n\x0b\n\x04\x05\0\x02\
    \x05\x12\x03\x10\x04\x1a\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x10\x04\
    \x15\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x10\x18\x19\n\x0b\n\x04\x05\0\
    \x02\x06\x12\x03\x11\x04\x1c\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\x11\
    \x04\x17\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\x11\x1a\x1b\n\x0b\n\x04\
    \x05\0\x02\x07\x12\x03\x12\x04\x17\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\
    \x12\x04\x12\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x12\x15\x16\n`\n\x02\
    \x06\0\x12\x04\x17\0#\x01\x1aT\x20NetworkControllerService\x20is\x20the\
    \x20server\x20to\x20be\x20implemeted\x20by\x20the\x20network-controller.\
    \n\n\n\n\x03\x06\0\x01\x12\x03\x17\x08\x20\n=\n\x04\x06\0\x02\0\x12\x03\
    \x19\x08`\x1a0\x20HandleUplinkMetaData\x20handles\x20uplink\x20meta-rata\
    .\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x19\x0c\x20\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x19!<\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x19G\\\nA\n\
    \x04\x06\0\x02\x01\x12\x03\x1c\x04`\x1a4\x20HandleDownlinkMetaData\x20ha\
    ndles\x20downlink\x20meta-data.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    \x1c\x08\x1e\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x1c\x1f<\n\x0c\n\x05\
    \x06\0\x02\x01\x03\x12\x03\x1cG\\\n\xe2\x01\n\x04\x06\0\x02\x02\x12\x03\
    \"\x08d\x1a\xd4\x01\x20HandleUplinkMACCommand\x20handles\x20an\x20uplink\
    \x20mac-command.\n\x20This\x20method\x20will\x20only\x20be\x20called\x20\
    in\x20case\x20the\x20mac-command\x20request\x20was\n\x20enqueued\x20thro\
    ught\x20the\x20API\x20or\x20when\x20the\x20CID\x20is\x20>=\x200x80\x20(p\
    roprietary\n\x20mac-command\x20range).\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\"\x0c\"\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\"#@\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03\"K`\n\n\n\x02\x04\0\x12\x04%\0:\x01\n\n\n\x03\
    \x04\0\x01\x12\x03%\x08#\n$\n\x04\x04\0\x02\0\x12\x03'\x08\x1a\x1a\x17\
    \x20Device\x20EUI\x20(8\x20bytes).\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04'\
    \x08%%\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03'\x08\r\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03'\x0e\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03'\x18\x19\n\
    \x1c\n\x04\x04\0\x02\x01\x12\x03*\x08$\x1a\x0f\x20TX\x20meta-data.\n\n\r\
    \n\x05\x04\0\x02\x01\x04\x12\x04*\x08'\x1a\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03*\x08\x17\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03*\x18\x1f\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03*\"#\n\x1c\n\x04\x04\0\x02\x02\x12\x03-\
    \x08-\x1a\x0f\x20RX\x20meta-data.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03-\x08\x10\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03-\x11\x20\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03-!(\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03-+,\n\
    %\n\x04\x04\0\x02\x03\x12\x030\x04&\x1a\x18\x20PHYPayload\x20byte\x20cou\
    nt.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x040\x04--\n\x0c\n\x05\x04\0\x02\
    \x03\x05\x12\x030\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x030\x0b!\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x030$%\n&\n\x04\x04\0\x02\x04\x12\x033\
    \x04&\x1a\x19\x20MAC-Command\x20byte\x20count.\n\n\r\n\x05\x04\0\x02\x04\
    \x04\x12\x043\x040&\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x033\x04\n\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x033\x0b!\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x033$%\n.\n\x04\x04\0\x02\x05\x12\x036\x04.\x1a!\x20Application\x20payl\
    oad\x20byte\x20count.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x046\x043&\n\x0c\
    \n\x05\x04\0\x02\x05\x05\x12\x036\x04\n\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x036\x0b)\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x036,-\n\x1c\n\x04\x04\
    \0\x02\x06\x12\x039\x04\x1b\x1a\x0f\x20Message\x20type.\n\n\r\n\x05\x04\
    \0\x02\x06\x04\x12\x049\x046.\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x039\x04\
    \t\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x039\n\x16\n\x0c\n\x05\x04\0\x02\
    \x06\x03\x12\x039\x19\x1a\n\n\n\x02\x04\x01\x12\x04<\0Q\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03<\x08%\n$\n\x04\x04\x01\x02\0\x12\x03>\x04\x16\x1a\
    \x17\x20Device\x20EUI\x20(8\x20bytes).\n\n\r\n\x05\x04\x01\x02\0\x04\x12\
    \x04>\x04<'\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03>\x04\t\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03>\n\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03>\x14\
    \x15\n)\n\x04\x04\x01\x02\x01\x12\x03A\x04!\x1a\x1c\x20Multicast\x20Grou\
    p\x20ID\x20(UUID).\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04A\x04>\x16\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03A\x04\t\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03A\n\x1c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03A\x1f\x20\
    \n\x1c\n\x04\x04\x01\x02\x02\x12\x03D\x04\"\x1a\x0f\x20TX\x20meta-data.\
    \n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04D\x04A!\n\x0c\n\x05\x04\x01\x02\
    \x02\x06\x12\x03D\x04\x15\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03D\x16\
    \x1d\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03D\x20!\n%\n\x04\x04\x01\x02\
    \x03\x12\x03G\x04&\x1a\x18\x20PHYPayload\x20byte\x20count.\n\n\r\n\x05\
    \x04\x01\x02\x03\x04\x12\x04G\x04D\"\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03G\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03G\x0b!\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03G$%\n&\n\x04\x04\x01\x02\x04\x12\x03J\x04&\
    \x1a\x19\x20MAC-Command\x20byte\x20count.\n\n\r\n\x05\x04\x01\x02\x04\
    \x04\x12\x04J\x04G&\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03J\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x04\x01\x12\x03J\x0b!\n\x0c\n\x05\x04\x01\x02\x04\x03\
    \x12\x03J$%\n.\n\x04\x04\x01\x02\x05\x12\x03M\x04.\x1a!\x20Application\
    \x20payload\x20byte\x20count.\n\n\r\n\x05\x04\x01\x02\x05\x04\x12\x04M\
    \x04J&\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03M\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x05\x01\x12\x03M\x0b)\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03M,\
    -\n\x1c\n\x04\x04\x01\x02\x06\x12\x03P\x04\x1b\x1a\x0f\x20Message\x20typ\
    e.\n\n\r\n\x05\x04\x01\x02\x06\x04\x12\x04P\x04M.\n\x0c\n\x05\x04\x01\
    \x02\x06\x06\x12\x03P\x04\t\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03P\n\
    \x16\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03P\x19\x1a\n\n\n\x02\x04\x02\
    \x12\x04S\0\\\x01\n\n\n\x03\x04\x02\x01\x12\x03S\x08%\n$\n\x04\x04\x02\
    \x02\0\x12\x03U\x08\x1a\x1a\x17\x20Device\x20EUI\x20(8\x20bytes).\n\n\r\
    \n\x05\x04\x02\x02\0\x04\x12\x04U\x08S'\n\x0c\n\x05\x04\x02\x02\0\x05\
    \x12\x03U\x08\r\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03U\x0e\x15\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03U\x18\x19\nC\n\x04\x04\x02\x02\x01\x12\x03\
    X\x08\x17\x1a6\x20Command\x20identifier\x20(specified\x20by\x20the\x20Lo\
    RaWAN\x20specs).\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04X\x08U\x1a\n\x0c\
    \n\x05\x04\x02\x02\x01\x05\x12\x03X\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03X\x0f\x12\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03X\x15\x16\n\
    &\n\x04\x04\x02\x02\x02\x12\x03[\x08$\x1a\x19\x20MAC-command\x20payload(\
    s).\n\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x03[\x08\x10\n\x0c\n\x05\x04\
    \x02\x02\x02\x05\x12\x03[\x11\x16\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03[\x17\x1f\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03[\"#b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
