// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ns/ns.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct CreateServiceProfileRequest {
    // message fields
    pub service_profile: ::protobuf::SingularPtrField<super::profiles::ServiceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateServiceProfileRequest {
    fn default() -> &'a CreateServiceProfileRequest {
        <CreateServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateServiceProfileRequest {
    pub fn new() -> CreateServiceProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.ServiceProfile service_profile = 1;


    pub fn get_service_profile(&self) -> &super::profiles::ServiceProfile {
        self.service_profile.as_ref().unwrap_or_else(|| super::profiles::ServiceProfile::default_instance())
    }
    pub fn clear_service_profile(&mut self) {
        self.service_profile.clear();
    }

    pub fn has_service_profile(&self) -> bool {
        self.service_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_profile(&mut self, v: super::profiles::ServiceProfile) {
        self.service_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile(&mut self) -> &mut super::profiles::ServiceProfile {
        if self.service_profile.is_none() {
            self.service_profile.set_default();
        }
        self.service_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_profile(&mut self) -> super::profiles::ServiceProfile {
        self.service_profile.take().unwrap_or_else(|| super::profiles::ServiceProfile::new())
    }
}

impl ::protobuf::Message for CreateServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateServiceProfileRequest {
        CreateServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::ServiceProfile>>(
                    "service_profile",
                    |m: &CreateServiceProfileRequest| { &m.service_profile },
                    |m: &mut CreateServiceProfileRequest| { &mut m.service_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateServiceProfileRequest>(
                    "CreateServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateServiceProfileRequest,
        };
        unsafe {
            instance.get(CreateServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateServiceProfileRequest {
    fn clear(&mut self) {
        self.service_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateServiceProfileResponse {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateServiceProfileResponse {
    fn default() -> &'a CreateServiceProfileResponse {
        <CreateServiceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateServiceProfileResponse {
    pub fn new() -> CreateServiceProfileResponse {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateServiceProfileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateServiceProfileResponse {
        CreateServiceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &CreateServiceProfileResponse| { &m.id },
                    |m: &mut CreateServiceProfileResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateServiceProfileResponse>(
                    "CreateServiceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateServiceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateServiceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateServiceProfileResponse,
        };
        unsafe {
            instance.get(CreateServiceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateServiceProfileResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateServiceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateServiceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceProfileRequest {
    fn default() -> &'a GetServiceProfileRequest {
        <GetServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceProfileRequest {
    pub fn new() -> GetServiceProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceProfileRequest {
        GetServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &GetServiceProfileRequest| { &m.id },
                    |m: &mut GetServiceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetServiceProfileRequest>(
                    "GetServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetServiceProfileRequest,
        };
        unsafe {
            instance.get(GetServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetServiceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceProfileResponse {
    // message fields
    pub service_profile: ::protobuf::SingularPtrField<super::profiles::ServiceProfile>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceProfileResponse {
    fn default() -> &'a GetServiceProfileResponse {
        <GetServiceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceProfileResponse {
    pub fn new() -> GetServiceProfileResponse {
        ::std::default::Default::default()
    }

    // .ns.ServiceProfile service_profile = 1;


    pub fn get_service_profile(&self) -> &super::profiles::ServiceProfile {
        self.service_profile.as_ref().unwrap_or_else(|| super::profiles::ServiceProfile::default_instance())
    }
    pub fn clear_service_profile(&mut self) {
        self.service_profile.clear();
    }

    pub fn has_service_profile(&self) -> bool {
        self.service_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_profile(&mut self, v: super::profiles::ServiceProfile) {
        self.service_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile(&mut self) -> &mut super::profiles::ServiceProfile {
        if self.service_profile.is_none() {
            self.service_profile.set_default();
        }
        self.service_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_profile(&mut self) -> super::profiles::ServiceProfile {
        self.service_profile.take().unwrap_or_else(|| super::profiles::ServiceProfile::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetServiceProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.service_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceProfileResponse {
        GetServiceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::ServiceProfile>>(
                    "service_profile",
                    |m: &GetServiceProfileResponse| { &m.service_profile },
                    |m: &mut GetServiceProfileResponse| { &mut m.service_profile },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetServiceProfileResponse| { &m.created_at },
                    |m: &mut GetServiceProfileResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetServiceProfileResponse| { &m.updated_at },
                    |m: &mut GetServiceProfileResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetServiceProfileResponse>(
                    "GetServiceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetServiceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetServiceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetServiceProfileResponse,
        };
        unsafe {
            instance.get(GetServiceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetServiceProfileResponse {
    fn clear(&mut self) {
        self.service_profile.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateServiceProfileRequest {
    // message fields
    pub service_profile: ::protobuf::SingularPtrField<super::profiles::ServiceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateServiceProfileRequest {
    fn default() -> &'a UpdateServiceProfileRequest {
        <UpdateServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateServiceProfileRequest {
    pub fn new() -> UpdateServiceProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.ServiceProfile service_profile = 1;


    pub fn get_service_profile(&self) -> &super::profiles::ServiceProfile {
        self.service_profile.as_ref().unwrap_or_else(|| super::profiles::ServiceProfile::default_instance())
    }
    pub fn clear_service_profile(&mut self) {
        self.service_profile.clear();
    }

    pub fn has_service_profile(&self) -> bool {
        self.service_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_profile(&mut self, v: super::profiles::ServiceProfile) {
        self.service_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile(&mut self) -> &mut super::profiles::ServiceProfile {
        if self.service_profile.is_none() {
            self.service_profile.set_default();
        }
        self.service_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_profile(&mut self) -> super::profiles::ServiceProfile {
        self.service_profile.take().unwrap_or_else(|| super::profiles::ServiceProfile::new())
    }
}

impl ::protobuf::Message for UpdateServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateServiceProfileRequest {
        UpdateServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::ServiceProfile>>(
                    "service_profile",
                    |m: &UpdateServiceProfileRequest| { &m.service_profile },
                    |m: &mut UpdateServiceProfileRequest| { &mut m.service_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateServiceProfileRequest>(
                    "UpdateServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateServiceProfileRequest,
        };
        unsafe {
            instance.get(UpdateServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateServiceProfileRequest {
    fn clear(&mut self) {
        self.service_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteServiceProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteServiceProfileRequest {
    fn default() -> &'a DeleteServiceProfileRequest {
        <DeleteServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteServiceProfileRequest {
    pub fn new() -> DeleteServiceProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteServiceProfileRequest {
        DeleteServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &DeleteServiceProfileRequest| { &m.id },
                    |m: &mut DeleteServiceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteServiceProfileRequest>(
                    "DeleteServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteServiceProfileRequest,
        };
        unsafe {
            instance.get(DeleteServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteServiceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRoutingProfileRequest {
    // message fields
    pub routing_profile: ::protobuf::SingularPtrField<super::profiles::RoutingProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRoutingProfileRequest {
    fn default() -> &'a CreateRoutingProfileRequest {
        <CreateRoutingProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateRoutingProfileRequest {
    pub fn new() -> CreateRoutingProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.RoutingProfile routing_profile = 1;


    pub fn get_routing_profile(&self) -> &super::profiles::RoutingProfile {
        self.routing_profile.as_ref().unwrap_or_else(|| super::profiles::RoutingProfile::default_instance())
    }
    pub fn clear_routing_profile(&mut self) {
        self.routing_profile.clear();
    }

    pub fn has_routing_profile(&self) -> bool {
        self.routing_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_profile(&mut self, v: super::profiles::RoutingProfile) {
        self.routing_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routing_profile(&mut self) -> &mut super::profiles::RoutingProfile {
        if self.routing_profile.is_none() {
            self.routing_profile.set_default();
        }
        self.routing_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_routing_profile(&mut self) -> super::profiles::RoutingProfile {
        self.routing_profile.take().unwrap_or_else(|| super::profiles::RoutingProfile::new())
    }
}

impl ::protobuf::Message for CreateRoutingProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.routing_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.routing_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.routing_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.routing_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRoutingProfileRequest {
        CreateRoutingProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::RoutingProfile>>(
                    "routing_profile",
                    |m: &CreateRoutingProfileRequest| { &m.routing_profile },
                    |m: &mut CreateRoutingProfileRequest| { &mut m.routing_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateRoutingProfileRequest>(
                    "CreateRoutingProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRoutingProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateRoutingProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateRoutingProfileRequest,
        };
        unsafe {
            instance.get(CreateRoutingProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateRoutingProfileRequest {
    fn clear(&mut self) {
        self.routing_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRoutingProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRoutingProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRoutingProfileResponse {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRoutingProfileResponse {
    fn default() -> &'a CreateRoutingProfileResponse {
        <CreateRoutingProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateRoutingProfileResponse {
    pub fn new() -> CreateRoutingProfileResponse {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateRoutingProfileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRoutingProfileResponse {
        CreateRoutingProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &CreateRoutingProfileResponse| { &m.id },
                    |m: &mut CreateRoutingProfileResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateRoutingProfileResponse>(
                    "CreateRoutingProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRoutingProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateRoutingProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateRoutingProfileResponse,
        };
        unsafe {
            instance.get(CreateRoutingProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateRoutingProfileResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRoutingProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRoutingProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetRoutingProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetRoutingProfileRequest {
    fn default() -> &'a GetRoutingProfileRequest {
        <GetRoutingProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetRoutingProfileRequest {
    pub fn new() -> GetRoutingProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetRoutingProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetRoutingProfileRequest {
        GetRoutingProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &GetRoutingProfileRequest| { &m.id },
                    |m: &mut GetRoutingProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetRoutingProfileRequest>(
                    "GetRoutingProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetRoutingProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetRoutingProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetRoutingProfileRequest,
        };
        unsafe {
            instance.get(GetRoutingProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetRoutingProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetRoutingProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRoutingProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetRoutingProfileResponse {
    // message fields
    pub routing_profile: ::protobuf::SingularPtrField<super::profiles::RoutingProfile>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetRoutingProfileResponse {
    fn default() -> &'a GetRoutingProfileResponse {
        <GetRoutingProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetRoutingProfileResponse {
    pub fn new() -> GetRoutingProfileResponse {
        ::std::default::Default::default()
    }

    // .ns.RoutingProfile routing_profile = 1;


    pub fn get_routing_profile(&self) -> &super::profiles::RoutingProfile {
        self.routing_profile.as_ref().unwrap_or_else(|| super::profiles::RoutingProfile::default_instance())
    }
    pub fn clear_routing_profile(&mut self) {
        self.routing_profile.clear();
    }

    pub fn has_routing_profile(&self) -> bool {
        self.routing_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_profile(&mut self, v: super::profiles::RoutingProfile) {
        self.routing_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routing_profile(&mut self) -> &mut super::profiles::RoutingProfile {
        if self.routing_profile.is_none() {
            self.routing_profile.set_default();
        }
        self.routing_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_routing_profile(&mut self) -> super::profiles::RoutingProfile {
        self.routing_profile.take().unwrap_or_else(|| super::profiles::RoutingProfile::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetRoutingProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.routing_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.routing_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.routing_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.routing_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetRoutingProfileResponse {
        GetRoutingProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::RoutingProfile>>(
                    "routing_profile",
                    |m: &GetRoutingProfileResponse| { &m.routing_profile },
                    |m: &mut GetRoutingProfileResponse| { &mut m.routing_profile },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetRoutingProfileResponse| { &m.created_at },
                    |m: &mut GetRoutingProfileResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetRoutingProfileResponse| { &m.updated_at },
                    |m: &mut GetRoutingProfileResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetRoutingProfileResponse>(
                    "GetRoutingProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetRoutingProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetRoutingProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetRoutingProfileResponse,
        };
        unsafe {
            instance.get(GetRoutingProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetRoutingProfileResponse {
    fn clear(&mut self) {
        self.routing_profile.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetRoutingProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRoutingProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateRoutingProfileRequest {
    // message fields
    pub routing_profile: ::protobuf::SingularPtrField<super::profiles::RoutingProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateRoutingProfileRequest {
    fn default() -> &'a UpdateRoutingProfileRequest {
        <UpdateRoutingProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateRoutingProfileRequest {
    pub fn new() -> UpdateRoutingProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.RoutingProfile routing_profile = 1;


    pub fn get_routing_profile(&self) -> &super::profiles::RoutingProfile {
        self.routing_profile.as_ref().unwrap_or_else(|| super::profiles::RoutingProfile::default_instance())
    }
    pub fn clear_routing_profile(&mut self) {
        self.routing_profile.clear();
    }

    pub fn has_routing_profile(&self) -> bool {
        self.routing_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_profile(&mut self, v: super::profiles::RoutingProfile) {
        self.routing_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routing_profile(&mut self) -> &mut super::profiles::RoutingProfile {
        if self.routing_profile.is_none() {
            self.routing_profile.set_default();
        }
        self.routing_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_routing_profile(&mut self) -> super::profiles::RoutingProfile {
        self.routing_profile.take().unwrap_or_else(|| super::profiles::RoutingProfile::new())
    }
}

impl ::protobuf::Message for UpdateRoutingProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.routing_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.routing_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.routing_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.routing_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateRoutingProfileRequest {
        UpdateRoutingProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::RoutingProfile>>(
                    "routing_profile",
                    |m: &UpdateRoutingProfileRequest| { &m.routing_profile },
                    |m: &mut UpdateRoutingProfileRequest| { &mut m.routing_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateRoutingProfileRequest>(
                    "UpdateRoutingProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateRoutingProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateRoutingProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateRoutingProfileRequest,
        };
        unsafe {
            instance.get(UpdateRoutingProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateRoutingProfileRequest {
    fn clear(&mut self) {
        self.routing_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateRoutingProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateRoutingProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteRoutingProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteRoutingProfileRequest {
    fn default() -> &'a DeleteRoutingProfileRequest {
        <DeleteRoutingProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRoutingProfileRequest {
    pub fn new() -> DeleteRoutingProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteRoutingProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteRoutingProfileRequest {
        DeleteRoutingProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &DeleteRoutingProfileRequest| { &m.id },
                    |m: &mut DeleteRoutingProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteRoutingProfileRequest>(
                    "DeleteRoutingProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteRoutingProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteRoutingProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteRoutingProfileRequest,
        };
        unsafe {
            instance.get(DeleteRoutingProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteRoutingProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteRoutingProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRoutingProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDeviceProfileRequest {
    // message fields
    pub device_profile: ::protobuf::SingularPtrField<super::profiles::DeviceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDeviceProfileRequest {
    fn default() -> &'a CreateDeviceProfileRequest {
        <CreateDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceProfileRequest {
    pub fn new() -> CreateDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.DeviceProfile device_profile = 1;


    pub fn get_device_profile(&self) -> &super::profiles::DeviceProfile {
        self.device_profile.as_ref().unwrap_or_else(|| super::profiles::DeviceProfile::default_instance())
    }
    pub fn clear_device_profile(&mut self) {
        self.device_profile.clear();
    }

    pub fn has_device_profile(&self) -> bool {
        self.device_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_profile(&mut self, v: super::profiles::DeviceProfile) {
        self.device_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_profile(&mut self) -> &mut super::profiles::DeviceProfile {
        if self.device_profile.is_none() {
            self.device_profile.set_default();
        }
        self.device_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_profile(&mut self) -> super::profiles::DeviceProfile {
        self.device_profile.take().unwrap_or_else(|| super::profiles::DeviceProfile::new())
    }
}

impl ::protobuf::Message for CreateDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDeviceProfileRequest {
        CreateDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::DeviceProfile>>(
                    "device_profile",
                    |m: &CreateDeviceProfileRequest| { &m.device_profile },
                    |m: &mut CreateDeviceProfileRequest| { &mut m.device_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateDeviceProfileRequest>(
                    "CreateDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateDeviceProfileRequest,
        };
        unsafe {
            instance.get(CreateDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateDeviceProfileRequest {
    fn clear(&mut self) {
        self.device_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDeviceProfileResponse {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDeviceProfileResponse {
    fn default() -> &'a CreateDeviceProfileResponse {
        <CreateDeviceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceProfileResponse {
    pub fn new() -> CreateDeviceProfileResponse {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateDeviceProfileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDeviceProfileResponse {
        CreateDeviceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &CreateDeviceProfileResponse| { &m.id },
                    |m: &mut CreateDeviceProfileResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateDeviceProfileResponse>(
                    "CreateDeviceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateDeviceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateDeviceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateDeviceProfileResponse,
        };
        unsafe {
            instance.get(CreateDeviceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateDeviceProfileResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDeviceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceProfileRequest {
    fn default() -> &'a GetDeviceProfileRequest {
        <GetDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceProfileRequest {
    pub fn new() -> GetDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceProfileRequest {
        GetDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &GetDeviceProfileRequest| { &m.id },
                    |m: &mut GetDeviceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceProfileRequest>(
                    "GetDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceProfileRequest,
        };
        unsafe {
            instance.get(GetDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceProfileResponse {
    // message fields
    pub device_profile: ::protobuf::SingularPtrField<super::profiles::DeviceProfile>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceProfileResponse {
    fn default() -> &'a GetDeviceProfileResponse {
        <GetDeviceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceProfileResponse {
    pub fn new() -> GetDeviceProfileResponse {
        ::std::default::Default::default()
    }

    // .ns.DeviceProfile device_profile = 1;


    pub fn get_device_profile(&self) -> &super::profiles::DeviceProfile {
        self.device_profile.as_ref().unwrap_or_else(|| super::profiles::DeviceProfile::default_instance())
    }
    pub fn clear_device_profile(&mut self) {
        self.device_profile.clear();
    }

    pub fn has_device_profile(&self) -> bool {
        self.device_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_profile(&mut self, v: super::profiles::DeviceProfile) {
        self.device_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_profile(&mut self) -> &mut super::profiles::DeviceProfile {
        if self.device_profile.is_none() {
            self.device_profile.set_default();
        }
        self.device_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_profile(&mut self) -> super::profiles::DeviceProfile {
        self.device_profile.take().unwrap_or_else(|| super::profiles::DeviceProfile::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetDeviceProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.device_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceProfileResponse {
        GetDeviceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::DeviceProfile>>(
                    "device_profile",
                    |m: &GetDeviceProfileResponse| { &m.device_profile },
                    |m: &mut GetDeviceProfileResponse| { &mut m.device_profile },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetDeviceProfileResponse| { &m.created_at },
                    |m: &mut GetDeviceProfileResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetDeviceProfileResponse| { &m.updated_at },
                    |m: &mut GetDeviceProfileResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceProfileResponse>(
                    "GetDeviceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceProfileResponse,
        };
        unsafe {
            instance.get(GetDeviceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceProfileResponse {
    fn clear(&mut self) {
        self.device_profile.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateDeviceProfileRequest {
    // message fields
    pub device_profile: ::protobuf::SingularPtrField<super::profiles::DeviceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateDeviceProfileRequest {
    fn default() -> &'a UpdateDeviceProfileRequest {
        <UpdateDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateDeviceProfileRequest {
    pub fn new() -> UpdateDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.DeviceProfile device_profile = 1;


    pub fn get_device_profile(&self) -> &super::profiles::DeviceProfile {
        self.device_profile.as_ref().unwrap_or_else(|| super::profiles::DeviceProfile::default_instance())
    }
    pub fn clear_device_profile(&mut self) {
        self.device_profile.clear();
    }

    pub fn has_device_profile(&self) -> bool {
        self.device_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_profile(&mut self, v: super::profiles::DeviceProfile) {
        self.device_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_profile(&mut self) -> &mut super::profiles::DeviceProfile {
        if self.device_profile.is_none() {
            self.device_profile.set_default();
        }
        self.device_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_profile(&mut self) -> super::profiles::DeviceProfile {
        self.device_profile.take().unwrap_or_else(|| super::profiles::DeviceProfile::new())
    }
}

impl ::protobuf::Message for UpdateDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateDeviceProfileRequest {
        UpdateDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::DeviceProfile>>(
                    "device_profile",
                    |m: &UpdateDeviceProfileRequest| { &m.device_profile },
                    |m: &mut UpdateDeviceProfileRequest| { &mut m.device_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateDeviceProfileRequest>(
                    "UpdateDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateDeviceProfileRequest,
        };
        unsafe {
            instance.get(UpdateDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateDeviceProfileRequest {
    fn clear(&mut self) {
        self.device_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteDeviceProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteDeviceProfileRequest {
    fn default() -> &'a DeleteDeviceProfileRequest {
        <DeleteDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteDeviceProfileRequest {
    pub fn new() -> DeleteDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteDeviceProfileRequest {
        DeleteDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &DeleteDeviceProfileRequest| { &m.id },
                    |m: &mut DeleteDeviceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteDeviceProfileRequest>(
                    "DeleteDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteDeviceProfileRequest,
        };
        unsafe {
            instance.get(DeleteDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteDeviceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Device {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub device_profile_id: ::std::vec::Vec<u8>,
    pub service_profile_id: ::std::vec::Vec<u8>,
    pub routing_profile_id: ::std::vec::Vec<u8>,
    pub skip_f_cnt_check: bool,
    pub reference_altitude: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Device {
    fn default() -> &'a Device {
        <Device as ::protobuf::Message>::default_instance()
    }
}

impl Device {
    pub fn new() -> Device {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes device_profile_id = 2;


    pub fn get_device_profile_id(&self) -> &[u8] {
        &self.device_profile_id
    }
    pub fn clear_device_profile_id(&mut self) {
        self.device_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_profile_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.device_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_profile_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.device_profile_id
    }

    // Take field
    pub fn take_device_profile_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.device_profile_id, ::std::vec::Vec::new())
    }

    // bytes service_profile_id = 3;


    pub fn get_service_profile_id(&self) -> &[u8] {
        &self.service_profile_id
    }
    pub fn clear_service_profile_id(&mut self) {
        self.service_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_profile_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.service_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.service_profile_id
    }

    // Take field
    pub fn take_service_profile_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.service_profile_id, ::std::vec::Vec::new())
    }

    // bytes routing_profile_id = 4;


    pub fn get_routing_profile_id(&self) -> &[u8] {
        &self.routing_profile_id
    }
    pub fn clear_routing_profile_id(&mut self) {
        self.routing_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_routing_profile_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.routing_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routing_profile_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.routing_profile_id
    }

    // Take field
    pub fn take_routing_profile_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.routing_profile_id, ::std::vec::Vec::new())
    }

    // bool skip_f_cnt_check = 5;


    pub fn get_skip_f_cnt_check(&self) -> bool {
        self.skip_f_cnt_check
    }
    pub fn clear_skip_f_cnt_check(&mut self) {
        self.skip_f_cnt_check = false;
    }

    // Param is passed by value, moved
    pub fn set_skip_f_cnt_check(&mut self, v: bool) {
        self.skip_f_cnt_check = v;
    }

    // double reference_altitude = 6;


    pub fn get_reference_altitude(&self) -> f64 {
        self.reference_altitude
    }
    pub fn clear_reference_altitude(&mut self) {
        self.reference_altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_reference_altitude(&mut self, v: f64) {
        self.reference_altitude = v;
    }
}

impl ::protobuf::Message for Device {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.device_profile_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.service_profile_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.routing_profile_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.skip_f_cnt_check = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.reference_altitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if !self.device_profile_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.device_profile_id);
        }
        if !self.service_profile_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.service_profile_id);
        }
        if !self.routing_profile_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.routing_profile_id);
        }
        if self.skip_f_cnt_check != false {
            my_size += 2;
        }
        if self.reference_altitude != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if !self.device_profile_id.is_empty() {
            os.write_bytes(2, &self.device_profile_id)?;
        }
        if !self.service_profile_id.is_empty() {
            os.write_bytes(3, &self.service_profile_id)?;
        }
        if !self.routing_profile_id.is_empty() {
            os.write_bytes(4, &self.routing_profile_id)?;
        }
        if self.skip_f_cnt_check != false {
            os.write_bool(5, self.skip_f_cnt_check)?;
        }
        if self.reference_altitude != 0. {
            os.write_double(6, self.reference_altitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Device {
        Device::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &Device| { &m.dev_eui },
                    |m: &mut Device| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "device_profile_id",
                    |m: &Device| { &m.device_profile_id },
                    |m: &mut Device| { &mut m.device_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "service_profile_id",
                    |m: &Device| { &m.service_profile_id },
                    |m: &mut Device| { &mut m.service_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "routing_profile_id",
                    |m: &Device| { &m.routing_profile_id },
                    |m: &mut Device| { &mut m.routing_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "skip_f_cnt_check",
                    |m: &Device| { &m.skip_f_cnt_check },
                    |m: &mut Device| { &mut m.skip_f_cnt_check },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "reference_altitude",
                    |m: &Device| { &m.reference_altitude },
                    |m: &mut Device| { &mut m.reference_altitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Device>(
                    "Device",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Device {
        static mut instance: ::protobuf::lazy::Lazy<Device> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Device,
        };
        unsafe {
            instance.get(Device::new)
        }
    }
}

impl ::protobuf::Clear for Device {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.device_profile_id.clear();
        self.service_profile_id.clear();
        self.routing_profile_id.clear();
        self.skip_f_cnt_check = false;
        self.reference_altitude = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Device {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Device {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDeviceRequest {
    // message fields
    pub device: ::protobuf::SingularPtrField<Device>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDeviceRequest {
    fn default() -> &'a CreateDeviceRequest {
        <CreateDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceRequest {
    pub fn new() -> CreateDeviceRequest {
        ::std::default::Default::default()
    }

    // .ns.Device device = 1;


    pub fn get_device(&self) -> &Device {
        self.device.as_ref().unwrap_or_else(|| Device::default_instance())
    }
    pub fn clear_device(&mut self) {
        self.device.clear();
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: Device) {
        self.device = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device(&mut self) -> &mut Device {
        if self.device.is_none() {
            self.device.set_default();
        }
        self.device.as_mut().unwrap()
    }

    // Take field
    pub fn take_device(&mut self) -> Device {
        self.device.take().unwrap_or_else(|| Device::new())
    }
}

impl ::protobuf::Message for CreateDeviceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDeviceRequest {
        CreateDeviceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Device>>(
                    "device",
                    |m: &CreateDeviceRequest| { &m.device },
                    |m: &mut CreateDeviceRequest| { &mut m.device },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateDeviceRequest>(
                    "CreateDeviceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateDeviceRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateDeviceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateDeviceRequest,
        };
        unsafe {
            instance.get(CreateDeviceRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateDeviceRequest {
    fn clear(&mut self) {
        self.device.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceRequest {
    fn default() -> &'a GetDeviceRequest {
        <GetDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceRequest {
    pub fn new() -> GetDeviceRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetDeviceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceRequest {
        GetDeviceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &GetDeviceRequest| { &m.dev_eui },
                    |m: &mut GetDeviceRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceRequest>(
                    "GetDeviceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceRequest,
        };
        unsafe {
            instance.get(GetDeviceRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceResponse {
    // message fields
    pub device: ::protobuf::SingularPtrField<Device>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceResponse {
    fn default() -> &'a GetDeviceResponse {
        <GetDeviceResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceResponse {
    pub fn new() -> GetDeviceResponse {
        ::std::default::Default::default()
    }

    // .ns.Device device = 1;


    pub fn get_device(&self) -> &Device {
        self.device.as_ref().unwrap_or_else(|| Device::default_instance())
    }
    pub fn clear_device(&mut self) {
        self.device.clear();
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: Device) {
        self.device = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device(&mut self) -> &mut Device {
        if self.device.is_none() {
            self.device.set_default();
        }
        self.device.as_mut().unwrap()
    }

    // Take field
    pub fn take_device(&mut self) -> Device {
        self.device.take().unwrap_or_else(|| Device::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetDeviceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.device {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceResponse {
        GetDeviceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Device>>(
                    "device",
                    |m: &GetDeviceResponse| { &m.device },
                    |m: &mut GetDeviceResponse| { &mut m.device },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetDeviceResponse| { &m.created_at },
                    |m: &mut GetDeviceResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetDeviceResponse| { &m.updated_at },
                    |m: &mut GetDeviceResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceResponse>(
                    "GetDeviceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceResponse,
        };
        unsafe {
            instance.get(GetDeviceResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceResponse {
    fn clear(&mut self) {
        self.device.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateDeviceRequest {
    // message fields
    pub device: ::protobuf::SingularPtrField<Device>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateDeviceRequest {
    fn default() -> &'a UpdateDeviceRequest {
        <UpdateDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateDeviceRequest {
    pub fn new() -> UpdateDeviceRequest {
        ::std::default::Default::default()
    }

    // .ns.Device device = 1;


    pub fn get_device(&self) -> &Device {
        self.device.as_ref().unwrap_or_else(|| Device::default_instance())
    }
    pub fn clear_device(&mut self) {
        self.device.clear();
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: Device) {
        self.device = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device(&mut self) -> &mut Device {
        if self.device.is_none() {
            self.device.set_default();
        }
        self.device.as_mut().unwrap()
    }

    // Take field
    pub fn take_device(&mut self) -> Device {
        self.device.take().unwrap_or_else(|| Device::new())
    }
}

impl ::protobuf::Message for UpdateDeviceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateDeviceRequest {
        UpdateDeviceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Device>>(
                    "device",
                    |m: &UpdateDeviceRequest| { &m.device },
                    |m: &mut UpdateDeviceRequest| { &mut m.device },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateDeviceRequest>(
                    "UpdateDeviceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateDeviceRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateDeviceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateDeviceRequest,
        };
        unsafe {
            instance.get(UpdateDeviceRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateDeviceRequest {
    fn clear(&mut self) {
        self.device.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateDeviceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteDeviceRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteDeviceRequest {
    fn default() -> &'a DeleteDeviceRequest {
        <DeleteDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteDeviceRequest {
    pub fn new() -> DeleteDeviceRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteDeviceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteDeviceRequest {
        DeleteDeviceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &DeleteDeviceRequest| { &m.dev_eui },
                    |m: &mut DeleteDeviceRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteDeviceRequest>(
                    "DeleteDeviceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteDeviceRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteDeviceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteDeviceRequest,
        };
        unsafe {
            instance.get(DeleteDeviceRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteDeviceRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteDeviceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceActivation {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub dev_addr: ::std::vec::Vec<u8>,
    pub s_nwk_s_int_key: ::std::vec::Vec<u8>,
    pub f_nwk_s_int_key: ::std::vec::Vec<u8>,
    pub nwk_s_enc_key: ::std::vec::Vec<u8>,
    pub f_cnt_up: u32,
    pub n_f_cnt_down: u32,
    pub a_f_cnt_down: u32,
    pub skip_f_cnt_check: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceActivation {
    fn default() -> &'a DeviceActivation {
        <DeviceActivation as ::protobuf::Message>::default_instance()
    }
}

impl DeviceActivation {
    pub fn new() -> DeviceActivation {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes dev_addr = 2;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }

    // bytes s_nwk_s_int_key = 3;


    pub fn get_s_nwk_s_int_key(&self) -> &[u8] {
        &self.s_nwk_s_int_key
    }
    pub fn clear_s_nwk_s_int_key(&mut self) {
        self.s_nwk_s_int_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_s_nwk_s_int_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.s_nwk_s_int_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_s_nwk_s_int_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.s_nwk_s_int_key
    }

    // Take field
    pub fn take_s_nwk_s_int_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.s_nwk_s_int_key, ::std::vec::Vec::new())
    }

    // bytes f_nwk_s_int_key = 4;


    pub fn get_f_nwk_s_int_key(&self) -> &[u8] {
        &self.f_nwk_s_int_key
    }
    pub fn clear_f_nwk_s_int_key(&mut self) {
        self.f_nwk_s_int_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_f_nwk_s_int_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.f_nwk_s_int_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_f_nwk_s_int_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.f_nwk_s_int_key
    }

    // Take field
    pub fn take_f_nwk_s_int_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.f_nwk_s_int_key, ::std::vec::Vec::new())
    }

    // bytes nwk_s_enc_key = 5;


    pub fn get_nwk_s_enc_key(&self) -> &[u8] {
        &self.nwk_s_enc_key
    }
    pub fn clear_nwk_s_enc_key(&mut self) {
        self.nwk_s_enc_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_nwk_s_enc_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.nwk_s_enc_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nwk_s_enc_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.nwk_s_enc_key
    }

    // Take field
    pub fn take_nwk_s_enc_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.nwk_s_enc_key, ::std::vec::Vec::new())
    }

    // uint32 f_cnt_up = 6;


    pub fn get_f_cnt_up(&self) -> u32 {
        self.f_cnt_up
    }
    pub fn clear_f_cnt_up(&mut self) {
        self.f_cnt_up = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt_up(&mut self, v: u32) {
        self.f_cnt_up = v;
    }

    // uint32 n_f_cnt_down = 7;


    pub fn get_n_f_cnt_down(&self) -> u32 {
        self.n_f_cnt_down
    }
    pub fn clear_n_f_cnt_down(&mut self) {
        self.n_f_cnt_down = 0;
    }

    // Param is passed by value, moved
    pub fn set_n_f_cnt_down(&mut self, v: u32) {
        self.n_f_cnt_down = v;
    }

    // uint32 a_f_cnt_down = 8;


    pub fn get_a_f_cnt_down(&self) -> u32 {
        self.a_f_cnt_down
    }
    pub fn clear_a_f_cnt_down(&mut self) {
        self.a_f_cnt_down = 0;
    }

    // Param is passed by value, moved
    pub fn set_a_f_cnt_down(&mut self, v: u32) {
        self.a_f_cnt_down = v;
    }

    // bool skip_f_cnt_check = 9;


    pub fn get_skip_f_cnt_check(&self) -> bool {
        self.skip_f_cnt_check
    }
    pub fn clear_skip_f_cnt_check(&mut self) {
        self.skip_f_cnt_check = false;
    }

    // Param is passed by value, moved
    pub fn set_skip_f_cnt_check(&mut self, v: bool) {
        self.skip_f_cnt_check = v;
    }
}

impl ::protobuf::Message for DeviceActivation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.s_nwk_s_int_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.f_nwk_s_int_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.nwk_s_enc_key)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt_up = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.n_f_cnt_down = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.a_f_cnt_down = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.skip_f_cnt_check = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.dev_addr);
        }
        if !self.s_nwk_s_int_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.s_nwk_s_int_key);
        }
        if !self.f_nwk_s_int_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.f_nwk_s_int_key);
        }
        if !self.nwk_s_enc_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.nwk_s_enc_key);
        }
        if self.f_cnt_up != 0 {
            my_size += ::protobuf::rt::value_size(6, self.f_cnt_up, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.n_f_cnt_down != 0 {
            my_size += ::protobuf::rt::value_size(7, self.n_f_cnt_down, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.a_f_cnt_down != 0 {
            my_size += ::protobuf::rt::value_size(8, self.a_f_cnt_down, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.skip_f_cnt_check != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if !self.dev_addr.is_empty() {
            os.write_bytes(2, &self.dev_addr)?;
        }
        if !self.s_nwk_s_int_key.is_empty() {
            os.write_bytes(3, &self.s_nwk_s_int_key)?;
        }
        if !self.f_nwk_s_int_key.is_empty() {
            os.write_bytes(4, &self.f_nwk_s_int_key)?;
        }
        if !self.nwk_s_enc_key.is_empty() {
            os.write_bytes(5, &self.nwk_s_enc_key)?;
        }
        if self.f_cnt_up != 0 {
            os.write_uint32(6, self.f_cnt_up)?;
        }
        if self.n_f_cnt_down != 0 {
            os.write_uint32(7, self.n_f_cnt_down)?;
        }
        if self.a_f_cnt_down != 0 {
            os.write_uint32(8, self.a_f_cnt_down)?;
        }
        if self.skip_f_cnt_check != false {
            os.write_bool(9, self.skip_f_cnt_check)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceActivation {
        DeviceActivation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &DeviceActivation| { &m.dev_eui },
                    |m: &mut DeviceActivation| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &DeviceActivation| { &m.dev_addr },
                    |m: &mut DeviceActivation| { &mut m.dev_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "s_nwk_s_int_key",
                    |m: &DeviceActivation| { &m.s_nwk_s_int_key },
                    |m: &mut DeviceActivation| { &mut m.s_nwk_s_int_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "f_nwk_s_int_key",
                    |m: &DeviceActivation| { &m.f_nwk_s_int_key },
                    |m: &mut DeviceActivation| { &mut m.f_nwk_s_int_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "nwk_s_enc_key",
                    |m: &DeviceActivation| { &m.nwk_s_enc_key },
                    |m: &mut DeviceActivation| { &mut m.nwk_s_enc_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt_up",
                    |m: &DeviceActivation| { &m.f_cnt_up },
                    |m: &mut DeviceActivation| { &mut m.f_cnt_up },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "n_f_cnt_down",
                    |m: &DeviceActivation| { &m.n_f_cnt_down },
                    |m: &mut DeviceActivation| { &mut m.n_f_cnt_down },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "a_f_cnt_down",
                    |m: &DeviceActivation| { &m.a_f_cnt_down },
                    |m: &mut DeviceActivation| { &mut m.a_f_cnt_down },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "skip_f_cnt_check",
                    |m: &DeviceActivation| { &m.skip_f_cnt_check },
                    |m: &mut DeviceActivation| { &mut m.skip_f_cnt_check },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceActivation>(
                    "DeviceActivation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeviceActivation {
        static mut instance: ::protobuf::lazy::Lazy<DeviceActivation> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeviceActivation,
        };
        unsafe {
            instance.get(DeviceActivation::new)
        }
    }
}

impl ::protobuf::Clear for DeviceActivation {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.dev_addr.clear();
        self.s_nwk_s_int_key.clear();
        self.f_nwk_s_int_key.clear();
        self.nwk_s_enc_key.clear();
        self.f_cnt_up = 0;
        self.n_f_cnt_down = 0;
        self.a_f_cnt_down = 0;
        self.skip_f_cnt_check = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceActivation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceActivation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActivateDeviceRequest {
    // message fields
    pub device_activation: ::protobuf::SingularPtrField<DeviceActivation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActivateDeviceRequest {
    fn default() -> &'a ActivateDeviceRequest {
        <ActivateDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl ActivateDeviceRequest {
    pub fn new() -> ActivateDeviceRequest {
        ::std::default::Default::default()
    }

    // .ns.DeviceActivation device_activation = 1;


    pub fn get_device_activation(&self) -> &DeviceActivation {
        self.device_activation.as_ref().unwrap_or_else(|| DeviceActivation::default_instance())
    }
    pub fn clear_device_activation(&mut self) {
        self.device_activation.clear();
    }

    pub fn has_device_activation(&self) -> bool {
        self.device_activation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_activation(&mut self, v: DeviceActivation) {
        self.device_activation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_activation(&mut self) -> &mut DeviceActivation {
        if self.device_activation.is_none() {
            self.device_activation.set_default();
        }
        self.device_activation.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_activation(&mut self) -> DeviceActivation {
        self.device_activation.take().unwrap_or_else(|| DeviceActivation::new())
    }
}

impl ::protobuf::Message for ActivateDeviceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device_activation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_activation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_activation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_activation.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActivateDeviceRequest {
        ActivateDeviceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceActivation>>(
                    "device_activation",
                    |m: &ActivateDeviceRequest| { &m.device_activation },
                    |m: &mut ActivateDeviceRequest| { &mut m.device_activation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActivateDeviceRequest>(
                    "ActivateDeviceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActivateDeviceRequest {
        static mut instance: ::protobuf::lazy::Lazy<ActivateDeviceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActivateDeviceRequest,
        };
        unsafe {
            instance.get(ActivateDeviceRequest::new)
        }
    }
}

impl ::protobuf::Clear for ActivateDeviceRequest {
    fn clear(&mut self) {
        self.device_activation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActivateDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivateDeviceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeactivateDeviceRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeactivateDeviceRequest {
    fn default() -> &'a DeactivateDeviceRequest {
        <DeactivateDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeactivateDeviceRequest {
    pub fn new() -> DeactivateDeviceRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeactivateDeviceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeactivateDeviceRequest {
        DeactivateDeviceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &DeactivateDeviceRequest| { &m.dev_eui },
                    |m: &mut DeactivateDeviceRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeactivateDeviceRequest>(
                    "DeactivateDeviceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeactivateDeviceRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeactivateDeviceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeactivateDeviceRequest,
        };
        unsafe {
            instance.get(DeactivateDeviceRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeactivateDeviceRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeactivateDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeactivateDeviceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceActivationRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceActivationRequest {
    fn default() -> &'a GetDeviceActivationRequest {
        <GetDeviceActivationRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceActivationRequest {
    pub fn new() -> GetDeviceActivationRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetDeviceActivationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceActivationRequest {
        GetDeviceActivationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &GetDeviceActivationRequest| { &m.dev_eui },
                    |m: &mut GetDeviceActivationRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceActivationRequest>(
                    "GetDeviceActivationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceActivationRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceActivationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceActivationRequest,
        };
        unsafe {
            instance.get(GetDeviceActivationRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceActivationRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceActivationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceActivationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceActivationResponse {
    // message fields
    pub device_activation: ::protobuf::SingularPtrField<DeviceActivation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceActivationResponse {
    fn default() -> &'a GetDeviceActivationResponse {
        <GetDeviceActivationResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceActivationResponse {
    pub fn new() -> GetDeviceActivationResponse {
        ::std::default::Default::default()
    }

    // .ns.DeviceActivation device_activation = 1;


    pub fn get_device_activation(&self) -> &DeviceActivation {
        self.device_activation.as_ref().unwrap_or_else(|| DeviceActivation::default_instance())
    }
    pub fn clear_device_activation(&mut self) {
        self.device_activation.clear();
    }

    pub fn has_device_activation(&self) -> bool {
        self.device_activation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_activation(&mut self, v: DeviceActivation) {
        self.device_activation = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_activation(&mut self) -> &mut DeviceActivation {
        if self.device_activation.is_none() {
            self.device_activation.set_default();
        }
        self.device_activation.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_activation(&mut self) -> DeviceActivation {
        self.device_activation.take().unwrap_or_else(|| DeviceActivation::new())
    }
}

impl ::protobuf::Message for GetDeviceActivationResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.device_activation {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_activation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_activation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_activation.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceActivationResponse {
        GetDeviceActivationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceActivation>>(
                    "device_activation",
                    |m: &GetDeviceActivationResponse| { &m.device_activation },
                    |m: &mut GetDeviceActivationResponse| { &mut m.device_activation },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceActivationResponse>(
                    "GetDeviceActivationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceActivationResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceActivationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceActivationResponse,
        };
        unsafe {
            instance.get(GetDeviceActivationResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceActivationResponse {
    fn clear(&mut self) {
        self.device_activation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceActivationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceActivationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetRandomDevAddrResponse {
    // message fields
    pub dev_addr: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetRandomDevAddrResponse {
    fn default() -> &'a GetRandomDevAddrResponse {
        <GetRandomDevAddrResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetRandomDevAddrResponse {
    pub fn new() -> GetRandomDevAddrResponse {
        ::std::default::Default::default()
    }

    // bytes dev_addr = 1;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetRandomDevAddrResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_addr.is_empty() {
            os.write_bytes(1, &self.dev_addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetRandomDevAddrResponse {
        GetRandomDevAddrResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &GetRandomDevAddrResponse| { &m.dev_addr },
                    |m: &mut GetRandomDevAddrResponse| { &mut m.dev_addr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetRandomDevAddrResponse>(
                    "GetRandomDevAddrResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetRandomDevAddrResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetRandomDevAddrResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetRandomDevAddrResponse,
        };
        unsafe {
            instance.get(GetRandomDevAddrResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetRandomDevAddrResponse {
    fn clear(&mut self) {
        self.dev_addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetRandomDevAddrResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRandomDevAddrResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateMACCommandQueueItemRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub cid: u32,
    pub commands: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateMACCommandQueueItemRequest {
    fn default() -> &'a CreateMACCommandQueueItemRequest {
        <CreateMACCommandQueueItemRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateMACCommandQueueItemRequest {
    pub fn new() -> CreateMACCommandQueueItemRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // uint32 cid = 4;


    pub fn get_cid(&self) -> u32 {
        self.cid
    }
    pub fn clear_cid(&mut self) {
        self.cid = 0;
    }

    // Param is passed by value, moved
    pub fn set_cid(&mut self, v: u32) {
        self.cid = v;
    }

    // repeated bytes commands = 5;


    pub fn get_commands(&self) -> &[::std::vec::Vec<u8>] {
        &self.commands
    }
    pub fn clear_commands(&mut self) {
        self.commands.clear();
    }

    // Param is passed by value, moved
    pub fn set_commands(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.commands = v;
    }

    // Mutable pointer to the field.
    pub fn mut_commands(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.commands
    }

    // Take field
    pub fn take_commands(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.commands, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateMACCommandQueueItemRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cid = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.commands)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if self.cid != 0 {
            my_size += ::protobuf::rt::value_size(4, self.cid, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.commands {
            my_size += ::protobuf::rt::bytes_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if self.cid != 0 {
            os.write_uint32(4, self.cid)?;
        }
        for v in &self.commands {
            os.write_bytes(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateMACCommandQueueItemRequest {
        CreateMACCommandQueueItemRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &CreateMACCommandQueueItemRequest| { &m.dev_eui },
                    |m: &mut CreateMACCommandQueueItemRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cid",
                    |m: &CreateMACCommandQueueItemRequest| { &m.cid },
                    |m: &mut CreateMACCommandQueueItemRequest| { &mut m.cid },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "commands",
                    |m: &CreateMACCommandQueueItemRequest| { &m.commands },
                    |m: &mut CreateMACCommandQueueItemRequest| { &mut m.commands },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateMACCommandQueueItemRequest>(
                    "CreateMACCommandQueueItemRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateMACCommandQueueItemRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateMACCommandQueueItemRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateMACCommandQueueItemRequest,
        };
        unsafe {
            instance.get(CreateMACCommandQueueItemRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateMACCommandQueueItemRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.cid = 0;
        self.commands.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateMACCommandQueueItemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateMACCommandQueueItemRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendProprietaryPayloadRequest {
    // message fields
    pub mac_payload: ::std::vec::Vec<u8>,
    pub mic: ::std::vec::Vec<u8>,
    pub gateway_macs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub polarization_inversion: bool,
    pub frequency: u32,
    pub dr: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendProprietaryPayloadRequest {
    fn default() -> &'a SendProprietaryPayloadRequest {
        <SendProprietaryPayloadRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendProprietaryPayloadRequest {
    pub fn new() -> SendProprietaryPayloadRequest {
        ::std::default::Default::default()
    }

    // bytes mac_payload = 1;


    pub fn get_mac_payload(&self) -> &[u8] {
        &self.mac_payload
    }
    pub fn clear_mac_payload(&mut self) {
        self.mac_payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_mac_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.mac_payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mac_payload
    }

    // Take field
    pub fn take_mac_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mac_payload, ::std::vec::Vec::new())
    }

    // bytes mic = 2;


    pub fn get_mic(&self) -> &[u8] {
        &self.mic
    }
    pub fn clear_mic(&mut self) {
        self.mic.clear();
    }

    // Param is passed by value, moved
    pub fn set_mic(&mut self, v: ::std::vec::Vec<u8>) {
        self.mic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mic(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mic
    }

    // Take field
    pub fn take_mic(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mic, ::std::vec::Vec::new())
    }

    // repeated bytes gateway_macs = 3;


    pub fn get_gateway_macs(&self) -> &[::std::vec::Vec<u8>] {
        &self.gateway_macs
    }
    pub fn clear_gateway_macs(&mut self) {
        self.gateway_macs.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_macs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.gateway_macs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_gateway_macs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.gateway_macs
    }

    // Take field
    pub fn take_gateway_macs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.gateway_macs, ::protobuf::RepeatedField::new())
    }

    // bool polarization_inversion = 4;


    pub fn get_polarization_inversion(&self) -> bool {
        self.polarization_inversion
    }
    pub fn clear_polarization_inversion(&mut self) {
        self.polarization_inversion = false;
    }

    // Param is passed by value, moved
    pub fn set_polarization_inversion(&mut self, v: bool) {
        self.polarization_inversion = v;
    }

    // uint32 frequency = 5;


    pub fn get_frequency(&self) -> u32 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: u32) {
        self.frequency = v;
    }

    // uint32 dr = 6;


    pub fn get_dr(&self) -> u32 {
        self.dr
    }
    pub fn clear_dr(&mut self) {
        self.dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr(&mut self, v: u32) {
        self.dr = v;
    }
}

impl ::protobuf::Message for SendProprietaryPayloadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mac_payload)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mic)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.gateway_macs)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.polarization_inversion = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frequency = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dr = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.mac_payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.mac_payload);
        }
        if !self.mic.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.mic);
        }
        for value in &self.gateway_macs {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if self.polarization_inversion != false {
            my_size += 2;
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(5, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dr != 0 {
            my_size += ::protobuf::rt::value_size(6, self.dr, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.mac_payload.is_empty() {
            os.write_bytes(1, &self.mac_payload)?;
        }
        if !self.mic.is_empty() {
            os.write_bytes(2, &self.mic)?;
        }
        for v in &self.gateway_macs {
            os.write_bytes(3, &v)?;
        };
        if self.polarization_inversion != false {
            os.write_bool(4, self.polarization_inversion)?;
        }
        if self.frequency != 0 {
            os.write_uint32(5, self.frequency)?;
        }
        if self.dr != 0 {
            os.write_uint32(6, self.dr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendProprietaryPayloadRequest {
        SendProprietaryPayloadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "mac_payload",
                    |m: &SendProprietaryPayloadRequest| { &m.mac_payload },
                    |m: &mut SendProprietaryPayloadRequest| { &mut m.mac_payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "mic",
                    |m: &SendProprietaryPayloadRequest| { &m.mic },
                    |m: &mut SendProprietaryPayloadRequest| { &mut m.mic },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "gateway_macs",
                    |m: &SendProprietaryPayloadRequest| { &m.gateway_macs },
                    |m: &mut SendProprietaryPayloadRequest| { &mut m.gateway_macs },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "polarization_inversion",
                    |m: &SendProprietaryPayloadRequest| { &m.polarization_inversion },
                    |m: &mut SendProprietaryPayloadRequest| { &mut m.polarization_inversion },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frequency",
                    |m: &SendProprietaryPayloadRequest| { &m.frequency },
                    |m: &mut SendProprietaryPayloadRequest| { &mut m.frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dr",
                    |m: &SendProprietaryPayloadRequest| { &m.dr },
                    |m: &mut SendProprietaryPayloadRequest| { &mut m.dr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SendProprietaryPayloadRequest>(
                    "SendProprietaryPayloadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SendProprietaryPayloadRequest {
        static mut instance: ::protobuf::lazy::Lazy<SendProprietaryPayloadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SendProprietaryPayloadRequest,
        };
        unsafe {
            instance.get(SendProprietaryPayloadRequest::new)
        }
    }
}

impl ::protobuf::Clear for SendProprietaryPayloadRequest {
    fn clear(&mut self) {
        self.mac_payload.clear();
        self.mic.clear();
        self.gateway_macs.clear();
        self.polarization_inversion = false;
        self.frequency = 0;
        self.dr = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendProprietaryPayloadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendProprietaryPayloadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gateway {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub location: ::protobuf::SingularPtrField<super::common::Location>,
    pub gateway_profile_id: ::std::vec::Vec<u8>,
    pub boards: ::protobuf::RepeatedField<GatewayBoard>,
    pub routing_profile_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gateway {
    fn default() -> &'a Gateway {
        <Gateway as ::protobuf::Message>::default_instance()
    }
}

impl Gateway {
    pub fn new() -> Gateway {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // .common.Location location = 2;


    pub fn get_location(&self) -> &super::common::Location {
        self.location.as_ref().unwrap_or_else(|| super::common::Location::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: super::common::Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut super::common::Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> super::common::Location {
        self.location.take().unwrap_or_else(|| super::common::Location::new())
    }

    // bytes gateway_profile_id = 3;


    pub fn get_gateway_profile_id(&self) -> &[u8] {
        &self.gateway_profile_id
    }
    pub fn clear_gateway_profile_id(&mut self) {
        self.gateway_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.gateway_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.gateway_profile_id
    }

    // Take field
    pub fn take_gateway_profile_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.gateway_profile_id, ::std::vec::Vec::new())
    }

    // repeated .ns.GatewayBoard boards = 4;


    pub fn get_boards(&self) -> &[GatewayBoard] {
        &self.boards
    }
    pub fn clear_boards(&mut self) {
        self.boards.clear();
    }

    // Param is passed by value, moved
    pub fn set_boards(&mut self, v: ::protobuf::RepeatedField<GatewayBoard>) {
        self.boards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_boards(&mut self) -> &mut ::protobuf::RepeatedField<GatewayBoard> {
        &mut self.boards
    }

    // Take field
    pub fn take_boards(&mut self) -> ::protobuf::RepeatedField<GatewayBoard> {
        ::std::mem::replace(&mut self.boards, ::protobuf::RepeatedField::new())
    }

    // bytes routing_profile_id = 5;


    pub fn get_routing_profile_id(&self) -> &[u8] {
        &self.routing_profile_id
    }
    pub fn clear_routing_profile_id(&mut self) {
        self.routing_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_routing_profile_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.routing_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routing_profile_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.routing_profile_id
    }

    // Take field
    pub fn take_routing_profile_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.routing_profile_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Gateway {
    fn is_initialized(&self) -> bool {
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.boards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.gateway_profile_id)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.boards)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.routing_profile_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.gateway_profile_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.gateway_profile_id);
        }
        for value in &self.boards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.routing_profile_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.routing_profile_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.gateway_profile_id.is_empty() {
            os.write_bytes(3, &self.gateway_profile_id)?;
        }
        for v in &self.boards {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.routing_profile_id.is_empty() {
            os.write_bytes(5, &self.routing_profile_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gateway {
        Gateway::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &Gateway| { &m.id },
                    |m: &mut Gateway| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Location>>(
                    "location",
                    |m: &Gateway| { &m.location },
                    |m: &mut Gateway| { &mut m.location },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "gateway_profile_id",
                    |m: &Gateway| { &m.gateway_profile_id },
                    |m: &mut Gateway| { &mut m.gateway_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayBoard>>(
                    "boards",
                    |m: &Gateway| { &m.boards },
                    |m: &mut Gateway| { &mut m.boards },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "routing_profile_id",
                    |m: &Gateway| { &m.routing_profile_id },
                    |m: &mut Gateway| { &mut m.routing_profile_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gateway>(
                    "Gateway",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gateway {
        static mut instance: ::protobuf::lazy::Lazy<Gateway> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gateway,
        };
        unsafe {
            instance.get(Gateway::new)
        }
    }
}

impl ::protobuf::Clear for Gateway {
    fn clear(&mut self) {
        self.id.clear();
        self.location.clear();
        self.gateway_profile_id.clear();
        self.boards.clear();
        self.routing_profile_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gateway {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gateway {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayBoard {
    // message fields
    pub fpga_id: ::std::vec::Vec<u8>,
    pub fine_timestamp_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayBoard {
    fn default() -> &'a GatewayBoard {
        <GatewayBoard as ::protobuf::Message>::default_instance()
    }
}

impl GatewayBoard {
    pub fn new() -> GatewayBoard {
        ::std::default::Default::default()
    }

    // bytes fpga_id = 1;


    pub fn get_fpga_id(&self) -> &[u8] {
        &self.fpga_id
    }
    pub fn clear_fpga_id(&mut self) {
        self.fpga_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_fpga_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.fpga_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fpga_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.fpga_id
    }

    // Take field
    pub fn take_fpga_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.fpga_id, ::std::vec::Vec::new())
    }

    // bytes fine_timestamp_key = 2;


    pub fn get_fine_timestamp_key(&self) -> &[u8] {
        &self.fine_timestamp_key
    }
    pub fn clear_fine_timestamp_key(&mut self) {
        self.fine_timestamp_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_fine_timestamp_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.fine_timestamp_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fine_timestamp_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.fine_timestamp_key
    }

    // Take field
    pub fn take_fine_timestamp_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.fine_timestamp_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GatewayBoard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.fpga_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.fine_timestamp_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.fpga_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.fpga_id);
        }
        if !self.fine_timestamp_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.fine_timestamp_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.fpga_id.is_empty() {
            os.write_bytes(1, &self.fpga_id)?;
        }
        if !self.fine_timestamp_key.is_empty() {
            os.write_bytes(2, &self.fine_timestamp_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayBoard {
        GatewayBoard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "fpga_id",
                    |m: &GatewayBoard| { &m.fpga_id },
                    |m: &mut GatewayBoard| { &mut m.fpga_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "fine_timestamp_key",
                    |m: &GatewayBoard| { &m.fine_timestamp_key },
                    |m: &mut GatewayBoard| { &mut m.fine_timestamp_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayBoard>(
                    "GatewayBoard",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayBoard {
        static mut instance: ::protobuf::lazy::Lazy<GatewayBoard> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayBoard,
        };
        unsafe {
            instance.get(GatewayBoard::new)
        }
    }
}

impl ::protobuf::Clear for GatewayBoard {
    fn clear(&mut self) {
        self.fpga_id.clear();
        self.fine_timestamp_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayBoard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayBoard {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateGatewayRequest {
    // message fields
    pub gateway: ::protobuf::SingularPtrField<Gateway>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateGatewayRequest {
    fn default() -> &'a CreateGatewayRequest {
        <CreateGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateGatewayRequest {
    pub fn new() -> CreateGatewayRequest {
        ::std::default::Default::default()
    }

    // .ns.Gateway gateway = 1;


    pub fn get_gateway(&self) -> &Gateway {
        self.gateway.as_ref().unwrap_or_else(|| Gateway::default_instance())
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    pub fn has_gateway(&self) -> bool {
        self.gateway.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: Gateway) {
        self.gateway = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut Gateway {
        if self.gateway.is_none() {
            self.gateway.set_default();
        }
        self.gateway.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway(&mut self) -> Gateway {
        self.gateway.take().unwrap_or_else(|| Gateway::new())
    }
}

impl ::protobuf::Message for CreateGatewayRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateGatewayRequest {
        CreateGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gateway>>(
                    "gateway",
                    |m: &CreateGatewayRequest| { &m.gateway },
                    |m: &mut CreateGatewayRequest| { &mut m.gateway },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateGatewayRequest>(
                    "CreateGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateGatewayRequest,
        };
        unsafe {
            instance.get(CreateGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateGatewayRequest {
    fn clear(&mut self) {
        self.gateway.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayRequest {
    fn default() -> &'a GetGatewayRequest {
        <GetGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayRequest {
    pub fn new() -> GetGatewayRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetGatewayRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayRequest {
        GetGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &GetGatewayRequest| { &m.id },
                    |m: &mut GetGatewayRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayRequest>(
                    "GetGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayRequest,
        };
        unsafe {
            instance.get(GetGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayResponse {
    // message fields
    pub gateway: ::protobuf::SingularPtrField<Gateway>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub first_seen_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub last_seen_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayResponse {
    fn default() -> &'a GetGatewayResponse {
        <GetGatewayResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayResponse {
    pub fn new() -> GetGatewayResponse {
        ::std::default::Default::default()
    }

    // .ns.Gateway gateway = 1;


    pub fn get_gateway(&self) -> &Gateway {
        self.gateway.as_ref().unwrap_or_else(|| Gateway::default_instance())
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    pub fn has_gateway(&self) -> bool {
        self.gateway.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: Gateway) {
        self.gateway = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut Gateway {
        if self.gateway.is_none() {
            self.gateway.set_default();
        }
        self.gateway.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway(&mut self) -> Gateway {
        self.gateway.take().unwrap_or_else(|| Gateway::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp first_seen_at = 4;


    pub fn get_first_seen_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.first_seen_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_first_seen_at(&mut self) {
        self.first_seen_at.clear();
    }

    pub fn has_first_seen_at(&self) -> bool {
        self.first_seen_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_seen_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.first_seen_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_seen_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.first_seen_at.is_none() {
            self.first_seen_at.set_default();
        }
        self.first_seen_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_first_seen_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.first_seen_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp last_seen_at = 5;


    pub fn get_last_seen_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_seen_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_last_seen_at(&mut self) {
        self.last_seen_at.clear();
    }

    pub fn has_last_seen_at(&self) -> bool {
        self.last_seen_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_seen_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_seen_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_seen_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_seen_at.is_none() {
            self.last_seen_at.set_default();
        }
        self.last_seen_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_seen_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_seen_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetGatewayResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.first_seen_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_seen_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.first_seen_at)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_seen_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.first_seen_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_seen_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.first_seen_at.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_seen_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayResponse {
        GetGatewayResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gateway>>(
                    "gateway",
                    |m: &GetGatewayResponse| { &m.gateway },
                    |m: &mut GetGatewayResponse| { &mut m.gateway },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetGatewayResponse| { &m.created_at },
                    |m: &mut GetGatewayResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetGatewayResponse| { &m.updated_at },
                    |m: &mut GetGatewayResponse| { &mut m.updated_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "first_seen_at",
                    |m: &GetGatewayResponse| { &m.first_seen_at },
                    |m: &mut GetGatewayResponse| { &mut m.first_seen_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "last_seen_at",
                    |m: &GetGatewayResponse| { &m.last_seen_at },
                    |m: &mut GetGatewayResponse| { &mut m.last_seen_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayResponse>(
                    "GetGatewayResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayResponse,
        };
        unsafe {
            instance.get(GetGatewayResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayResponse {
    fn clear(&mut self) {
        self.gateway.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.first_seen_at.clear();
        self.last_seen_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateGatewayRequest {
    // message fields
    pub gateway: ::protobuf::SingularPtrField<Gateway>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateGatewayRequest {
    fn default() -> &'a UpdateGatewayRequest {
        <UpdateGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateGatewayRequest {
    pub fn new() -> UpdateGatewayRequest {
        ::std::default::Default::default()
    }

    // .ns.Gateway gateway = 1;


    pub fn get_gateway(&self) -> &Gateway {
        self.gateway.as_ref().unwrap_or_else(|| Gateway::default_instance())
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    pub fn has_gateway(&self) -> bool {
        self.gateway.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: Gateway) {
        self.gateway = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut Gateway {
        if self.gateway.is_none() {
            self.gateway.set_default();
        }
        self.gateway.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway(&mut self) -> Gateway {
        self.gateway.take().unwrap_or_else(|| Gateway::new())
    }
}

impl ::protobuf::Message for UpdateGatewayRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateGatewayRequest {
        UpdateGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gateway>>(
                    "gateway",
                    |m: &UpdateGatewayRequest| { &m.gateway },
                    |m: &mut UpdateGatewayRequest| { &mut m.gateway },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateGatewayRequest>(
                    "UpdateGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateGatewayRequest,
        };
        unsafe {
            instance.get(UpdateGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateGatewayRequest {
    fn clear(&mut self) {
        self.gateway.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteGatewayRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteGatewayRequest {
    fn default() -> &'a DeleteGatewayRequest {
        <DeleteGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGatewayRequest {
    pub fn new() -> DeleteGatewayRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteGatewayRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteGatewayRequest {
        DeleteGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &DeleteGatewayRequest| { &m.id },
                    |m: &mut DeleteGatewayRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteGatewayRequest>(
                    "DeleteGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteGatewayRequest,
        };
        unsafe {
            instance.get(DeleteGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteGatewayRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayStats {
    // message fields
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub rx_packets_received: i32,
    pub rx_packets_received_ok: i32,
    pub tx_packets_received: i32,
    pub tx_packets_emitted: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayStats {
    fn default() -> &'a GatewayStats {
        <GatewayStats as ::protobuf::Message>::default_instance()
    }
}

impl GatewayStats {
    pub fn new() -> GatewayStats {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp timestamp = 1;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // int32 rx_packets_received = 2;


    pub fn get_rx_packets_received(&self) -> i32 {
        self.rx_packets_received
    }
    pub fn clear_rx_packets_received(&mut self) {
        self.rx_packets_received = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_packets_received(&mut self, v: i32) {
        self.rx_packets_received = v;
    }

    // int32 rx_packets_received_ok = 3;


    pub fn get_rx_packets_received_ok(&self) -> i32 {
        self.rx_packets_received_ok
    }
    pub fn clear_rx_packets_received_ok(&mut self) {
        self.rx_packets_received_ok = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_packets_received_ok(&mut self, v: i32) {
        self.rx_packets_received_ok = v;
    }

    // int32 tx_packets_received = 4;


    pub fn get_tx_packets_received(&self) -> i32 {
        self.tx_packets_received
    }
    pub fn clear_tx_packets_received(&mut self) {
        self.tx_packets_received = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_packets_received(&mut self, v: i32) {
        self.tx_packets_received = v;
    }

    // int32 tx_packets_emitted = 5;


    pub fn get_tx_packets_emitted(&self) -> i32 {
        self.tx_packets_emitted
    }
    pub fn clear_tx_packets_emitted(&mut self) {
        self.tx_packets_emitted = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_packets_emitted(&mut self, v: i32) {
        self.tx_packets_emitted = v;
    }
}

impl ::protobuf::Message for GatewayStats {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rx_packets_received = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rx_packets_received_ok = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.tx_packets_received = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.tx_packets_emitted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.rx_packets_received != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rx_packets_received, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rx_packets_received_ok != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rx_packets_received_ok, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_packets_received != 0 {
            my_size += ::protobuf::rt::value_size(4, self.tx_packets_received, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_packets_emitted != 0 {
            my_size += ::protobuf::rt::value_size(5, self.tx_packets_emitted, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.rx_packets_received != 0 {
            os.write_int32(2, self.rx_packets_received)?;
        }
        if self.rx_packets_received_ok != 0 {
            os.write_int32(3, self.rx_packets_received_ok)?;
        }
        if self.tx_packets_received != 0 {
            os.write_int32(4, self.tx_packets_received)?;
        }
        if self.tx_packets_emitted != 0 {
            os.write_int32(5, self.tx_packets_emitted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayStats {
        GatewayStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "timestamp",
                    |m: &GatewayStats| { &m.timestamp },
                    |m: &mut GatewayStats| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rx_packets_received",
                    |m: &GatewayStats| { &m.rx_packets_received },
                    |m: &mut GatewayStats| { &mut m.rx_packets_received },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rx_packets_received_ok",
                    |m: &GatewayStats| { &m.rx_packets_received_ok },
                    |m: &mut GatewayStats| { &mut m.rx_packets_received_ok },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "tx_packets_received",
                    |m: &GatewayStats| { &m.tx_packets_received },
                    |m: &mut GatewayStats| { &mut m.tx_packets_received },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "tx_packets_emitted",
                    |m: &GatewayStats| { &m.tx_packets_emitted },
                    |m: &mut GatewayStats| { &mut m.tx_packets_emitted },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayStats>(
                    "GatewayStats",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayStats {
        static mut instance: ::protobuf::lazy::Lazy<GatewayStats> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayStats,
        };
        unsafe {
            instance.get(GatewayStats::new)
        }
    }
}

impl ::protobuf::Clear for GatewayStats {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.rx_packets_received = 0;
        self.rx_packets_received_ok = 0;
        self.tx_packets_received = 0;
        self.tx_packets_emitted = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayStats {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayStatsRequest {
    // message fields
    pub gateway_id: ::std::vec::Vec<u8>,
    pub interval: AggregationInterval,
    pub start_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayStatsRequest {
    fn default() -> &'a GetGatewayStatsRequest {
        <GetGatewayStatsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayStatsRequest {
    pub fn new() -> GetGatewayStatsRequest {
        ::std::default::Default::default()
    }

    // bytes gateway_id = 1;


    pub fn get_gateway_id(&self) -> &[u8] {
        &self.gateway_id
    }
    pub fn clear_gateway_id(&mut self) {
        self.gateway_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.gateway_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.gateway_id
    }

    // Take field
    pub fn take_gateway_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.gateway_id, ::std::vec::Vec::new())
    }

    // .ns.AggregationInterval interval = 2;


    pub fn get_interval(&self) -> AggregationInterval {
        self.interval
    }
    pub fn clear_interval(&mut self) {
        self.interval = AggregationInterval::SECOND;
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: AggregationInterval) {
        self.interval = v;
    }

    // .google.protobuf.Timestamp start_timestamp = 3;


    pub fn get_start_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_timestamp.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp.clear();
    }

    pub fn has_start_timestamp(&self) -> bool {
        self.start_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_timestamp.is_none() {
            self.start_timestamp.set_default();
        }
        self.start_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_timestamp = 4;


    pub fn get_end_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_timestamp.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_end_timestamp(&mut self) {
        self.end_timestamp.clear();
    }

    pub fn has_end_timestamp(&self) -> bool {
        self.end_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_timestamp.is_none() {
            self.end_timestamp.set_default();
        }
        self.end_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetGatewayStatsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.start_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.gateway_id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.interval, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_timestamp)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gateway_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.gateway_id);
        }
        if self.interval != AggregationInterval::SECOND {
            my_size += ::protobuf::rt::enum_size(2, self.interval);
        }
        if let Some(ref v) = self.start_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gateway_id.is_empty() {
            os.write_bytes(1, &self.gateway_id)?;
        }
        if self.interval != AggregationInterval::SECOND {
            os.write_enum(2, self.interval.value())?;
        }
        if let Some(ref v) = self.start_timestamp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_timestamp.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayStatsRequest {
        GetGatewayStatsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "gateway_id",
                    |m: &GetGatewayStatsRequest| { &m.gateway_id },
                    |m: &mut GetGatewayStatsRequest| { &mut m.gateway_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AggregationInterval>>(
                    "interval",
                    |m: &GetGatewayStatsRequest| { &m.interval },
                    |m: &mut GetGatewayStatsRequest| { &mut m.interval },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "start_timestamp",
                    |m: &GetGatewayStatsRequest| { &m.start_timestamp },
                    |m: &mut GetGatewayStatsRequest| { &mut m.start_timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "end_timestamp",
                    |m: &GetGatewayStatsRequest| { &m.end_timestamp },
                    |m: &mut GetGatewayStatsRequest| { &mut m.end_timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayStatsRequest>(
                    "GetGatewayStatsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayStatsRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayStatsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayStatsRequest,
        };
        unsafe {
            instance.get(GetGatewayStatsRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayStatsRequest {
    fn clear(&mut self) {
        self.gateway_id.clear();
        self.interval = AggregationInterval::SECOND;
        self.start_timestamp.clear();
        self.end_timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayStatsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayStatsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayStatsResponse {
    // message fields
    pub result: ::protobuf::RepeatedField<GatewayStats>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayStatsResponse {
    fn default() -> &'a GetGatewayStatsResponse {
        <GetGatewayStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayStatsResponse {
    pub fn new() -> GetGatewayStatsResponse {
        ::std::default::Default::default()
    }

    // repeated .ns.GatewayStats result = 1;


    pub fn get_result(&self) -> &[GatewayStats] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<GatewayStats>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<GatewayStats> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<GatewayStats> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetGatewayStatsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.result {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayStatsResponse {
        GetGatewayStatsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayStats>>(
                    "result",
                    |m: &GetGatewayStatsResponse| { &m.result },
                    |m: &mut GetGatewayStatsResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayStatsResponse>(
                    "GetGatewayStatsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayStatsResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayStatsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayStatsResponse,
        };
        unsafe {
            instance.get(GetGatewayStatsResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayStatsResponse {
    fn clear(&mut self) {
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayStatsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceQueueItem {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub frm_payload: ::std::vec::Vec<u8>,
    pub f_cnt: u32,
    pub f_port: u32,
    pub confirmed: bool,
    pub dev_addr: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceQueueItem {
    fn default() -> &'a DeviceQueueItem {
        <DeviceQueueItem as ::protobuf::Message>::default_instance()
    }
}

impl DeviceQueueItem {
    pub fn new() -> DeviceQueueItem {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes frm_payload = 2;


    pub fn get_frm_payload(&self) -> &[u8] {
        &self.frm_payload
    }
    pub fn clear_frm_payload(&mut self) {
        self.frm_payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_frm_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.frm_payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frm_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.frm_payload
    }

    // Take field
    pub fn take_frm_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.frm_payload, ::std::vec::Vec::new())
    }

    // uint32 f_cnt = 3;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // uint32 f_port = 4;


    pub fn get_f_port(&self) -> u32 {
        self.f_port
    }
    pub fn clear_f_port(&mut self) {
        self.f_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_port(&mut self, v: u32) {
        self.f_port = v;
    }

    // bool confirmed = 5;


    pub fn get_confirmed(&self) -> bool {
        self.confirmed
    }
    pub fn clear_confirmed(&mut self) {
        self.confirmed = false;
    }

    // Param is passed by value, moved
    pub fn set_confirmed(&mut self, v: bool) {
        self.confirmed = v;
    }

    // bytes dev_addr = 6;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeviceQueueItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.frm_payload)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_port = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.confirmed = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if !self.frm_payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.frm_payload);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(3, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.f_port != 0 {
            my_size += ::protobuf::rt::value_size(4, self.f_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.confirmed != false {
            my_size += 2;
        }
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.dev_addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if !self.frm_payload.is_empty() {
            os.write_bytes(2, &self.frm_payload)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(3, self.f_cnt)?;
        }
        if self.f_port != 0 {
            os.write_uint32(4, self.f_port)?;
        }
        if self.confirmed != false {
            os.write_bool(5, self.confirmed)?;
        }
        if !self.dev_addr.is_empty() {
            os.write_bytes(6, &self.dev_addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceQueueItem {
        DeviceQueueItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &DeviceQueueItem| { &m.dev_eui },
                    |m: &mut DeviceQueueItem| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "frm_payload",
                    |m: &DeviceQueueItem| { &m.frm_payload },
                    |m: &mut DeviceQueueItem| { &mut m.frm_payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &DeviceQueueItem| { &m.f_cnt },
                    |m: &mut DeviceQueueItem| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_port",
                    |m: &DeviceQueueItem| { &m.f_port },
                    |m: &mut DeviceQueueItem| { &mut m.f_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "confirmed",
                    |m: &DeviceQueueItem| { &m.confirmed },
                    |m: &mut DeviceQueueItem| { &mut m.confirmed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &DeviceQueueItem| { &m.dev_addr },
                    |m: &mut DeviceQueueItem| { &mut m.dev_addr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceQueueItem>(
                    "DeviceQueueItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeviceQueueItem {
        static mut instance: ::protobuf::lazy::Lazy<DeviceQueueItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeviceQueueItem,
        };
        unsafe {
            instance.get(DeviceQueueItem::new)
        }
    }
}

impl ::protobuf::Clear for DeviceQueueItem {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.frm_payload.clear();
        self.f_cnt = 0;
        self.f_port = 0;
        self.confirmed = false;
        self.dev_addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceQueueItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceQueueItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDeviceQueueItemRequest {
    // message fields
    pub item: ::protobuf::SingularPtrField<DeviceQueueItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDeviceQueueItemRequest {
    fn default() -> &'a CreateDeviceQueueItemRequest {
        <CreateDeviceQueueItemRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceQueueItemRequest {
    pub fn new() -> CreateDeviceQueueItemRequest {
        ::std::default::Default::default()
    }

    // .ns.DeviceQueueItem item = 1;


    pub fn get_item(&self) -> &DeviceQueueItem {
        self.item.as_ref().unwrap_or_else(|| DeviceQueueItem::default_instance())
    }
    pub fn clear_item(&mut self) {
        self.item.clear();
    }

    pub fn has_item(&self) -> bool {
        self.item.is_some()
    }

    // Param is passed by value, moved
    pub fn set_item(&mut self, v: DeviceQueueItem) {
        self.item = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_item(&mut self) -> &mut DeviceQueueItem {
        if self.item.is_none() {
            self.item.set_default();
        }
        self.item.as_mut().unwrap()
    }

    // Take field
    pub fn take_item(&mut self) -> DeviceQueueItem {
        self.item.take().unwrap_or_else(|| DeviceQueueItem::new())
    }
}

impl ::protobuf::Message for CreateDeviceQueueItemRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.item {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.item)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.item.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDeviceQueueItemRequest {
        CreateDeviceQueueItemRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceQueueItem>>(
                    "item",
                    |m: &CreateDeviceQueueItemRequest| { &m.item },
                    |m: &mut CreateDeviceQueueItemRequest| { &mut m.item },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateDeviceQueueItemRequest>(
                    "CreateDeviceQueueItemRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateDeviceQueueItemRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateDeviceQueueItemRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateDeviceQueueItemRequest,
        };
        unsafe {
            instance.get(CreateDeviceQueueItemRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateDeviceQueueItemRequest {
    fn clear(&mut self) {
        self.item.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDeviceQueueItemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceQueueItemRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FlushDeviceQueueForDevEUIRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FlushDeviceQueueForDevEUIRequest {
    fn default() -> &'a FlushDeviceQueueForDevEUIRequest {
        <FlushDeviceQueueForDevEUIRequest as ::protobuf::Message>::default_instance()
    }
}

impl FlushDeviceQueueForDevEUIRequest {
    pub fn new() -> FlushDeviceQueueForDevEUIRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for FlushDeviceQueueForDevEUIRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FlushDeviceQueueForDevEUIRequest {
        FlushDeviceQueueForDevEUIRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &FlushDeviceQueueForDevEUIRequest| { &m.dev_eui },
                    |m: &mut FlushDeviceQueueForDevEUIRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FlushDeviceQueueForDevEUIRequest>(
                    "FlushDeviceQueueForDevEUIRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FlushDeviceQueueForDevEUIRequest {
        static mut instance: ::protobuf::lazy::Lazy<FlushDeviceQueueForDevEUIRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FlushDeviceQueueForDevEUIRequest,
        };
        unsafe {
            instance.get(FlushDeviceQueueForDevEUIRequest::new)
        }
    }
}

impl ::protobuf::Clear for FlushDeviceQueueForDevEUIRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FlushDeviceQueueForDevEUIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FlushDeviceQueueForDevEUIRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceQueueItemsForDevEUIRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceQueueItemsForDevEUIRequest {
    fn default() -> &'a GetDeviceQueueItemsForDevEUIRequest {
        <GetDeviceQueueItemsForDevEUIRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceQueueItemsForDevEUIRequest {
    pub fn new() -> GetDeviceQueueItemsForDevEUIRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetDeviceQueueItemsForDevEUIRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceQueueItemsForDevEUIRequest {
        GetDeviceQueueItemsForDevEUIRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &GetDeviceQueueItemsForDevEUIRequest| { &m.dev_eui },
                    |m: &mut GetDeviceQueueItemsForDevEUIRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceQueueItemsForDevEUIRequest>(
                    "GetDeviceQueueItemsForDevEUIRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceQueueItemsForDevEUIRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceQueueItemsForDevEUIRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceQueueItemsForDevEUIRequest,
        };
        unsafe {
            instance.get(GetDeviceQueueItemsForDevEUIRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceQueueItemsForDevEUIRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceQueueItemsForDevEUIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceQueueItemsForDevEUIRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceQueueItemsForDevEUIResponse {
    // message fields
    pub items: ::protobuf::RepeatedField<DeviceQueueItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceQueueItemsForDevEUIResponse {
    fn default() -> &'a GetDeviceQueueItemsForDevEUIResponse {
        <GetDeviceQueueItemsForDevEUIResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceQueueItemsForDevEUIResponse {
    pub fn new() -> GetDeviceQueueItemsForDevEUIResponse {
        ::std::default::Default::default()
    }

    // repeated .ns.DeviceQueueItem items = 1;


    pub fn get_items(&self) -> &[DeviceQueueItem] {
        &self.items
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: ::protobuf::RepeatedField<DeviceQueueItem>) {
        self.items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_items(&mut self) -> &mut ::protobuf::RepeatedField<DeviceQueueItem> {
        &mut self.items
    }

    // Take field
    pub fn take_items(&mut self) -> ::protobuf::RepeatedField<DeviceQueueItem> {
        ::std::mem::replace(&mut self.items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetDeviceQueueItemsForDevEUIResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceQueueItemsForDevEUIResponse {
        GetDeviceQueueItemsForDevEUIResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceQueueItem>>(
                    "items",
                    |m: &GetDeviceQueueItemsForDevEUIResponse| { &m.items },
                    |m: &mut GetDeviceQueueItemsForDevEUIResponse| { &mut m.items },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceQueueItemsForDevEUIResponse>(
                    "GetDeviceQueueItemsForDevEUIResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceQueueItemsForDevEUIResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceQueueItemsForDevEUIResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceQueueItemsForDevEUIResponse,
        };
        unsafe {
            instance.get(GetDeviceQueueItemsForDevEUIResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceQueueItemsForDevEUIResponse {
    fn clear(&mut self) {
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceQueueItemsForDevEUIResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceQueueItemsForDevEUIResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetNextDownlinkFCntForDevEUIRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetNextDownlinkFCntForDevEUIRequest {
    fn default() -> &'a GetNextDownlinkFCntForDevEUIRequest {
        <GetNextDownlinkFCntForDevEUIRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetNextDownlinkFCntForDevEUIRequest {
    pub fn new() -> GetNextDownlinkFCntForDevEUIRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetNextDownlinkFCntForDevEUIRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetNextDownlinkFCntForDevEUIRequest {
        GetNextDownlinkFCntForDevEUIRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &GetNextDownlinkFCntForDevEUIRequest| { &m.dev_eui },
                    |m: &mut GetNextDownlinkFCntForDevEUIRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetNextDownlinkFCntForDevEUIRequest>(
                    "GetNextDownlinkFCntForDevEUIRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetNextDownlinkFCntForDevEUIRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetNextDownlinkFCntForDevEUIRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetNextDownlinkFCntForDevEUIRequest,
        };
        unsafe {
            instance.get(GetNextDownlinkFCntForDevEUIRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetNextDownlinkFCntForDevEUIRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetNextDownlinkFCntForDevEUIRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNextDownlinkFCntForDevEUIRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetNextDownlinkFCntForDevEUIResponse {
    // message fields
    pub f_cnt: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetNextDownlinkFCntForDevEUIResponse {
    fn default() -> &'a GetNextDownlinkFCntForDevEUIResponse {
        <GetNextDownlinkFCntForDevEUIResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetNextDownlinkFCntForDevEUIResponse {
    pub fn new() -> GetNextDownlinkFCntForDevEUIResponse {
        ::std::default::Default::default()
    }

    // uint32 f_cnt = 1;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }
}

impl ::protobuf::Message for GetNextDownlinkFCntForDevEUIResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(1, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.f_cnt != 0 {
            os.write_uint32(1, self.f_cnt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetNextDownlinkFCntForDevEUIResponse {
        GetNextDownlinkFCntForDevEUIResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &GetNextDownlinkFCntForDevEUIResponse| { &m.f_cnt },
                    |m: &mut GetNextDownlinkFCntForDevEUIResponse| { &mut m.f_cnt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetNextDownlinkFCntForDevEUIResponse>(
                    "GetNextDownlinkFCntForDevEUIResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetNextDownlinkFCntForDevEUIResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetNextDownlinkFCntForDevEUIResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetNextDownlinkFCntForDevEUIResponse,
        };
        unsafe {
            instance.get(GetNextDownlinkFCntForDevEUIResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetNextDownlinkFCntForDevEUIResponse {
    fn clear(&mut self) {
        self.f_cnt = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetNextDownlinkFCntForDevEUIResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetNextDownlinkFCntForDevEUIResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamFrameLogsForGatewayRequest {
    // message fields
    pub gateway_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamFrameLogsForGatewayRequest {
    fn default() -> &'a StreamFrameLogsForGatewayRequest {
        <StreamFrameLogsForGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamFrameLogsForGatewayRequest {
    pub fn new() -> StreamFrameLogsForGatewayRequest {
        ::std::default::Default::default()
    }

    // bytes gateway_id = 1;


    pub fn get_gateway_id(&self) -> &[u8] {
        &self.gateway_id
    }
    pub fn clear_gateway_id(&mut self) {
        self.gateway_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.gateway_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.gateway_id
    }

    // Take field
    pub fn take_gateway_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.gateway_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StreamFrameLogsForGatewayRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.gateway_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gateway_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.gateway_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gateway_id.is_empty() {
            os.write_bytes(1, &self.gateway_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamFrameLogsForGatewayRequest {
        StreamFrameLogsForGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "gateway_id",
                    |m: &StreamFrameLogsForGatewayRequest| { &m.gateway_id },
                    |m: &mut StreamFrameLogsForGatewayRequest| { &mut m.gateway_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StreamFrameLogsForGatewayRequest>(
                    "StreamFrameLogsForGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StreamFrameLogsForGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<StreamFrameLogsForGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamFrameLogsForGatewayRequest,
        };
        unsafe {
            instance.get(StreamFrameLogsForGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for StreamFrameLogsForGatewayRequest {
    fn clear(&mut self) {
        self.gateway_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamFrameLogsForGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamFrameLogsForGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamFrameLogsForGatewayResponse {
    // message oneof groups
    pub frame: ::std::option::Option<StreamFrameLogsForGatewayResponse_oneof_frame>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamFrameLogsForGatewayResponse {
    fn default() -> &'a StreamFrameLogsForGatewayResponse {
        <StreamFrameLogsForGatewayResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StreamFrameLogsForGatewayResponse_oneof_frame {
    uplink_frame_set(super::gw::UplinkFrameSet),
    downlink_frame(super::gw::DownlinkFrame),
}

impl StreamFrameLogsForGatewayResponse {
    pub fn new() -> StreamFrameLogsForGatewayResponse {
        ::std::default::Default::default()
    }

    // .gw.UplinkFrameSet uplink_frame_set = 1;


    pub fn get_uplink_frame_set(&self) -> &super::gw::UplinkFrameSet {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(ref v)) => v,
            _ => super::gw::UplinkFrameSet::default_instance(),
        }
    }
    pub fn clear_uplink_frame_set(&mut self) {
        self.frame = ::std::option::Option::None;
    }

    pub fn has_uplink_frame_set(&self) -> bool {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uplink_frame_set(&mut self, v: super::gw::UplinkFrameSet) {
        self.frame = ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uplink_frame_set(&mut self) -> &mut super::gw::UplinkFrameSet {
        if let ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(_)) = self.frame {
        } else {
            self.frame = ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(super::gw::UplinkFrameSet::new()));
        }
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uplink_frame_set(&mut self) -> super::gw::UplinkFrameSet {
        if self.has_uplink_frame_set() {
            match self.frame.take() {
                ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(v)) => v,
                _ => panic!(),
            }
        } else {
            super::gw::UplinkFrameSet::new()
        }
    }

    // .gw.DownlinkFrame downlink_frame = 2;


    pub fn get_downlink_frame(&self) -> &super::gw::DownlinkFrame {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(ref v)) => v,
            _ => super::gw::DownlinkFrame::default_instance(),
        }
    }
    pub fn clear_downlink_frame(&mut self) {
        self.frame = ::std::option::Option::None;
    }

    pub fn has_downlink_frame(&self) -> bool {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_downlink_frame(&mut self, v: super::gw::DownlinkFrame) {
        self.frame = ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(v))
    }

    // Mutable pointer to the field.
    pub fn mut_downlink_frame(&mut self) -> &mut super::gw::DownlinkFrame {
        if let ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(_)) = self.frame {
        } else {
            self.frame = ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(super::gw::DownlinkFrame::new()));
        }
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_downlink_frame(&mut self) -> super::gw::DownlinkFrame {
        if self.has_downlink_frame() {
            match self.frame.take() {
                ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(v)) => v,
                _ => panic!(),
            }
        } else {
            super::gw::DownlinkFrame::new()
        }
    }
}

impl ::protobuf::Message for StreamFrameLogsForGatewayResponse {
    fn is_initialized(&self) -> bool {
        if let Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(ref v)) = self.frame {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(ref v)) = self.frame {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.frame = ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.frame = ::std::option::Option::Some(StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.frame {
            match v {
                &StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.frame {
            match v {
                &StreamFrameLogsForGatewayResponse_oneof_frame::uplink_frame_set(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamFrameLogsForGatewayResponse_oneof_frame::downlink_frame(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamFrameLogsForGatewayResponse {
        StreamFrameLogsForGatewayResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::gw::UplinkFrameSet>(
                    "uplink_frame_set",
                    StreamFrameLogsForGatewayResponse::has_uplink_frame_set,
                    StreamFrameLogsForGatewayResponse::get_uplink_frame_set,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::gw::DownlinkFrame>(
                    "downlink_frame",
                    StreamFrameLogsForGatewayResponse::has_downlink_frame,
                    StreamFrameLogsForGatewayResponse::get_downlink_frame,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StreamFrameLogsForGatewayResponse>(
                    "StreamFrameLogsForGatewayResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StreamFrameLogsForGatewayResponse {
        static mut instance: ::protobuf::lazy::Lazy<StreamFrameLogsForGatewayResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamFrameLogsForGatewayResponse,
        };
        unsafe {
            instance.get(StreamFrameLogsForGatewayResponse::new)
        }
    }
}

impl ::protobuf::Clear for StreamFrameLogsForGatewayResponse {
    fn clear(&mut self) {
        self.frame = ::std::option::Option::None;
        self.frame = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamFrameLogsForGatewayResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamFrameLogsForGatewayResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamFrameLogsForDeviceRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamFrameLogsForDeviceRequest {
    fn default() -> &'a StreamFrameLogsForDeviceRequest {
        <StreamFrameLogsForDeviceRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamFrameLogsForDeviceRequest {
    pub fn new() -> StreamFrameLogsForDeviceRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StreamFrameLogsForDeviceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamFrameLogsForDeviceRequest {
        StreamFrameLogsForDeviceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &StreamFrameLogsForDeviceRequest| { &m.dev_eui },
                    |m: &mut StreamFrameLogsForDeviceRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StreamFrameLogsForDeviceRequest>(
                    "StreamFrameLogsForDeviceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StreamFrameLogsForDeviceRequest {
        static mut instance: ::protobuf::lazy::Lazy<StreamFrameLogsForDeviceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamFrameLogsForDeviceRequest,
        };
        unsafe {
            instance.get(StreamFrameLogsForDeviceRequest::new)
        }
    }
}

impl ::protobuf::Clear for StreamFrameLogsForDeviceRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamFrameLogsForDeviceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamFrameLogsForDeviceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamFrameLogsForDeviceResponse {
    // message oneof groups
    pub frame: ::std::option::Option<StreamFrameLogsForDeviceResponse_oneof_frame>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamFrameLogsForDeviceResponse {
    fn default() -> &'a StreamFrameLogsForDeviceResponse {
        <StreamFrameLogsForDeviceResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StreamFrameLogsForDeviceResponse_oneof_frame {
    uplink_frame_set(super::gw::UplinkFrameSet),
    downlink_frame(super::gw::DownlinkFrame),
}

impl StreamFrameLogsForDeviceResponse {
    pub fn new() -> StreamFrameLogsForDeviceResponse {
        ::std::default::Default::default()
    }

    // .gw.UplinkFrameSet uplink_frame_set = 1;


    pub fn get_uplink_frame_set(&self) -> &super::gw::UplinkFrameSet {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(ref v)) => v,
            _ => super::gw::UplinkFrameSet::default_instance(),
        }
    }
    pub fn clear_uplink_frame_set(&mut self) {
        self.frame = ::std::option::Option::None;
    }

    pub fn has_uplink_frame_set(&self) -> bool {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uplink_frame_set(&mut self, v: super::gw::UplinkFrameSet) {
        self.frame = ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uplink_frame_set(&mut self) -> &mut super::gw::UplinkFrameSet {
        if let ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(_)) = self.frame {
        } else {
            self.frame = ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(super::gw::UplinkFrameSet::new()));
        }
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uplink_frame_set(&mut self) -> super::gw::UplinkFrameSet {
        if self.has_uplink_frame_set() {
            match self.frame.take() {
                ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(v)) => v,
                _ => panic!(),
            }
        } else {
            super::gw::UplinkFrameSet::new()
        }
    }

    // .gw.DownlinkFrame downlink_frame = 2;


    pub fn get_downlink_frame(&self) -> &super::gw::DownlinkFrame {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(ref v)) => v,
            _ => super::gw::DownlinkFrame::default_instance(),
        }
    }
    pub fn clear_downlink_frame(&mut self) {
        self.frame = ::std::option::Option::None;
    }

    pub fn has_downlink_frame(&self) -> bool {
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_downlink_frame(&mut self, v: super::gw::DownlinkFrame) {
        self.frame = ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(v))
    }

    // Mutable pointer to the field.
    pub fn mut_downlink_frame(&mut self) -> &mut super::gw::DownlinkFrame {
        if let ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(_)) = self.frame {
        } else {
            self.frame = ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(super::gw::DownlinkFrame::new()));
        }
        match self.frame {
            ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_downlink_frame(&mut self) -> super::gw::DownlinkFrame {
        if self.has_downlink_frame() {
            match self.frame.take() {
                ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(v)) => v,
                _ => panic!(),
            }
        } else {
            super::gw::DownlinkFrame::new()
        }
    }
}

impl ::protobuf::Message for StreamFrameLogsForDeviceResponse {
    fn is_initialized(&self) -> bool {
        if let Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(ref v)) = self.frame {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(ref v)) = self.frame {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.frame = ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.frame = ::std::option::Option::Some(StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.frame {
            match v {
                &StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.frame {
            match v {
                &StreamFrameLogsForDeviceResponse_oneof_frame::uplink_frame_set(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamFrameLogsForDeviceResponse_oneof_frame::downlink_frame(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamFrameLogsForDeviceResponse {
        StreamFrameLogsForDeviceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::gw::UplinkFrameSet>(
                    "uplink_frame_set",
                    StreamFrameLogsForDeviceResponse::has_uplink_frame_set,
                    StreamFrameLogsForDeviceResponse::get_uplink_frame_set,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::gw::DownlinkFrame>(
                    "downlink_frame",
                    StreamFrameLogsForDeviceResponse::has_downlink_frame,
                    StreamFrameLogsForDeviceResponse::get_downlink_frame,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StreamFrameLogsForDeviceResponse>(
                    "StreamFrameLogsForDeviceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StreamFrameLogsForDeviceResponse {
        static mut instance: ::protobuf::lazy::Lazy<StreamFrameLogsForDeviceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamFrameLogsForDeviceResponse,
        };
        unsafe {
            instance.get(StreamFrameLogsForDeviceResponse::new)
        }
    }
}

impl ::protobuf::Clear for StreamFrameLogsForDeviceResponse {
    fn clear(&mut self) {
        self.frame = ::std::option::Option::None;
        self.frame = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamFrameLogsForDeviceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamFrameLogsForDeviceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetVersionResponse {
    // message fields
    pub version: ::std::string::String,
    pub region: super::common::Region,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVersionResponse {
    fn default() -> &'a GetVersionResponse {
        <GetVersionResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetVersionResponse {
    pub fn new() -> GetVersionResponse {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // .common.Region region = 2;


    pub fn get_region(&self) -> super::common::Region {
        self.region
    }
    pub fn clear_region(&mut self) {
        self.region = super::common::Region::EU868;
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: super::common::Region) {
        self.region = v;
    }
}

impl ::protobuf::Message for GetVersionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.region, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if self.region != super::common::Region::EU868 {
            my_size += ::protobuf::rt::enum_size(2, self.region);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if self.region != super::common::Region::EU868 {
            os.write_enum(2, self.region.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVersionResponse {
        GetVersionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "version",
                    |m: &GetVersionResponse| { &m.version },
                    |m: &mut GetVersionResponse| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::Region>>(
                    "region",
                    |m: &GetVersionResponse| { &m.region },
                    |m: &mut GetVersionResponse| { &mut m.region },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetVersionResponse>(
                    "GetVersionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetVersionResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetVersionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetVersionResponse,
        };
        unsafe {
            instance.get(GetVersionResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetVersionResponse {
    fn clear(&mut self) {
        self.version.clear();
        self.region = super::common::Region::EU868;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVersionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVersionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayProfile {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub channels: ::std::vec::Vec<u32>,
    pub extra_channels: ::protobuf::RepeatedField<GatewayProfileExtraChannel>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayProfile {
    fn default() -> &'a GatewayProfile {
        <GatewayProfile as ::protobuf::Message>::default_instance()
    }
}

impl GatewayProfile {
    pub fn new() -> GatewayProfile {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // repeated uint32 channels = 2;


    pub fn get_channels(&self) -> &[u32] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::std::vec::Vec<u32>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channels(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.channels, ::std::vec::Vec::new())
    }

    // repeated .ns.GatewayProfileExtraChannel extra_channels = 3;


    pub fn get_extra_channels(&self) -> &[GatewayProfileExtraChannel] {
        &self.extra_channels
    }
    pub fn clear_extra_channels(&mut self) {
        self.extra_channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra_channels(&mut self, v: ::protobuf::RepeatedField<GatewayProfileExtraChannel>) {
        self.extra_channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extra_channels(&mut self) -> &mut ::protobuf::RepeatedField<GatewayProfileExtraChannel> {
        &mut self.extra_channels
    }

    // Take field
    pub fn take_extra_channels(&mut self) -> ::protobuf::RepeatedField<GatewayProfileExtraChannel> {
        ::std::mem::replace(&mut self.extra_channels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GatewayProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.extra_channels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.channels)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.extra_channels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        for value in &self.channels {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.extra_channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        for v in &self.channels {
            os.write_uint32(2, *v)?;
        };
        for v in &self.extra_channels {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayProfile {
        GatewayProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &GatewayProfile| { &m.id },
                    |m: &mut GatewayProfile| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "channels",
                    |m: &GatewayProfile| { &m.channels },
                    |m: &mut GatewayProfile| { &mut m.channels },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfileExtraChannel>>(
                    "extra_channels",
                    |m: &GatewayProfile| { &m.extra_channels },
                    |m: &mut GatewayProfile| { &mut m.extra_channels },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayProfile>(
                    "GatewayProfile",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayProfile {
        static mut instance: ::protobuf::lazy::Lazy<GatewayProfile> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayProfile,
        };
        unsafe {
            instance.get(GatewayProfile::new)
        }
    }
}

impl ::protobuf::Clear for GatewayProfile {
    fn clear(&mut self) {
        self.id.clear();
        self.channels.clear();
        self.extra_channels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayProfileExtraChannel {
    // message fields
    pub modulation: super::common::Modulation,
    pub frequency: u32,
    pub bandwidth: u32,
    pub bitrate: u32,
    pub spreading_factors: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayProfileExtraChannel {
    fn default() -> &'a GatewayProfileExtraChannel {
        <GatewayProfileExtraChannel as ::protobuf::Message>::default_instance()
    }
}

impl GatewayProfileExtraChannel {
    pub fn new() -> GatewayProfileExtraChannel {
        ::std::default::Default::default()
    }

    // .common.Modulation modulation = 1;


    pub fn get_modulation(&self) -> super::common::Modulation {
        self.modulation
    }
    pub fn clear_modulation(&mut self) {
        self.modulation = super::common::Modulation::LORA;
    }

    // Param is passed by value, moved
    pub fn set_modulation(&mut self, v: super::common::Modulation) {
        self.modulation = v;
    }

    // uint32 frequency = 2;


    pub fn get_frequency(&self) -> u32 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: u32) {
        self.frequency = v;
    }

    // uint32 bandwidth = 3;


    pub fn get_bandwidth(&self) -> u32 {
        self.bandwidth
    }
    pub fn clear_bandwidth(&mut self) {
        self.bandwidth = 0;
    }

    // Param is passed by value, moved
    pub fn set_bandwidth(&mut self, v: u32) {
        self.bandwidth = v;
    }

    // uint32 bitrate = 4;


    pub fn get_bitrate(&self) -> u32 {
        self.bitrate
    }
    pub fn clear_bitrate(&mut self) {
        self.bitrate = 0;
    }

    // Param is passed by value, moved
    pub fn set_bitrate(&mut self, v: u32) {
        self.bitrate = v;
    }

    // repeated uint32 spreading_factors = 5;


    pub fn get_spreading_factors(&self) -> &[u32] {
        &self.spreading_factors
    }
    pub fn clear_spreading_factors(&mut self) {
        self.spreading_factors.clear();
    }

    // Param is passed by value, moved
    pub fn set_spreading_factors(&mut self, v: ::std::vec::Vec<u32>) {
        self.spreading_factors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_spreading_factors(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.spreading_factors
    }

    // Take field
    pub fn take_spreading_factors(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.spreading_factors, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GatewayProfileExtraChannel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.modulation, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frequency = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bandwidth = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bitrate = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.spreading_factors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.modulation != super::common::Modulation::LORA {
            my_size += ::protobuf::rt::enum_size(1, self.modulation);
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(2, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bandwidth != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bandwidth, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bitrate != 0 {
            my_size += ::protobuf::rt::value_size(4, self.bitrate, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.spreading_factors {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.modulation != super::common::Modulation::LORA {
            os.write_enum(1, self.modulation.value())?;
        }
        if self.frequency != 0 {
            os.write_uint32(2, self.frequency)?;
        }
        if self.bandwidth != 0 {
            os.write_uint32(3, self.bandwidth)?;
        }
        if self.bitrate != 0 {
            os.write_uint32(4, self.bitrate)?;
        }
        for v in &self.spreading_factors {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayProfileExtraChannel {
        GatewayProfileExtraChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::Modulation>>(
                    "modulation",
                    |m: &GatewayProfileExtraChannel| { &m.modulation },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.modulation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frequency",
                    |m: &GatewayProfileExtraChannel| { &m.frequency },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "bandwidth",
                    |m: &GatewayProfileExtraChannel| { &m.bandwidth },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.bandwidth },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "bitrate",
                    |m: &GatewayProfileExtraChannel| { &m.bitrate },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.bitrate },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "spreading_factors",
                    |m: &GatewayProfileExtraChannel| { &m.spreading_factors },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.spreading_factors },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayProfileExtraChannel>(
                    "GatewayProfileExtraChannel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayProfileExtraChannel {
        static mut instance: ::protobuf::lazy::Lazy<GatewayProfileExtraChannel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayProfileExtraChannel,
        };
        unsafe {
            instance.get(GatewayProfileExtraChannel::new)
        }
    }
}

impl ::protobuf::Clear for GatewayProfileExtraChannel {
    fn clear(&mut self) {
        self.modulation = super::common::Modulation::LORA;
        self.frequency = 0;
        self.bandwidth = 0;
        self.bitrate = 0;
        self.spreading_factors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayProfileExtraChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayProfileExtraChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateGatewayProfileRequest {
    // message fields
    pub gateway_profile: ::protobuf::SingularPtrField<GatewayProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateGatewayProfileRequest {
    fn default() -> &'a CreateGatewayProfileRequest {
        <CreateGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateGatewayProfileRequest {
    pub fn new() -> CreateGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.GatewayProfile gateway_profile = 1;


    pub fn get_gateway_profile(&self) -> &GatewayProfile {
        self.gateway_profile.as_ref().unwrap_or_else(|| GatewayProfile::default_instance())
    }
    pub fn clear_gateway_profile(&mut self) {
        self.gateway_profile.clear();
    }

    pub fn has_gateway_profile(&self) -> bool {
        self.gateway_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile(&mut self, v: GatewayProfile) {
        self.gateway_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile(&mut self) -> &mut GatewayProfile {
        if self.gateway_profile.is_none() {
            self.gateway_profile.set_default();
        }
        self.gateway_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway_profile(&mut self) -> GatewayProfile {
        self.gateway_profile.take().unwrap_or_else(|| GatewayProfile::new())
    }
}

impl ::protobuf::Message for CreateGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateGatewayProfileRequest {
        CreateGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfile>>(
                    "gateway_profile",
                    |m: &CreateGatewayProfileRequest| { &m.gateway_profile },
                    |m: &mut CreateGatewayProfileRequest| { &mut m.gateway_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateGatewayProfileRequest>(
                    "CreateGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateGatewayProfileRequest,
        };
        unsafe {
            instance.get(CreateGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateGatewayProfileRequest {
    fn clear(&mut self) {
        self.gateway_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateGatewayProfileResponse {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateGatewayProfileResponse {
    fn default() -> &'a CreateGatewayProfileResponse {
        <CreateGatewayProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateGatewayProfileResponse {
    pub fn new() -> CreateGatewayProfileResponse {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateGatewayProfileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateGatewayProfileResponse {
        CreateGatewayProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &CreateGatewayProfileResponse| { &m.id },
                    |m: &mut CreateGatewayProfileResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateGatewayProfileResponse>(
                    "CreateGatewayProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateGatewayProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateGatewayProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateGatewayProfileResponse,
        };
        unsafe {
            instance.get(CreateGatewayProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateGatewayProfileResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateGatewayProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGatewayProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayProfileRequest {
    fn default() -> &'a GetGatewayProfileRequest {
        <GetGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayProfileRequest {
    pub fn new() -> GetGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayProfileRequest {
        GetGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &GetGatewayProfileRequest| { &m.id },
                    |m: &mut GetGatewayProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayProfileRequest>(
                    "GetGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayProfileRequest,
        };
        unsafe {
            instance.get(GetGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayProfileResponse {
    // message fields
    pub gateway_profile: ::protobuf::SingularPtrField<GatewayProfile>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayProfileResponse {
    fn default() -> &'a GetGatewayProfileResponse {
        <GetGatewayProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayProfileResponse {
    pub fn new() -> GetGatewayProfileResponse {
        ::std::default::Default::default()
    }

    // .ns.GatewayProfile gateway_profile = 1;


    pub fn get_gateway_profile(&self) -> &GatewayProfile {
        self.gateway_profile.as_ref().unwrap_or_else(|| GatewayProfile::default_instance())
    }
    pub fn clear_gateway_profile(&mut self) {
        self.gateway_profile.clear();
    }

    pub fn has_gateway_profile(&self) -> bool {
        self.gateway_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile(&mut self, v: GatewayProfile) {
        self.gateway_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile(&mut self) -> &mut GatewayProfile {
        if self.gateway_profile.is_none() {
            self.gateway_profile.set_default();
        }
        self.gateway_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway_profile(&mut self) -> GatewayProfile {
        self.gateway_profile.take().unwrap_or_else(|| GatewayProfile::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetGatewayProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayProfileResponse {
        GetGatewayProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfile>>(
                    "gateway_profile",
                    |m: &GetGatewayProfileResponse| { &m.gateway_profile },
                    |m: &mut GetGatewayProfileResponse| { &mut m.gateway_profile },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetGatewayProfileResponse| { &m.created_at },
                    |m: &mut GetGatewayProfileResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetGatewayProfileResponse| { &m.updated_at },
                    |m: &mut GetGatewayProfileResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayProfileResponse>(
                    "GetGatewayProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayProfileResponse,
        };
        unsafe {
            instance.get(GetGatewayProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayProfileResponse {
    fn clear(&mut self) {
        self.gateway_profile.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateGatewayProfileRequest {
    // message fields
    pub gateway_profile: ::protobuf::SingularPtrField<GatewayProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateGatewayProfileRequest {
    fn default() -> &'a UpdateGatewayProfileRequest {
        <UpdateGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateGatewayProfileRequest {
    pub fn new() -> UpdateGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // .ns.GatewayProfile gateway_profile = 1;


    pub fn get_gateway_profile(&self) -> &GatewayProfile {
        self.gateway_profile.as_ref().unwrap_or_else(|| GatewayProfile::default_instance())
    }
    pub fn clear_gateway_profile(&mut self) {
        self.gateway_profile.clear();
    }

    pub fn has_gateway_profile(&self) -> bool {
        self.gateway_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile(&mut self, v: GatewayProfile) {
        self.gateway_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile(&mut self) -> &mut GatewayProfile {
        if self.gateway_profile.is_none() {
            self.gateway_profile.set_default();
        }
        self.gateway_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway_profile(&mut self) -> GatewayProfile {
        self.gateway_profile.take().unwrap_or_else(|| GatewayProfile::new())
    }
}

impl ::protobuf::Message for UpdateGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateGatewayProfileRequest {
        UpdateGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfile>>(
                    "gateway_profile",
                    |m: &UpdateGatewayProfileRequest| { &m.gateway_profile },
                    |m: &mut UpdateGatewayProfileRequest| { &mut m.gateway_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateGatewayProfileRequest>(
                    "UpdateGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateGatewayProfileRequest,
        };
        unsafe {
            instance.get(UpdateGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateGatewayProfileRequest {
    fn clear(&mut self) {
        self.gateway_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteGatewayProfileRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteGatewayProfileRequest {
    fn default() -> &'a DeleteGatewayProfileRequest {
        <DeleteGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGatewayProfileRequest {
    pub fn new() -> DeleteGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteGatewayProfileRequest {
        DeleteGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &DeleteGatewayProfileRequest| { &m.id },
                    |m: &mut DeleteGatewayProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteGatewayProfileRequest>(
                    "DeleteGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteGatewayProfileRequest,
        };
        unsafe {
            instance.get(DeleteGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteGatewayProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MulticastGroup {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub mc_addr: ::std::vec::Vec<u8>,
    pub mc_nwk_s_key: ::std::vec::Vec<u8>,
    pub f_cnt: u32,
    pub group_type: MulticastGroupType,
    pub dr: u32,
    pub frequency: u32,
    pub ping_slot_period: u32,
    pub service_profile_id: ::std::vec::Vec<u8>,
    pub routing_profile_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulticastGroup {
    fn default() -> &'a MulticastGroup {
        <MulticastGroup as ::protobuf::Message>::default_instance()
    }
}

impl MulticastGroup {
    pub fn new() -> MulticastGroup {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    // bytes mc_addr = 2;


    pub fn get_mc_addr(&self) -> &[u8] {
        &self.mc_addr
    }
    pub fn clear_mc_addr(&mut self) {
        self.mc_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_mc_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.mc_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mc_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mc_addr
    }

    // Take field
    pub fn take_mc_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mc_addr, ::std::vec::Vec::new())
    }

    // bytes mc_nwk_s_key = 3;


    pub fn get_mc_nwk_s_key(&self) -> &[u8] {
        &self.mc_nwk_s_key
    }
    pub fn clear_mc_nwk_s_key(&mut self) {
        self.mc_nwk_s_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_mc_nwk_s_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.mc_nwk_s_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mc_nwk_s_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mc_nwk_s_key
    }

    // Take field
    pub fn take_mc_nwk_s_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mc_nwk_s_key, ::std::vec::Vec::new())
    }

    // uint32 f_cnt = 4;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // .ns.MulticastGroupType group_type = 5;


    pub fn get_group_type(&self) -> MulticastGroupType {
        self.group_type
    }
    pub fn clear_group_type(&mut self) {
        self.group_type = MulticastGroupType::CLASS_C;
    }

    // Param is passed by value, moved
    pub fn set_group_type(&mut self, v: MulticastGroupType) {
        self.group_type = v;
    }

    // uint32 dr = 6;


    pub fn get_dr(&self) -> u32 {
        self.dr
    }
    pub fn clear_dr(&mut self) {
        self.dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr(&mut self, v: u32) {
        self.dr = v;
    }

    // uint32 frequency = 7;


    pub fn get_frequency(&self) -> u32 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: u32) {
        self.frequency = v;
    }

    // uint32 ping_slot_period = 8;


    pub fn get_ping_slot_period(&self) -> u32 {
        self.ping_slot_period
    }
    pub fn clear_ping_slot_period(&mut self) {
        self.ping_slot_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_slot_period(&mut self, v: u32) {
        self.ping_slot_period = v;
    }

    // bytes service_profile_id = 9;


    pub fn get_service_profile_id(&self) -> &[u8] {
        &self.service_profile_id
    }
    pub fn clear_service_profile_id(&mut self) {
        self.service_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_profile_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.service_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.service_profile_id
    }

    // Take field
    pub fn take_service_profile_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.service_profile_id, ::std::vec::Vec::new())
    }

    // bytes routing_profile_id = 10;


    pub fn get_routing_profile_id(&self) -> &[u8] {
        &self.routing_profile_id
    }
    pub fn clear_routing_profile_id(&mut self) {
        self.routing_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_routing_profile_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.routing_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routing_profile_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.routing_profile_id
    }

    // Take field
    pub fn take_routing_profile_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.routing_profile_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MulticastGroup {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mc_addr)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mc_nwk_s_key)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.group_type, 5, &mut self.unknown_fields)?
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dr = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frequency = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ping_slot_period = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.service_profile_id)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.routing_profile_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if !self.mc_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.mc_addr);
        }
        if !self.mc_nwk_s_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.mc_nwk_s_key);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(4, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.group_type != MulticastGroupType::CLASS_C {
            my_size += ::protobuf::rt::enum_size(5, self.group_type);
        }
        if self.dr != 0 {
            my_size += ::protobuf::rt::value_size(6, self.dr, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(7, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ping_slot_period != 0 {
            my_size += ::protobuf::rt::value_size(8, self.ping_slot_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.service_profile_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.service_profile_id);
        }
        if !self.routing_profile_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.routing_profile_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if !self.mc_addr.is_empty() {
            os.write_bytes(2, &self.mc_addr)?;
        }
        if !self.mc_nwk_s_key.is_empty() {
            os.write_bytes(3, &self.mc_nwk_s_key)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(4, self.f_cnt)?;
        }
        if self.group_type != MulticastGroupType::CLASS_C {
            os.write_enum(5, self.group_type.value())?;
        }
        if self.dr != 0 {
            os.write_uint32(6, self.dr)?;
        }
        if self.frequency != 0 {
            os.write_uint32(7, self.frequency)?;
        }
        if self.ping_slot_period != 0 {
            os.write_uint32(8, self.ping_slot_period)?;
        }
        if !self.service_profile_id.is_empty() {
            os.write_bytes(9, &self.service_profile_id)?;
        }
        if !self.routing_profile_id.is_empty() {
            os.write_bytes(10, &self.routing_profile_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulticastGroup {
        MulticastGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &MulticastGroup| { &m.id },
                    |m: &mut MulticastGroup| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "mc_addr",
                    |m: &MulticastGroup| { &m.mc_addr },
                    |m: &mut MulticastGroup| { &mut m.mc_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "mc_nwk_s_key",
                    |m: &MulticastGroup| { &m.mc_nwk_s_key },
                    |m: &mut MulticastGroup| { &mut m.mc_nwk_s_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &MulticastGroup| { &m.f_cnt },
                    |m: &mut MulticastGroup| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MulticastGroupType>>(
                    "group_type",
                    |m: &MulticastGroup| { &m.group_type },
                    |m: &mut MulticastGroup| { &mut m.group_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dr",
                    |m: &MulticastGroup| { &m.dr },
                    |m: &mut MulticastGroup| { &mut m.dr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frequency",
                    |m: &MulticastGroup| { &m.frequency },
                    |m: &mut MulticastGroup| { &mut m.frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "ping_slot_period",
                    |m: &MulticastGroup| { &m.ping_slot_period },
                    |m: &mut MulticastGroup| { &mut m.ping_slot_period },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "service_profile_id",
                    |m: &MulticastGroup| { &m.service_profile_id },
                    |m: &mut MulticastGroup| { &mut m.service_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "routing_profile_id",
                    |m: &MulticastGroup| { &m.routing_profile_id },
                    |m: &mut MulticastGroup| { &mut m.routing_profile_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MulticastGroup>(
                    "MulticastGroup",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MulticastGroup {
        static mut instance: ::protobuf::lazy::Lazy<MulticastGroup> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MulticastGroup,
        };
        unsafe {
            instance.get(MulticastGroup::new)
        }
    }
}

impl ::protobuf::Clear for MulticastGroup {
    fn clear(&mut self) {
        self.id.clear();
        self.mc_addr.clear();
        self.mc_nwk_s_key.clear();
        self.f_cnt = 0;
        self.group_type = MulticastGroupType::CLASS_C;
        self.dr = 0;
        self.frequency = 0;
        self.ping_slot_period = 0;
        self.service_profile_id.clear();
        self.routing_profile_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulticastGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateMulticastGroupRequest {
    // message fields
    pub multicast_group: ::protobuf::SingularPtrField<MulticastGroup>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateMulticastGroupRequest {
    fn default() -> &'a CreateMulticastGroupRequest {
        <CreateMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateMulticastGroupRequest {
    pub fn new() -> CreateMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // .ns.MulticastGroup multicast_group = 1;


    pub fn get_multicast_group(&self) -> &MulticastGroup {
        self.multicast_group.as_ref().unwrap_or_else(|| MulticastGroup::default_instance())
    }
    pub fn clear_multicast_group(&mut self) {
        self.multicast_group.clear();
    }

    pub fn has_multicast_group(&self) -> bool {
        self.multicast_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_group(&mut self, v: MulticastGroup) {
        self.multicast_group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group(&mut self) -> &mut MulticastGroup {
        if self.multicast_group.is_none() {
            self.multicast_group.set_default();
        }
        self.multicast_group.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_group(&mut self) -> MulticastGroup {
        self.multicast_group.take().unwrap_or_else(|| MulticastGroup::new())
    }
}

impl ::protobuf::Message for CreateMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_group {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_group)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_group.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateMulticastGroupRequest {
        CreateMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastGroup>>(
                    "multicast_group",
                    |m: &CreateMulticastGroupRequest| { &m.multicast_group },
                    |m: &mut CreateMulticastGroupRequest| { &mut m.multicast_group },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateMulticastGroupRequest>(
                    "CreateMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateMulticastGroupRequest,
        };
        unsafe {
            instance.get(CreateMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateMulticastGroupResponse {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateMulticastGroupResponse {
    fn default() -> &'a CreateMulticastGroupResponse {
        <CreateMulticastGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateMulticastGroupResponse {
    pub fn new() -> CreateMulticastGroupResponse {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateMulticastGroupResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateMulticastGroupResponse {
        CreateMulticastGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &CreateMulticastGroupResponse| { &m.id },
                    |m: &mut CreateMulticastGroupResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateMulticastGroupResponse>(
                    "CreateMulticastGroupResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateMulticastGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateMulticastGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateMulticastGroupResponse,
        };
        unsafe {
            instance.get(CreateMulticastGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateMulticastGroupResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateMulticastGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateMulticastGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMulticastGroupRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMulticastGroupRequest {
    fn default() -> &'a GetMulticastGroupRequest {
        <GetMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMulticastGroupRequest {
    pub fn new() -> GetMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMulticastGroupRequest {
        GetMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &GetMulticastGroupRequest| { &m.id },
                    |m: &mut GetMulticastGroupRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetMulticastGroupRequest>(
                    "GetMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMulticastGroupRequest,
        };
        unsafe {
            instance.get(GetMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetMulticastGroupRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMulticastGroupResponse {
    // message fields
    pub multicast_group: ::protobuf::SingularPtrField<MulticastGroup>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMulticastGroupResponse {
    fn default() -> &'a GetMulticastGroupResponse {
        <GetMulticastGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMulticastGroupResponse {
    pub fn new() -> GetMulticastGroupResponse {
        ::std::default::Default::default()
    }

    // .ns.MulticastGroup multicast_group = 1;


    pub fn get_multicast_group(&self) -> &MulticastGroup {
        self.multicast_group.as_ref().unwrap_or_else(|| MulticastGroup::default_instance())
    }
    pub fn clear_multicast_group(&mut self) {
        self.multicast_group.clear();
    }

    pub fn has_multicast_group(&self) -> bool {
        self.multicast_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_group(&mut self, v: MulticastGroup) {
        self.multicast_group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group(&mut self) -> &mut MulticastGroup {
        if self.multicast_group.is_none() {
            self.multicast_group.set_default();
        }
        self.multicast_group.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_group(&mut self) -> MulticastGroup {
        self.multicast_group.take().unwrap_or_else(|| MulticastGroup::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetMulticastGroupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_group {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_group)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_group.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMulticastGroupResponse {
        GetMulticastGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastGroup>>(
                    "multicast_group",
                    |m: &GetMulticastGroupResponse| { &m.multicast_group },
                    |m: &mut GetMulticastGroupResponse| { &mut m.multicast_group },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetMulticastGroupResponse| { &m.created_at },
                    |m: &mut GetMulticastGroupResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetMulticastGroupResponse| { &m.updated_at },
                    |m: &mut GetMulticastGroupResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetMulticastGroupResponse>(
                    "GetMulticastGroupResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMulticastGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetMulticastGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMulticastGroupResponse,
        };
        unsafe {
            instance.get(GetMulticastGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetMulticastGroupResponse {
    fn clear(&mut self) {
        self.multicast_group.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMulticastGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMulticastGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateMulticastGroupRequest {
    // message fields
    pub multicast_group: ::protobuf::SingularPtrField<MulticastGroup>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateMulticastGroupRequest {
    fn default() -> &'a UpdateMulticastGroupRequest {
        <UpdateMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateMulticastGroupRequest {
    pub fn new() -> UpdateMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // .ns.MulticastGroup multicast_group = 1;


    pub fn get_multicast_group(&self) -> &MulticastGroup {
        self.multicast_group.as_ref().unwrap_or_else(|| MulticastGroup::default_instance())
    }
    pub fn clear_multicast_group(&mut self) {
        self.multicast_group.clear();
    }

    pub fn has_multicast_group(&self) -> bool {
        self.multicast_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_group(&mut self, v: MulticastGroup) {
        self.multicast_group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group(&mut self) -> &mut MulticastGroup {
        if self.multicast_group.is_none() {
            self.multicast_group.set_default();
        }
        self.multicast_group.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_group(&mut self) -> MulticastGroup {
        self.multicast_group.take().unwrap_or_else(|| MulticastGroup::new())
    }
}

impl ::protobuf::Message for UpdateMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_group {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_group)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_group.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateMulticastGroupRequest {
        UpdateMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastGroup>>(
                    "multicast_group",
                    |m: &UpdateMulticastGroupRequest| { &m.multicast_group },
                    |m: &mut UpdateMulticastGroupRequest| { &mut m.multicast_group },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateMulticastGroupRequest>(
                    "UpdateMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateMulticastGroupRequest,
        };
        unsafe {
            instance.get(UpdateMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteMulticastGroupRequest {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteMulticastGroupRequest {
    fn default() -> &'a DeleteMulticastGroupRequest {
        <DeleteMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMulticastGroupRequest {
    pub fn new() -> DeleteMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // bytes id = 1;


    pub fn get_id(&self) -> &[u8] {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeleteMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteMulticastGroupRequest {
        DeleteMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &DeleteMulticastGroupRequest| { &m.id },
                    |m: &mut DeleteMulticastGroupRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteMulticastGroupRequest>(
                    "DeleteMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteMulticastGroupRequest,
        };
        unsafe {
            instance.get(DeleteMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteMulticastGroupRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddDeviceToMulticastGroupRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub multicast_group_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddDeviceToMulticastGroupRequest {
    fn default() -> &'a AddDeviceToMulticastGroupRequest {
        <AddDeviceToMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddDeviceToMulticastGroupRequest {
    pub fn new() -> AddDeviceToMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes multicast_group_id = 2;


    pub fn get_multicast_group_id(&self) -> &[u8] {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AddDeviceToMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.multicast_group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if !self.multicast_group_id.is_empty() {
            os.write_bytes(2, &self.multicast_group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddDeviceToMulticastGroupRequest {
        AddDeviceToMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &AddDeviceToMulticastGroupRequest| { &m.dev_eui },
                    |m: &mut AddDeviceToMulticastGroupRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "multicast_group_id",
                    |m: &AddDeviceToMulticastGroupRequest| { &m.multicast_group_id },
                    |m: &mut AddDeviceToMulticastGroupRequest| { &mut m.multicast_group_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddDeviceToMulticastGroupRequest>(
                    "AddDeviceToMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddDeviceToMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<AddDeviceToMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddDeviceToMulticastGroupRequest,
        };
        unsafe {
            instance.get(AddDeviceToMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for AddDeviceToMulticastGroupRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.multicast_group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddDeviceToMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddDeviceToMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveDeviceFromMulticastGroupRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub multicast_group_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveDeviceFromMulticastGroupRequest {
    fn default() -> &'a RemoveDeviceFromMulticastGroupRequest {
        <RemoveDeviceFromMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveDeviceFromMulticastGroupRequest {
    pub fn new() -> RemoveDeviceFromMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes multicast_group_id = 2;


    pub fn get_multicast_group_id(&self) -> &[u8] {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for RemoveDeviceFromMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.multicast_group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if !self.multicast_group_id.is_empty() {
            os.write_bytes(2, &self.multicast_group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveDeviceFromMulticastGroupRequest {
        RemoveDeviceFromMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &RemoveDeviceFromMulticastGroupRequest| { &m.dev_eui },
                    |m: &mut RemoveDeviceFromMulticastGroupRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "multicast_group_id",
                    |m: &RemoveDeviceFromMulticastGroupRequest| { &m.multicast_group_id },
                    |m: &mut RemoveDeviceFromMulticastGroupRequest| { &mut m.multicast_group_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoveDeviceFromMulticastGroupRequest>(
                    "RemoveDeviceFromMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoveDeviceFromMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<RemoveDeviceFromMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoveDeviceFromMulticastGroupRequest,
        };
        unsafe {
            instance.get(RemoveDeviceFromMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for RemoveDeviceFromMulticastGroupRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.multicast_group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveDeviceFromMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveDeviceFromMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MulticastQueueItem {
    // message fields
    pub multicast_group_id: ::std::vec::Vec<u8>,
    pub f_cnt: u32,
    pub f_port: u32,
    pub frm_payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulticastQueueItem {
    fn default() -> &'a MulticastQueueItem {
        <MulticastQueueItem as ::protobuf::Message>::default_instance()
    }
}

impl MulticastQueueItem {
    pub fn new() -> MulticastQueueItem {
        ::std::default::Default::default()
    }

    // bytes multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &[u8] {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::vec::Vec::new())
    }

    // uint32 f_cnt = 2;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // uint32 f_port = 3;


    pub fn get_f_port(&self) -> u32 {
        self.f_port
    }
    pub fn clear_f_port(&mut self) {
        self.f_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_port(&mut self, v: u32) {
        self.f_port = v;
    }

    // bytes frm_payload = 4;


    pub fn get_frm_payload(&self) -> &[u8] {
        &self.frm_payload
    }
    pub fn clear_frm_payload(&mut self) {
        self.frm_payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_frm_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.frm_payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frm_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.frm_payload
    }

    // Take field
    pub fn take_frm_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.frm_payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MulticastQueueItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_port = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.frm_payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.multicast_group_id);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(2, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.f_port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.f_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.frm_payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.frm_payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_bytes(1, &self.multicast_group_id)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(2, self.f_cnt)?;
        }
        if self.f_port != 0 {
            os.write_uint32(3, self.f_port)?;
        }
        if !self.frm_payload.is_empty() {
            os.write_bytes(4, &self.frm_payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulticastQueueItem {
        MulticastQueueItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "multicast_group_id",
                    |m: &MulticastQueueItem| { &m.multicast_group_id },
                    |m: &mut MulticastQueueItem| { &mut m.multicast_group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &MulticastQueueItem| { &m.f_cnt },
                    |m: &mut MulticastQueueItem| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_port",
                    |m: &MulticastQueueItem| { &m.f_port },
                    |m: &mut MulticastQueueItem| { &mut m.f_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "frm_payload",
                    |m: &MulticastQueueItem| { &m.frm_payload },
                    |m: &mut MulticastQueueItem| { &mut m.frm_payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MulticastQueueItem>(
                    "MulticastQueueItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MulticastQueueItem {
        static mut instance: ::protobuf::lazy::Lazy<MulticastQueueItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MulticastQueueItem,
        };
        unsafe {
            instance.get(MulticastQueueItem::new)
        }
    }
}

impl ::protobuf::Clear for MulticastQueueItem {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.f_cnt = 0;
        self.f_port = 0;
        self.frm_payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulticastQueueItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastQueueItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnqueueMulticastQueueItemRequest {
    // message fields
    pub multicast_queue_item: ::protobuf::SingularPtrField<MulticastQueueItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnqueueMulticastQueueItemRequest {
    fn default() -> &'a EnqueueMulticastQueueItemRequest {
        <EnqueueMulticastQueueItemRequest as ::protobuf::Message>::default_instance()
    }
}

impl EnqueueMulticastQueueItemRequest {
    pub fn new() -> EnqueueMulticastQueueItemRequest {
        ::std::default::Default::default()
    }

    // .ns.MulticastQueueItem multicast_queue_item = 1;


    pub fn get_multicast_queue_item(&self) -> &MulticastQueueItem {
        self.multicast_queue_item.as_ref().unwrap_or_else(|| MulticastQueueItem::default_instance())
    }
    pub fn clear_multicast_queue_item(&mut self) {
        self.multicast_queue_item.clear();
    }

    pub fn has_multicast_queue_item(&self) -> bool {
        self.multicast_queue_item.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_queue_item(&mut self, v: MulticastQueueItem) {
        self.multicast_queue_item = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_queue_item(&mut self) -> &mut MulticastQueueItem {
        if self.multicast_queue_item.is_none() {
            self.multicast_queue_item.set_default();
        }
        self.multicast_queue_item.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_queue_item(&mut self) -> MulticastQueueItem {
        self.multicast_queue_item.take().unwrap_or_else(|| MulticastQueueItem::new())
    }
}

impl ::protobuf::Message for EnqueueMulticastQueueItemRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_queue_item {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_queue_item)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_queue_item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_queue_item.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnqueueMulticastQueueItemRequest {
        EnqueueMulticastQueueItemRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastQueueItem>>(
                    "multicast_queue_item",
                    |m: &EnqueueMulticastQueueItemRequest| { &m.multicast_queue_item },
                    |m: &mut EnqueueMulticastQueueItemRequest| { &mut m.multicast_queue_item },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnqueueMulticastQueueItemRequest>(
                    "EnqueueMulticastQueueItemRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnqueueMulticastQueueItemRequest {
        static mut instance: ::protobuf::lazy::Lazy<EnqueueMulticastQueueItemRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnqueueMulticastQueueItemRequest,
        };
        unsafe {
            instance.get(EnqueueMulticastQueueItemRequest::new)
        }
    }
}

impl ::protobuf::Clear for EnqueueMulticastQueueItemRequest {
    fn clear(&mut self) {
        self.multicast_queue_item.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnqueueMulticastQueueItemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnqueueMulticastQueueItemRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FlushMulticastQueueForMulticastGroupRequest {
    // message fields
    pub multicast_group_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FlushMulticastQueueForMulticastGroupRequest {
    fn default() -> &'a FlushMulticastQueueForMulticastGroupRequest {
        <FlushMulticastQueueForMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl FlushMulticastQueueForMulticastGroupRequest {
    pub fn new() -> FlushMulticastQueueForMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // bytes multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &[u8] {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for FlushMulticastQueueForMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.multicast_group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_bytes(1, &self.multicast_group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FlushMulticastQueueForMulticastGroupRequest {
        FlushMulticastQueueForMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "multicast_group_id",
                    |m: &FlushMulticastQueueForMulticastGroupRequest| { &m.multicast_group_id },
                    |m: &mut FlushMulticastQueueForMulticastGroupRequest| { &mut m.multicast_group_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FlushMulticastQueueForMulticastGroupRequest>(
                    "FlushMulticastQueueForMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FlushMulticastQueueForMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<FlushMulticastQueueForMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FlushMulticastQueueForMulticastGroupRequest,
        };
        unsafe {
            instance.get(FlushMulticastQueueForMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for FlushMulticastQueueForMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FlushMulticastQueueForMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FlushMulticastQueueForMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMulticastQueueItemsForMulticastGroupRequest {
    // message fields
    pub multicast_group_id: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMulticastQueueItemsForMulticastGroupRequest {
    fn default() -> &'a GetMulticastQueueItemsForMulticastGroupRequest {
        <GetMulticastQueueItemsForMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMulticastQueueItemsForMulticastGroupRequest {
    pub fn new() -> GetMulticastQueueItemsForMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // bytes multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &[u8] {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GetMulticastQueueItemsForMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.multicast_group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_bytes(1, &self.multicast_group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMulticastQueueItemsForMulticastGroupRequest {
        GetMulticastQueueItemsForMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "multicast_group_id",
                    |m: &GetMulticastQueueItemsForMulticastGroupRequest| { &m.multicast_group_id },
                    |m: &mut GetMulticastQueueItemsForMulticastGroupRequest| { &mut m.multicast_group_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetMulticastQueueItemsForMulticastGroupRequest>(
                    "GetMulticastQueueItemsForMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMulticastQueueItemsForMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetMulticastQueueItemsForMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMulticastQueueItemsForMulticastGroupRequest,
        };
        unsafe {
            instance.get(GetMulticastQueueItemsForMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetMulticastQueueItemsForMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMulticastQueueItemsForMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMulticastQueueItemsForMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMulticastQueueItemsForMulticastGroupResponse {
    // message fields
    pub multicast_queue_items: ::protobuf::RepeatedField<MulticastQueueItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMulticastQueueItemsForMulticastGroupResponse {
    fn default() -> &'a GetMulticastQueueItemsForMulticastGroupResponse {
        <GetMulticastQueueItemsForMulticastGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMulticastQueueItemsForMulticastGroupResponse {
    pub fn new() -> GetMulticastQueueItemsForMulticastGroupResponse {
        ::std::default::Default::default()
    }

    // repeated .ns.MulticastQueueItem multicast_queue_items = 1;


    pub fn get_multicast_queue_items(&self) -> &[MulticastQueueItem] {
        &self.multicast_queue_items
    }
    pub fn clear_multicast_queue_items(&mut self) {
        self.multicast_queue_items.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_queue_items(&mut self, v: ::protobuf::RepeatedField<MulticastQueueItem>) {
        self.multicast_queue_items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_multicast_queue_items(&mut self) -> &mut ::protobuf::RepeatedField<MulticastQueueItem> {
        &mut self.multicast_queue_items
    }

    // Take field
    pub fn take_multicast_queue_items(&mut self) -> ::protobuf::RepeatedField<MulticastQueueItem> {
        ::std::mem::replace(&mut self.multicast_queue_items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetMulticastQueueItemsForMulticastGroupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_queue_items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.multicast_queue_items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.multicast_queue_items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.multicast_queue_items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMulticastQueueItemsForMulticastGroupResponse {
        GetMulticastQueueItemsForMulticastGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastQueueItem>>(
                    "multicast_queue_items",
                    |m: &GetMulticastQueueItemsForMulticastGroupResponse| { &m.multicast_queue_items },
                    |m: &mut GetMulticastQueueItemsForMulticastGroupResponse| { &mut m.multicast_queue_items },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetMulticastQueueItemsForMulticastGroupResponse>(
                    "GetMulticastQueueItemsForMulticastGroupResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMulticastQueueItemsForMulticastGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetMulticastQueueItemsForMulticastGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMulticastQueueItemsForMulticastGroupResponse,
        };
        unsafe {
            instance.get(GetMulticastQueueItemsForMulticastGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetMulticastQueueItemsForMulticastGroupResponse {
    fn clear(&mut self) {
        self.multicast_queue_items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMulticastQueueItemsForMulticastGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMulticastQueueItemsForMulticastGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RXWindow {
    RX1 = 0,
    RX2 = 1,
}

impl ::protobuf::ProtobufEnum for RXWindow {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RXWindow> {
        match value {
            0 => ::std::option::Option::Some(RXWindow::RX1),
            1 => ::std::option::Option::Some(RXWindow::RX2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RXWindow] = &[
            RXWindow::RX1,
            RXWindow::RX2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RXWindow", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RXWindow {
}

impl ::std::default::Default for RXWindow {
    fn default() -> Self {
        RXWindow::RX1
    }
}

impl ::protobuf::reflect::ProtobufValue for RXWindow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AggregationInterval {
    SECOND = 0,
    MINUTE = 1,
    HOUR = 2,
    DAY = 3,
    WEEK = 4,
    MONTH = 5,
    QUARTER = 6,
    YEAR = 7,
}

impl ::protobuf::ProtobufEnum for AggregationInterval {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AggregationInterval> {
        match value {
            0 => ::std::option::Option::Some(AggregationInterval::SECOND),
            1 => ::std::option::Option::Some(AggregationInterval::MINUTE),
            2 => ::std::option::Option::Some(AggregationInterval::HOUR),
            3 => ::std::option::Option::Some(AggregationInterval::DAY),
            4 => ::std::option::Option::Some(AggregationInterval::WEEK),
            5 => ::std::option::Option::Some(AggregationInterval::MONTH),
            6 => ::std::option::Option::Some(AggregationInterval::QUARTER),
            7 => ::std::option::Option::Some(AggregationInterval::YEAR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AggregationInterval] = &[
            AggregationInterval::SECOND,
            AggregationInterval::MINUTE,
            AggregationInterval::HOUR,
            AggregationInterval::DAY,
            AggregationInterval::WEEK,
            AggregationInterval::MONTH,
            AggregationInterval::QUARTER,
            AggregationInterval::YEAR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("AggregationInterval", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for AggregationInterval {
}

impl ::std::default::Default for AggregationInterval {
    fn default() -> Self {
        AggregationInterval::SECOND
    }
}

impl ::protobuf::reflect::ProtobufValue for AggregationInterval {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MulticastGroupType {
    CLASS_C = 0,
    CLASS_B = 1,
}

impl ::protobuf::ProtobufEnum for MulticastGroupType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MulticastGroupType> {
        match value {
            0 => ::std::option::Option::Some(MulticastGroupType::CLASS_C),
            1 => ::std::option::Option::Some(MulticastGroupType::CLASS_B),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MulticastGroupType] = &[
            MulticastGroupType::CLASS_C,
            MulticastGroupType::CLASS_B,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MulticastGroupType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MulticastGroupType {
}

impl ::std::default::Default for MulticastGroupType {
    fn default() -> Self {
        MulticastGroupType::CLASS_C
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastGroupType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bns/ns.proto\x12\x02ns\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\
    \x1bgoogle/protobuf/empty.proto\x1a\x13common/common.proto\x1a\x0bgw/gw.\
    proto\x1a\x11ns/profiles.proto\"Z\n\x1bCreateServiceProfileRequest\x12;\
    \n\x0fservice_profile\x18\x01\x20\x01(\x0b2\x12.ns.ServiceProfileR\x0ese\
    rviceProfile\".\n\x1cCreateServiceProfileResponse\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x0cR\x02id\"*\n\x18GetServiceProfileRequest\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\x0cR\x02id\"\xce\x01\n\x19GetServiceProfileResponse\
    \x12;\n\x0fservice_profile\x18\x01\x20\x01(\x0b2\x12.ns.ServiceProfileR\
    \x0eserviceProfile\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\tupdatedAt\"Z\n\x1bUpdateServiceProfileR\
    equest\x12;\n\x0fservice_profile\x18\x01\x20\x01(\x0b2\x12.ns.ServicePro\
    fileR\x0eserviceProfile\"-\n\x1bDeleteServiceProfileRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x0cR\x02id\"Z\n\x1bCreateRoutingProfileRequest\
    \x12;\n\x0frouting_profile\x18\x01\x20\x01(\x0b2\x12.ns.RoutingProfileR\
    \x0eroutingProfile\".\n\x1cCreateRoutingProfileResponse\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\x0cR\x02id\"*\n\x18GetRoutingProfileRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x0cR\x02id\"\xce\x01\n\x19GetRoutingProfileRespo\
    nse\x12;\n\x0frouting_profile\x18\x01\x20\x01(\x0b2\x12.ns.RoutingProfil\
    eR\x0eroutingProfile\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google\
    .protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\tupdatedAt\"Z\n\x1bUpdateRoutingProfileR\
    equest\x12;\n\x0frouting_profile\x18\x01\x20\x01(\x0b2\x12.ns.RoutingPro\
    fileR\x0eroutingProfile\"-\n\x1bDeleteRoutingProfileRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x0cR\x02id\"V\n\x1aCreateDeviceProfileRequest\
    \x128\n\x0edevice_profile\x18\x01\x20\x01(\x0b2\x11.ns.DeviceProfileR\rd\
    eviceProfile\"-\n\x1bCreateDeviceProfileResponse\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x0cR\x02id\")\n\x17GetDeviceProfileRequest\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x0cR\x02id\"\xca\x01\n\x18GetDeviceProfileResponse\x128\n\
    \x0edevice_profile\x18\x01\x20\x01(\x0b2\x11.ns.DeviceProfileR\rdevicePr\
    ofile\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Times\
    tampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampR\tupdatedAt\"V\n\x1aUpdateDeviceProfileRequest\x128\n\
    \x0edevice_profile\x18\x01\x20\x01(\x0b2\x11.ns.DeviceProfileR\rdevicePr\
    ofile\",\n\x1aDeleteDeviceProfileRequest\x12\x0e\n\x02id\x18\x01\x20\x01\
    (\x0cR\x02id\"\x81\x02\n\x06Device\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\
    \x0cR\x06devEui\x12*\n\x11device_profile_id\x18\x02\x20\x01(\x0cR\x0fdev\
    iceProfileId\x12,\n\x12service_profile_id\x18\x03\x20\x01(\x0cR\x10servi\
    ceProfileId\x12,\n\x12routing_profile_id\x18\x04\x20\x01(\x0cR\x10routin\
    gProfileId\x12'\n\x10skip_f_cnt_check\x18\x05\x20\x01(\x08R\rskipFCntChe\
    ck\x12-\n\x12reference_altitude\x18\x06\x20\x01(\x01R\x11referenceAltitu\
    de\"9\n\x13CreateDeviceRequest\x12\"\n\x06device\x18\x01\x20\x01(\x0b2\n\
    .ns.DeviceR\x06device\"+\n\x10GetDeviceRequest\x12\x17\n\x07dev_eui\x18\
    \x01\x20\x01(\x0cR\x06devEui\"\xad\x01\n\x11GetDeviceResponse\x12\"\n\
    \x06device\x18\x01\x20\x01(\x0b2\n.ns.DeviceR\x06device\x129\n\ncreated_\
    at\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\
    \n\nupdated_at\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tupd\
    atedAt\"9\n\x13UpdateDeviceRequest\x12\"\n\x06device\x18\x01\x20\x01(\
    \x0b2\n.ns.DeviceR\x06device\".\n\x13DeleteDeviceRequest\x12\x17\n\x07de\
    v_eui\x18\x01\x20\x01(\x0cR\x06devEui\"\xba\x02\n\x10DeviceActivation\
    \x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\x19\n\x08dev_a\
    ddr\x18\x02\x20\x01(\x0cR\x07devAddr\x12$\n\x0fs_nwk_s_int_key\x18\x03\
    \x20\x01(\x0cR\x0bsNwkSIntKey\x12$\n\x0ff_nwk_s_int_key\x18\x04\x20\x01(\
    \x0cR\x0bfNwkSIntKey\x12!\n\rnwk_s_enc_key\x18\x05\x20\x01(\x0cR\nnwkSEn\
    cKey\x12\x18\n\x08f_cnt_up\x18\x06\x20\x01(\rR\x06fCntUp\x12\x1f\n\x0cn_\
    f_cnt_down\x18\x07\x20\x01(\rR\tnFCntDown\x12\x1f\n\x0ca_f_cnt_down\x18\
    \x08\x20\x01(\rR\taFCntDown\x12'\n\x10skip_f_cnt_check\x18\t\x20\x01(\
    \x08R\rskipFCntCheck\"Z\n\x15ActivateDeviceRequest\x12A\n\x11device_acti\
    vation\x18\x01\x20\x01(\x0b2\x14.ns.DeviceActivationR\x10deviceActivatio\
    n\"2\n\x17DeactivateDeviceRequest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\
    \x0cR\x06devEui\"5\n\x1aGetDeviceActivationRequest\x12\x17\n\x07dev_eui\
    \x18\x01\x20\x01(\x0cR\x06devEui\"`\n\x1bGetDeviceActivationResponse\x12\
    A\n\x11device_activation\x18\x01\x20\x01(\x0b2\x14.ns.DeviceActivationR\
    \x10deviceActivation\"5\n\x18GetRandomDevAddrResponse\x12\x19\n\x08dev_a\
    ddr\x18\x01\x20\x01(\x0cR\x07devAddr\"i\n\x20CreateMACCommandQueueItemRe\
    quest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\x10\n\x03\
    cid\x18\x04\x20\x01(\rR\x03cid\x12\x1a\n\x08commands\x18\x05\x20\x03(\
    \x0cR\x08commands\"\xda\x01\n\x1dSendProprietaryPayloadRequest\x12\x1f\n\
    \x0bmac_payload\x18\x01\x20\x01(\x0cR\nmacPayload\x12\x10\n\x03mic\x18\
    \x02\x20\x01(\x0cR\x03mic\x12!\n\x0cgateway_macs\x18\x03\x20\x03(\x0cR\
    \x0bgatewayMacs\x125\n\x16polarization_inversion\x18\x04\x20\x01(\x08R\
    \x15polarizationInversion\x12\x1c\n\tfrequency\x18\x05\x20\x01(\rR\tfreq\
    uency\x12\x0e\n\x02dr\x18\x06\x20\x01(\rR\x02dr\"\xcd\x01\n\x07Gateway\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12,\n\x08location\x18\x02\
    \x20\x01(\x0b2\x10.common.LocationR\x08location\x12,\n\x12gateway_profil\
    e_id\x18\x03\x20\x01(\x0cR\x10gatewayProfileId\x12(\n\x06boards\x18\x04\
    \x20\x03(\x0b2\x10.ns.GatewayBoardR\x06boards\x12,\n\x12routing_profile_\
    id\x18\x05\x20\x01(\x0cR\x10routingProfileId\"U\n\x0cGatewayBoard\x12\
    \x17\n\x07fpga_id\x18\x01\x20\x01(\x0cR\x06fpgaId\x12,\n\x12fine_timesta\
    mp_key\x18\x02\x20\x01(\x0cR\x10fineTimestampKey\"=\n\x14CreateGatewayRe\
    quest\x12%\n\x07gateway\x18\x01\x20\x01(\x0b2\x0b.ns.GatewayR\x07gateway\
    \"#\n\x11GetGatewayRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\"\
    \xaf\x02\n\x12GetGatewayResponse\x12%\n\x07gateway\x18\x01\x20\x01(\x0b2\
    \x0b.ns.GatewayR\x07gateway\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a\
    .google.protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\tupdatedAt\x12>\n\rfirst_seen_\
    at\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0bfirstSeenAt\
    \x12<\n\x0clast_seen_at\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.Timest\
    ampR\nlastSeenAt\"=\n\x14UpdateGatewayRequest\x12%\n\x07gateway\x18\x01\
    \x20\x01(\x0b2\x0b.ns.GatewayR\x07gateway\"&\n\x14DeleteGatewayRequest\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\"\x8b\x02\n\x0cGatewayStats\
    \x128\n\ttimestamp\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \ttimestamp\x12.\n\x13rx_packets_received\x18\x02\x20\x01(\x05R\x11rxPac\
    ketsReceived\x123\n\x16rx_packets_received_ok\x18\x03\x20\x01(\x05R\x13r\
    xPacketsReceivedOk\x12.\n\x13tx_packets_received\x18\x04\x20\x01(\x05R\
    \x11txPacketsReceived\x12,\n\x12tx_packets_emitted\x18\x05\x20\x01(\x05R\
    \x10txPacketsEmitted\"\xf2\x01\n\x16GetGatewayStatsRequest\x12\x1d\n\nga\
    teway_id\x18\x01\x20\x01(\x0cR\tgatewayId\x123\n\x08interval\x18\x02\x20\
    \x01(\x0e2\x17.ns.AggregationIntervalR\x08interval\x12C\n\x0fstart_times\
    tamp\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0estartTimest\
    amp\x12?\n\rend_timestamp\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.Time\
    stampR\x0cendTimestamp\"C\n\x17GetGatewayStatsResponse\x12(\n\x06result\
    \x18\x01\x20\x03(\x0b2\x10.ns.GatewayStatsR\x06result\"\xb0\x01\n\x0fDev\
    iceQueueItem\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\
    \x1f\n\x0bfrm_payload\x18\x02\x20\x01(\x0cR\nfrmPayload\x12\x13\n\x05f_c\
    nt\x18\x03\x20\x01(\rR\x04fCnt\x12\x15\n\x06f_port\x18\x04\x20\x01(\rR\
    \x05fPort\x12\x1c\n\tconfirmed\x18\x05\x20\x01(\x08R\tconfirmed\x12\x19\
    \n\x08dev_addr\x18\x06\x20\x01(\x0cR\x07devAddr\"G\n\x1cCreateDeviceQueu\
    eItemRequest\x12'\n\x04item\x18\x01\x20\x01(\x0b2\x13.ns.DeviceQueueItem\
    R\x04item\";\n\x20FlushDeviceQueueForDevEUIRequest\x12\x17\n\x07dev_eui\
    \x18\x01\x20\x01(\x0cR\x06devEui\">\n#GetDeviceQueueItemsForDevEUIReques\
    t\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\"Q\n$GetDeviceQue\
    ueItemsForDevEUIResponse\x12)\n\x05items\x18\x01\x20\x03(\x0b2\x13.ns.De\
    viceQueueItemR\x05items\">\n#GetNextDownlinkFCntForDevEUIRequest\x12\x17\
    \n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\";\n$GetNextDownlinkFCntFo\
    rDevEUIResponse\x12\x13\n\x05f_cnt\x18\x01\x20\x01(\rR\x04fCnt\"A\n\x20S\
    treamFrameLogsForGatewayRequest\x12\x1d\n\ngateway_id\x18\x01\x20\x01(\
    \x0cR\tgatewayId\"\xa8\x01\n!StreamFrameLogsForGatewayResponse\x12>\n\
    \x10uplink_frame_set\x18\x01\x20\x01(\x0b2\x12.gw.UplinkFrameSetH\0R\x0e\
    uplinkFrameSet\x12:\n\x0edownlink_frame\x18\x02\x20\x01(\x0b2\x11.gw.Dow\
    nlinkFrameH\0R\rdownlinkFrameB\x07\n\x05frame\":\n\x1fStreamFrameLogsFor\
    DeviceRequest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\"\xa7\
    \x01\n\x20StreamFrameLogsForDeviceResponse\x12>\n\x10uplink_frame_set\
    \x18\x01\x20\x01(\x0b2\x12.gw.UplinkFrameSetH\0R\x0euplinkFrameSet\x12:\
    \n\x0edownlink_frame\x18\x02\x20\x01(\x0b2\x11.gw.DownlinkFrameH\0R\rdow\
    nlinkFrameB\x07\n\x05frame\"V\n\x12GetVersionResponse\x12\x18\n\x07versi\
    on\x18\x01\x20\x01(\tR\x07version\x12&\n\x06region\x18\x02\x20\x01(\x0e2\
    \x0e.common.RegionR\x06region\"\x83\x01\n\x0eGatewayProfile\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x0cR\x02id\x12\x1a\n\x08channels\x18\x02\x20\x03\
    (\rR\x08channels\x12E\n\x0eextra_channels\x18\x03\x20\x03(\x0b2\x1e.ns.G\
    atewayProfileExtraChannelR\rextraChannels\"\xd3\x01\n\x1aGatewayProfileE\
    xtraChannel\x122\n\nmodulation\x18\x01\x20\x01(\x0e2\x12.common.Modulati\
    onR\nmodulation\x12\x1c\n\tfrequency\x18\x02\x20\x01(\rR\tfrequency\x12\
    \x1c\n\tbandwidth\x18\x03\x20\x01(\rR\tbandwidth\x12\x18\n\x07bitrate\
    \x18\x04\x20\x01(\rR\x07bitrate\x12+\n\x11spreading_factors\x18\x05\x20\
    \x03(\rR\x10spreadingFactors\"Z\n\x1bCreateGatewayProfileRequest\x12;\n\
    \x0fgateway_profile\x18\x01\x20\x01(\x0b2\x12.ns.GatewayProfileR\x0egate\
    wayProfile\".\n\x1cCreateGatewayProfileResponse\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x0cR\x02id\"*\n\x18GetGatewayProfileRequest\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\x0cR\x02id\"\xce\x01\n\x19GetGatewayProfileResponse\
    \x12;\n\x0fgateway_profile\x18\x01\x20\x01(\x0b2\x12.ns.GatewayProfileR\
    \x0egatewayProfile\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\tupdatedAt\"Z\n\x1bUpdateGatewayProfileR\
    equest\x12;\n\x0fgateway_profile\x18\x01\x20\x01(\x0b2\x12.ns.GatewayPro\
    fileR\x0egatewayProfile\"-\n\x1bDeleteGatewayProfileRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\x0cR\x02id\"\xda\x02\n\x0eMulticastGroup\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12\x17\n\x07mc_addr\x18\x02\x20\
    \x01(\x0cR\x06mcAddr\x12\x1f\n\x0cmc_nwk_s_key\x18\x03\x20\x01(\x0cR\tmc\
    NwkSKey\x12\x13\n\x05f_cnt\x18\x04\x20\x01(\rR\x04fCnt\x125\n\ngroup_typ\
    e\x18\x05\x20\x01(\x0e2\x16.ns.MulticastGroupTypeR\tgroupType\x12\x0e\n\
    \x02dr\x18\x06\x20\x01(\rR\x02dr\x12\x1c\n\tfrequency\x18\x07\x20\x01(\r\
    R\tfrequency\x12(\n\x10ping_slot_period\x18\x08\x20\x01(\rR\x0epingSlotP\
    eriod\x12,\n\x12service_profile_id\x18\t\x20\x01(\x0cR\x10serviceProfile\
    Id\x12,\n\x12routing_profile_id\x18\n\x20\x01(\x0cR\x10routingProfileId\
    \"Z\n\x1bCreateMulticastGroupRequest\x12;\n\x0fmulticast_group\x18\x01\
    \x20\x01(\x0b2\x12.ns.MulticastGroupR\x0emulticastGroup\".\n\x1cCreateMu\
    lticastGroupResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\"*\n\
    \x18GetMulticastGroupRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\
    \"\xce\x01\n\x19GetMulticastGroupResponse\x12;\n\x0fmulticast_group\x18\
    \x01\x20\x01(\x0b2\x12.ns.MulticastGroupR\x0emulticastGroup\x129\n\ncrea\
    ted_at\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tcreatedAt\
    \x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \tupdatedAt\"Z\n\x1bUpdateMulticastGroupRequest\x12;\n\x0fmulticast_grou\
    p\x18\x01\x20\x01(\x0b2\x12.ns.MulticastGroupR\x0emulticastGroup\"-\n\
    \x1bDeleteMulticastGroupRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\
    \x02id\"i\n\x20AddDeviceToMulticastGroupRequest\x12\x17\n\x07dev_eui\x18\
    \x01\x20\x01(\x0cR\x06devEui\x12,\n\x12multicast_group_id\x18\x02\x20\
    \x01(\x0cR\x10multicastGroupId\"n\n%RemoveDeviceFromMulticastGroupReques\
    t\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12,\n\x12multica\
    st_group_id\x18\x02\x20\x01(\x0cR\x10multicastGroupId\"\x8f\x01\n\x12Mul\
    ticastQueueItem\x12,\n\x12multicast_group_id\x18\x01\x20\x01(\x0cR\x10mu\
    lticastGroupId\x12\x13\n\x05f_cnt\x18\x02\x20\x01(\rR\x04fCnt\x12\x15\n\
    \x06f_port\x18\x03\x20\x01(\rR\x05fPort\x12\x1f\n\x0bfrm_payload\x18\x04\
    \x20\x01(\x0cR\nfrmPayload\"l\n\x20EnqueueMulticastQueueItemRequest\x12H\
    \n\x14multicast_queue_item\x18\x01\x20\x01(\x0b2\x16.ns.MulticastQueueIt\
    emR\x12multicastQueueItem\"[\n+FlushMulticastQueueForMulticastGroupReque\
    st\x12,\n\x12multicast_group_id\x18\x01\x20\x01(\x0cR\x10multicastGroupI\
    d\"^\n.GetMulticastQueueItemsForMulticastGroupRequest\x12,\n\x12multicas\
    t_group_id\x18\x01\x20\x01(\x0cR\x10multicastGroupId\"}\n/GetMulticastQu\
    eueItemsForMulticastGroupResponse\x12J\n\x15multicast_queue_items\x18\
    \x01\x20\x03(\x0b2\x16.ns.MulticastQueueItemR\x13multicastQueueItems*\
    \x1c\n\x08RXWindow\x12\x07\n\x03RX1\x10\0\x12\x07\n\x03RX2\x10\x01*l\n\
    \x13AggregationInterval\x12\n\n\x06SECOND\x10\0\x12\n\n\x06MINUTE\x10\
    \x01\x12\x08\n\x04HOUR\x10\x02\x12\x07\n\x03DAY\x10\x03\x12\x08\n\x04WEE\
    K\x10\x04\x12\t\n\x05MONTH\x10\x05\x12\x0b\n\x07QUARTER\x10\x06\x12\x08\
    \n\x04YEAR\x10\x07*.\n\x12MulticastGroupType\x12\x0b\n\x07CLASS_C\x10\0\
    \x12\x0b\n\x07CLASS_B\x10\x012\xec\x1f\n\x14NetworkServerService\x12[\n\
    \x14CreateServiceProfile\x12\x1f.ns.CreateServiceProfileRequest\x1a\x20.\
    ns.CreateServiceProfileResponse\"\0\x12R\n\x11GetServiceProfile\x12\x1c.\
    ns.GetServiceProfileRequest\x1a\x1d.ns.GetServiceProfileResponse\"\0\x12\
    Q\n\x14UpdateServiceProfile\x12\x1f.ns.UpdateServiceProfileRequest\x1a\
    \x16.google.protobuf.Empty\"\0\x12Q\n\x14DeleteServiceProfile\x12\x1f.ns\
    .DeleteServiceProfileRequest\x1a\x16.google.protobuf.Empty\"\0\x12[\n\
    \x14CreateRoutingProfile\x12\x1f.ns.CreateRoutingProfileRequest\x1a\x20.\
    ns.CreateRoutingProfileResponse\"\0\x12R\n\x11GetRoutingProfile\x12\x1c.\
    ns.GetRoutingProfileRequest\x1a\x1d.ns.GetRoutingProfileResponse\"\0\x12\
    Q\n\x14UpdateRoutingProfile\x12\x1f.ns.UpdateRoutingProfileRequest\x1a\
    \x16.google.protobuf.Empty\"\0\x12Q\n\x14DeleteRoutingProfile\x12\x1f.ns\
    .DeleteRoutingProfileRequest\x1a\x16.google.protobuf.Empty\"\0\x12X\n\
    \x13CreateDeviceProfile\x12\x1e.ns.CreateDeviceProfileRequest\x1a\x1f.ns\
    .CreateDeviceProfileResponse\"\0\x12O\n\x10GetDeviceProfile\x12\x1b.ns.G\
    etDeviceProfileRequest\x1a\x1c.ns.GetDeviceProfileResponse\"\0\x12O\n\
    \x13UpdateDeviceProfile\x12\x1e.ns.UpdateDeviceProfileRequest\x1a\x16.go\
    ogle.protobuf.Empty\"\0\x12O\n\x13DeleteDeviceProfile\x12\x1e.ns.DeleteD\
    eviceProfileRequest\x1a\x16.google.protobuf.Empty\"\0\x12A\n\x0cCreateDe\
    vice\x12\x17.ns.CreateDeviceRequest\x1a\x16.google.protobuf.Empty\"\0\
    \x12:\n\tGetDevice\x12\x14.ns.GetDeviceRequest\x1a\x15.ns.GetDeviceRespo\
    nse\"\0\x12A\n\x0cUpdateDevice\x12\x17.ns.UpdateDeviceRequest\x1a\x16.go\
    ogle.protobuf.Empty\"\0\x12A\n\x0cDeleteDevice\x12\x17.ns.DeleteDeviceRe\
    quest\x1a\x16.google.protobuf.Empty\"\0\x12E\n\x0eActivateDevice\x12\x19\
    .ns.ActivateDeviceRequest\x1a\x16.google.protobuf.Empty\"\0\x12I\n\x10De\
    activateDevice\x12\x1b.ns.DeactivateDeviceRequest\x1a\x16.google.protobu\
    f.Empty\"\0\x12X\n\x13GetDeviceActivation\x12\x1e.ns.GetDeviceActivation\
    Request\x1a\x1f.ns.GetDeviceActivationResponse\"\0\x12S\n\x15CreateDevic\
    eQueueItem\x12\x20.ns.CreateDeviceQueueItemRequest\x1a\x16.google.protob\
    uf.Empty\"\0\x12[\n\x19FlushDeviceQueueForDevEUI\x12$.ns.FlushDeviceQueu\
    eForDevEUIRequest\x1a\x16.google.protobuf.Empty\"\0\x12s\n\x1cGetDeviceQ\
    ueueItemsForDevEUI\x12'.ns.GetDeviceQueueItemsForDevEUIRequest\x1a(.ns.G\
    etDeviceQueueItemsForDevEUIResponse\"\0\x12s\n\x1cGetNextDownlinkFCntFor\
    DevEUI\x12'.ns.GetNextDownlinkFCntForDevEUIRequest\x1a(.ns.GetNextDownli\
    nkFCntForDevEUIResponse\"\0\x12J\n\x10GetRandomDevAddr\x12\x16.google.pr\
    otobuf.Empty\x1a\x1c.ns.GetRandomDevAddrResponse\"\0\x12[\n\x19CreateMAC\
    CommandQueueItem\x12$.ns.CreateMACCommandQueueItemRequest\x1a\x16.google\
    .protobuf.Empty\"\0\x12U\n\x16SendProprietaryPayload\x12!.ns.SendProprie\
    taryPayloadRequest\x1a\x16.google.protobuf.Empty\"\0\x12C\n\rCreateGatew\
    ay\x12\x18.ns.CreateGatewayRequest\x1a\x16.google.protobuf.Empty\"\0\x12\
    =\n\nGetGateway\x12\x15.ns.GetGatewayRequest\x1a\x16.ns.GetGatewayRespon\
    se\"\0\x12C\n\rUpdateGateway\x12\x18.ns.UpdateGatewayRequest\x1a\x16.goo\
    gle.protobuf.Empty\"\0\x12C\n\rDeleteGateway\x12\x18.ns.DeleteGatewayReq\
    uest\x1a\x16.google.protobuf.Empty\"\0\x12[\n\x14CreateGatewayProfile\
    \x12\x1f.ns.CreateGatewayProfileRequest\x1a\x20.ns.CreateGatewayProfileR\
    esponse\"\0\x12R\n\x11GetGatewayProfile\x12\x1c.ns.GetGatewayProfileRequ\
    est\x1a\x1d.ns.GetGatewayProfileResponse\"\0\x12Q\n\x14UpdateGatewayProf\
    ile\x12\x1f.ns.UpdateGatewayProfileRequest\x1a\x16.google.protobuf.Empty\
    \"\0\x12Q\n\x14DeleteGatewayProfile\x12\x1f.ns.DeleteGatewayProfileReque\
    st\x1a\x16.google.protobuf.Empty\"\0\x12L\n\x0fGetGatewayStats\x12\x1a.n\
    s.GetGatewayStatsRequest\x1a\x1b.ns.GetGatewayStatsResponse\"\0\x12l\n\
    \x19StreamFrameLogsForGateway\x12$.ns.StreamFrameLogsForGatewayRequest\
    \x1a%.ns.StreamFrameLogsForGatewayResponse\"\00\x01\x12i\n\x18StreamFram\
    eLogsForDevice\x12#.ns.StreamFrameLogsForDeviceRequest\x1a$.ns.StreamFra\
    meLogsForDeviceResponse\"\00\x01\x12[\n\x14CreateMulticastGroup\x12\x1f.\
    ns.CreateMulticastGroupRequest\x1a\x20.ns.CreateMulticastGroupResponse\"\
    \0\x12R\n\x11GetMulticastGroup\x12\x1c.ns.GetMulticastGroupRequest\x1a\
    \x1d.ns.GetMulticastGroupResponse\"\0\x12Q\n\x14UpdateMulticastGroup\x12\
    \x1f.ns.UpdateMulticastGroupRequest\x1a\x16.google.protobuf.Empty\"\0\
    \x12Q\n\x14DeleteMulticastGroup\x12\x1f.ns.DeleteMulticastGroupRequest\
    \x1a\x16.google.protobuf.Empty\"\0\x12[\n\x19AddDeviceToMulticastGroup\
    \x12$.ns.AddDeviceToMulticastGroupRequest\x1a\x16.google.protobuf.Empty\
    \"\0\x12e\n\x1eRemoveDeviceFromMulticastGroup\x12).ns.RemoveDeviceFromMu\
    lticastGroupRequest\x1a\x16.google.protobuf.Empty\"\0\x12[\n\x19EnqueueM\
    ulticastQueueItem\x12$.ns.EnqueueMulticastQueueItemRequest\x1a\x16.googl\
    e.protobuf.Empty\"\0\x12q\n$FlushMulticastQueueForMulticastGroup\x12/.ns\
    .FlushMulticastQueueForMulticastGroupRequest\x1a\x16.google.protobuf.Emp\
    ty\"\0\x12\x94\x01\n'GetMulticastQueueItemsForMulticastGroup\x122.ns.Get\
    MulticastQueueItemsForMulticastGroupRequest\x1a3.ns.GetMulticastQueueIte\
    msForMulticastGroupResponse\"\0\x12>\n\nGetVersion\x12\x16.google.protob\
    uf.Empty\x1a\x16.ns.GetVersionResponse\"\0B&Z$github.com/brocaar/chirpst\
    ack-api/nsJ\x96\xcf\x01\n\x07\x12\x05\0\0\xb2\x06\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\n\n\x08\n\x01\x08\x12\
    \x03\x04\0;\n\t\n\x02\x08\x0b\x12\x03\x04\0;\n\t\n\x02\x03\0\x12\x03\x06\
    \x07(\n\t\n\x02\x03\x01\x12\x03\x07\x07$\n\t\n\x02\x03\x02\x12\x03\x08\
    \x07\x1c\n\t\n\x02\x03\x03\x12\x03\t\x07\x14\n\t\n\x02\x03\x04\x12\x03\n\
    \x07\x1a\nL\n\x02\x06\0\x12\x05\x0e\0\x9e\x01\x01\x1a?\x20NetworkServerS\
    ervice\x20provides\x20the\x20network-server\x20API\x20methods.\n\n\n\n\
    \x03\x06\0\x01\x12\x03\x0e\x08\x1c\nF\n\x04\x06\0\x02\0\x12\x03\x10\x04c\
    \x1a9\x20CreateServiceProfile\x20creates\x20the\x20given\x20service-prof\
    ile.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x10\x08\x1c\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x10\x1d8\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x10C_\nS\
    \n\x04\x06\0\x02\x01\x12\x03\x13\x04Z\x1aF\x20GetServiceProfile\x20retur\
    ns\x20the\x20service-profile\x20matching\x20the\x20given\x20id.\n\n\x0c\
    \n\x05\x06\0\x02\x01\x01\x12\x03\x13\x08\x19\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03\x13\x1a2\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x13=V\nF\n\
    \x04\x06\0\x02\x02\x12\x03\x16\x04\\\x1a9\x20UpdateServiceProfile\x20upd\
    ates\x20the\x20given\x20service-profile.\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\x16\x08\x1c\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x16\x1d8\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x16CX\nV\n\x04\x06\0\x02\x03\x12\
    \x03\x19\x04\\\x1aI\x20DeleteServiceProfile\x20deletes\x20the\x20service\
    -profile\x20matching\x20the\x20given\x20id.\n\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03\x19\x08\x1c\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x19\x1d8\
    \n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x19CX\nF\n\x04\x06\0\x02\x04\x12\
    \x03\x1c\x04c\x1a9\x20CreateRoutingProfile\x20creates\x20the\x20given\
    \x20routing-profile.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x1c\x08\x1c\
    \n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x1c\x1d8\n\x0c\n\x05\x06\0\x02\
    \x04\x03\x12\x03\x1cC_\nS\n\x04\x06\0\x02\x05\x12\x03\x1f\x04Z\x1aF\x20G\
    etRoutingProfile\x20returns\x20the\x20routing-profile\x20matching\x20the\
    \x20given\x20id.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\x1f\x08\x19\n\
    \x0c\n\x05\x06\0\x02\x05\x02\x12\x03\x1f\x1a2\n\x0c\n\x05\x06\0\x02\x05\
    \x03\x12\x03\x1f=V\nF\n\x04\x06\0\x02\x06\x12\x03\"\x04\\\x1a9\x20Update\
    RoutingProfile\x20updates\x20the\x20given\x20routing-profile.\n\n\x0c\n\
    \x05\x06\0\x02\x06\x01\x12\x03\"\x08\x1c\n\x0c\n\x05\x06\0\x02\x06\x02\
    \x12\x03\"\x1d8\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\"CX\nV\n\x04\x06\0\
    \x02\x07\x12\x03%\x04\\\x1aI\x20DeleteRoutingProfile\x20deletes\x20the\
    \x20routing-profile\x20matching\x20the\x20given\x20id.\n\n\x0c\n\x05\x06\
    \0\x02\x07\x01\x12\x03%\x08\x1c\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03%\
    \x1d8\n\x0c\n\x05\x06\0\x02\x07\x03\x12\x03%CX\nD\n\x04\x06\0\x02\x08\
    \x12\x03(\x04`\x1a7\x20CreateDeviceProfile\x20creates\x20the\x20given\
    \x20device-profile.\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03(\x08\x1b\n\
    \x0c\n\x05\x06\0\x02\x08\x02\x12\x03(\x1c6\n\x0c\n\x05\x06\0\x02\x08\x03\
    \x12\x03(A\\\nQ\n\x04\x06\0\x02\t\x12\x03+\x04W\x1aD\x20GetDeviceProfile\
    \x20returns\x20the\x20device-profile\x20matching\x20the\x20given\x20id.\
    \n\n\x0c\n\x05\x06\0\x02\t\x01\x12\x03+\x08\x18\n\x0c\n\x05\x06\0\x02\t\
    \x02\x12\x03+\x190\n\x0c\n\x05\x06\0\x02\t\x03\x12\x03+;S\nD\n\x04\x06\0\
    \x02\n\x12\x03.\x04Z\x1a7\x20UpdateDeviceProfile\x20updates\x20the\x20gi\
    ven\x20device-profile.\n\n\x0c\n\x05\x06\0\x02\n\x01\x12\x03.\x08\x1b\n\
    \x0c\n\x05\x06\0\x02\n\x02\x12\x03.\x1c6\n\x0c\n\x05\x06\0\x02\n\x03\x12\
    \x03.AV\nT\n\x04\x06\0\x02\x0b\x12\x031\x04Z\x1aG\x20DeleteDeviceProfile\
    \x20deletes\x20the\x20device-profile\x20matching\x20the\x20given\x20id.\
    \n\n\x0c\n\x05\x06\0\x02\x0b\x01\x12\x031\x08\x1b\n\x0c\n\x05\x06\0\x02\
    \x0b\x02\x12\x031\x1c6\n\x0c\n\x05\x06\0\x02\x0b\x03\x12\x031AV\n5\n\x04\
    \x06\0\x02\x0c\x12\x034\x04L\x1a(\x20CreateDevice\x20creates\x20the\x20g\
    iven\x20device.\n\n\x0c\n\x05\x06\0\x02\x0c\x01\x12\x034\x08\x14\n\x0c\n\
    \x05\x06\0\x02\x0c\x02\x12\x034\x15(\n\x0c\n\x05\x06\0\x02\x0c\x03\x12\
    \x0343H\nF\n\x04\x06\0\x02\r\x12\x037\x04B\x1a9\x20GetDevice\x20returns\
    \x20the\x20device\x20matching\x20the\x20given\x20DevEUI.\n\n\x0c\n\x05\
    \x06\0\x02\r\x01\x12\x037\x08\x11\n\x0c\n\x05\x06\0\x02\r\x02\x12\x037\
    \x12\"\n\x0c\n\x05\x06\0\x02\r\x03\x12\x037->\n5\n\x04\x06\0\x02\x0e\x12\
    \x03:\x04L\x1a(\x20UpdateDevice\x20updates\x20the\x20given\x20device.\n\
    \n\x0c\n\x05\x06\0\x02\x0e\x01\x12\x03:\x08\x14\n\x0c\n\x05\x06\0\x02\
    \x0e\x02\x12\x03:\x15(\n\x0c\n\x05\x06\0\x02\x0e\x03\x12\x03:3H\nI\n\x04\
    \x06\0\x02\x0f\x12\x03=\x04L\x1a<\x20DeleteDevice\x20deletes\x20the\x20d\
    evice\x20matching\x20the\x20given\x20DevEUI.\n\n\x0c\n\x05\x06\0\x02\x0f\
    \x01\x12\x03=\x08\x14\n\x0c\n\x05\x06\0\x02\x0f\x02\x12\x03=\x15(\n\x0c\
    \n\x05\x06\0\x02\x0f\x03\x12\x03=3H\n7\n\x04\x06\0\x02\x10\x12\x03@\x04P\
    \x1a*\x20ActivateDevice\x20activates\x20a\x20device\x20(ABP).\n\n\x0c\n\
    \x05\x06\0\x02\x10\x01\x12\x03@\x08\x16\n\x0c\n\x05\x06\0\x02\x10\x02\
    \x12\x03@\x17,\n\x0c\n\x05\x06\0\x02\x10\x03\x12\x03@7L\n6\n\x04\x06\0\
    \x02\x11\x12\x03C\x04T\x1a)\x20DeactivateDevice\x20de-activates\x20a\x20\
    device.\n\n\x0c\n\x05\x06\0\x02\x11\x01\x12\x03C\x08\x18\n\x0c\n\x05\x06\
    \0\x02\x11\x02\x12\x03C\x190\n\x0c\n\x05\x06\0\x02\x11\x03\x12\x03C;P\nI\
    \n\x04\x06\0\x02\x12\x12\x03F\x04`\x1a<\x20GetDeviceActivation\x20return\
    s\x20the\x20device\x20activation\x20details.\n\n\x0c\n\x05\x06\0\x02\x12\
    \x01\x12\x03F\x08\x1b\n\x0c\n\x05\x06\0\x02\x12\x02\x12\x03F\x1c6\n\x0c\
    \n\x05\x06\0\x02\x12\x03\x12\x03FA\\\nI\n\x04\x06\0\x02\x13\x12\x03I\x04\
    ^\x1a<\x20CreateDeviceQueueItem\x20creates\x20the\x20given\x20device-que\
    ue\x20item.\n\n\x0c\n\x05\x06\0\x02\x13\x01\x12\x03I\x08\x1d\n\x0c\n\x05\
    \x06\0\x02\x13\x02\x12\x03I\x1e:\n\x0c\n\x05\x06\0\x02\x13\x03\x12\x03IE\
    Z\nW\n\x04\x06\0\x02\x14\x12\x03L\x04f\x1aJ\x20FlushDeviceQueueForDevEUI\
    \x20flushes\x20the\x20device-queue\x20for\x20the\x20given\x20DevEUI.\n\n\
    \x0c\n\x05\x06\0\x02\x14\x01\x12\x03L\x08!\n\x0c\n\x05\x06\0\x02\x14\x02\
    \x12\x03L\"B\n\x0c\n\x05\x06\0\x02\x14\x03\x12\x03LMb\n`\n\x04\x06\0\x02\
    \x15\x12\x03O\x04{\x1aS\x20GetDeviceQueueItemsForDevEUI\x20returns\x20al\
    l\x20device-queue\x20items\x20for\x20the\x20given\x20DevEUI.\n\n\x0c\n\
    \x05\x06\0\x02\x15\x01\x12\x03O\x08$\n\x0c\n\x05\x06\0\x02\x15\x02\x12\
    \x03O%H\n\x0c\n\x05\x06\0\x02\x15\x03\x12\x03OSw\n\xa2\x01\n\x04\x06\0\
    \x02\x16\x12\x03S\x04{\x1a\x94\x01\x20GetNextDownlinkFCntForDevEUI\x20re\
    turns\x20the\x20next\x20FCnt\x20that\x20must\x20be\x20used.\n\x20This\
    \x20also\x20takes\x20device-queue\x20items\x20for\x20the\x20given\x20Dev\
    EUI\x20into\x20consideration.\n\n\x0c\n\x05\x06\0\x02\x16\x01\x12\x03S\
    \x08$\n\x0c\n\x05\x06\0\x02\x16\x02\x12\x03S%H\n\x0c\n\x05\x06\0\x02\x16\
    \x03\x12\x03SSw\n^\n\x04\x06\0\x02\x17\x12\x03V\x04U\x1aQ\x20GetRandomDe\
    vAddr\x20returns\x20a\x20random\x20DevAddr\x20taking\x20the\x20NwkID\x20\
    prefix\x20into\x20account.\n\n\x0c\n\x05\x06\0\x02\x17\x01\x12\x03V\x08\
    \x18\n\x0c\n\x05\x06\0\x02\x17\x02\x12\x03V\x19.\n\x0c\n\x05\x06\0\x02\
    \x17\x03\x12\x03V9Q\nT\n\x04\x06\0\x02\x18\x12\x03Y\x04f\x1aG\x20CreateM\
    ACCommandQueueItem\x20adds\x20the\x20downlink\x20mac-command\x20to\x20th\
    e\x20queue.\n\n\x0c\n\x05\x06\0\x02\x18\x01\x12\x03Y\x08!\n\x0c\n\x05\
    \x06\0\x02\x18\x02\x12\x03Y\"B\n\x0c\n\x05\x06\0\x02\x18\x03\x12\x03YMb\
    \nb\n\x04\x06\0\x02\x19\x12\x03\\\x04`\x1aU\x20SendProprietaryPayload\
    \x20send\x20a\x20payload\x20using\x20the\x20'Proprietary'\x20LoRaWAN\x20\
    message-type.\n\n\x0c\n\x05\x06\0\x02\x19\x01\x12\x03\\\x08\x1e\n\x0c\n\
    \x05\x06\0\x02\x19\x02\x12\x03\\\x1f<\n\x0c\n\x05\x06\0\x02\x19\x03\x12\
    \x03\\G\\\n7\n\x04\x06\0\x02\x1a\x12\x03_\x04N\x1a*\x20CreateGateway\x20\
    creates\x20the\x20given\x20gateway.\n\n\x0c\n\x05\x06\0\x02\x1a\x01\x12\
    \x03_\x08\x15\n\x0c\n\x05\x06\0\x02\x1a\x02\x12\x03_\x16*\n\x0c\n\x05\
    \x06\0\x02\x1a\x03\x12\x03_5J\n@\n\x04\x06\0\x02\x1b\x12\x03b\x04E\x1a3\
    \x20GetGateway\x20returns\x20data\x20for\x20a\x20particular\x20gateway.\
    \n\n\x0c\n\x05\x06\0\x02\x1b\x01\x12\x03b\x08\x12\n\x0c\n\x05\x06\0\x02\
    \x1b\x02\x12\x03b\x13$\n\x0c\n\x05\x06\0\x02\x1b\x03\x12\x03b/A\n9\n\x04\
    \x06\0\x02\x1c\x12\x03e\x04N\x1a,\x20UpdateGateway\x20updates\x20an\x20e\
    xisting\x20gateway.\n\n\x0c\n\x05\x06\0\x02\x1c\x01\x12\x03e\x08\x15\n\
    \x0c\n\x05\x06\0\x02\x1c\x02\x12\x03e\x16*\n\x0c\n\x05\x06\0\x02\x1c\x03\
    \x12\x03e5J\n/\n\x04\x06\0\x02\x1d\x12\x03h\x04N\x1a\"\x20DeleteGateway\
    \x20deletes\x20a\x20gateway.\n\n\x0c\n\x05\x06\0\x02\x1d\x01\x12\x03h\
    \x08\x15\n\x0c\n\x05\x06\0\x02\x1d\x02\x12\x03h\x16*\n\x0c\n\x05\x06\0\
    \x02\x1d\x03\x12\x03h5J\nF\n\x04\x06\0\x02\x1e\x12\x03k\x04c\x1a9\x20Cre\
    ateGatewayProfile\x20creates\x20the\x20given\x20gateway-profile.\n\n\x0c\
    \n\x05\x06\0\x02\x1e\x01\x12\x03k\x08\x1c\n\x0c\n\x05\x06\0\x02\x1e\x02\
    \x12\x03k\x1d8\n\x0c\n\x05\x06\0\x02\x1e\x03\x12\x03kC_\nI\n\x04\x06\0\
    \x02\x1f\x12\x03n\x04Z\x1a<\x20GetGatewayProfile\x20returns\x20the\x20ga\
    teway-profile\x20given\x20an\x20id.\n\n\x0c\n\x05\x06\0\x02\x1f\x01\x12\
    \x03n\x08\x19\n\x0c\n\x05\x06\0\x02\x1f\x02\x12\x03n\x1a2\n\x0c\n\x05\
    \x06\0\x02\x1f\x03\x12\x03n=V\nF\n\x04\x06\0\x02\x20\x12\x03q\x04\\\x1a9\
    \x20UpdateGatewayProfile\x20updates\x20the\x20given\x20gateway-profile.\
    \n\n\x0c\n\x05\x06\0\x02\x20\x01\x12\x03q\x08\x1c\n\x0c\n\x05\x06\0\x02\
    \x20\x02\x12\x03q\x1d8\n\x0c\n\x05\x06\0\x02\x20\x03\x12\x03qCX\nT\n\x04\
    \x06\0\x02!\x12\x03t\x04\\\x1aG\x20DeleteGatewayProfile\x20deletes\x20th\
    e\x20gateway-profile\x20matching\x20a\x20given\x20id.\n\n\x0c\n\x05\x06\
    \0\x02!\x01\x12\x03t\x08\x1c\n\x0c\n\x05\x06\0\x02!\x02\x12\x03t\x1d8\n\
    \x0c\n\x05\x06\0\x02!\x03\x12\x03tCX\n\x81\x01\n\x04\x06\0\x02\"\x12\x03\
    x\x04T\x1at\x20GetGatewayStats\x20returns\x20stats\x20of\x20an\x20existi\
    ng\x20gateway.\n\x20Deprecated\x20(stats\x20are\x20forwarded\x20to\x20Ap\
    plication\x20Server\x20API).\n\n\x0c\n\x05\x06\0\x02\"\x01\x12\x03x\x08\
    \x17\n\x0c\n\x05\x06\0\x02\"\x02\x12\x03x\x18.\n\x0c\n\x05\x06\0\x02\"\
    \x03\x12\x03x9P\n^\n\x04\x06\0\x02#\x12\x03{\x04y\x1aQ\x20StreamFrameLog\
    sForGateway\x20returns\x20a\x20stream\x20of\x20frames\x20seen\x20by\x20t\
    he\x20given\x20gateway.\n\n\x0c\n\x05\x06\0\x02#\x01\x12\x03{\x08!\n\x0c\
    \n\x05\x06\0\x02#\x02\x12\x03{\"B\n\x0c\n\x05\x06\0\x02#\x06\x12\x03{MS\
    \n\x0c\n\x05\x06\0\x02#\x03\x12\x03{Tu\n\\\n\x04\x06\0\x02$\x12\x03~\x04\
    v\x1aO\x20StreamFrameLogsForDevice\x20returns\x20a\x20stream\x20of\x20fr\
    ames\x20seen\x20by\x20the\x20given\x20device.\n\n\x0c\n\x05\x06\0\x02$\
    \x01\x12\x03~\x08\x20\n\x0c\n\x05\x06\0\x02$\x02\x12\x03~!@\n\x0c\n\x05\
    \x06\0\x02$\x06\x12\x03~KQ\n\x0c\n\x05\x06\0\x02$\x03\x12\x03~Rr\nG\n\
    \x04\x06\0\x02%\x12\x04\x81\x01\x04c\x1a9\x20CreateMulticastGroup\x20cre\
    ates\x20the\x20given\x20multicast-group.\n\n\r\n\x05\x06\0\x02%\x01\x12\
    \x04\x81\x01\x08\x1c\n\r\n\x05\x06\0\x02%\x02\x12\x04\x81\x01\x1d8\n\r\n\
    \x05\x06\0\x02%\x03\x12\x04\x81\x01C_\nJ\n\x04\x06\0\x02&\x12\x04\x84\
    \x01\x04Z\x1a<\x20GetMulticastGroup\x20returns\x20the\x20multicast-group\
    \x20given\x20an\x20id.\n\n\r\n\x05\x06\0\x02&\x01\x12\x04\x84\x01\x08\
    \x19\n\r\n\x05\x06\0\x02&\x02\x12\x04\x84\x01\x1a2\n\r\n\x05\x06\0\x02&\
    \x03\x12\x04\x84\x01=V\nG\n\x04\x06\0\x02'\x12\x04\x87\x01\x04\\\x1a9\
    \x20UpdateMulticastGroup\x20updates\x20the\x20given\x20multicast-group.\
    \n\n\r\n\x05\x06\0\x02'\x01\x12\x04\x87\x01\x08\x1c\n\r\n\x05\x06\0\x02'\
    \x02\x12\x04\x87\x01\x1d8\n\r\n\x05\x06\0\x02'\x03\x12\x04\x87\x01CX\nK\
    \n\x04\x06\0\x02(\x12\x04\x8a\x01\x04\\\x1a=\x20DeleteMulticastGroup\x20\
    deletes\x20a\x20multicast-group\x20given\x20an\x20id.\n\n\r\n\x05\x06\0\
    \x02(\x01\x12\x04\x8a\x01\x08\x1c\n\r\n\x05\x06\0\x02(\x02\x12\x04\x8a\
    \x01\x1d8\n\r\n\x05\x06\0\x02(\x03\x12\x04\x8a\x01CX\n]\n\x04\x06\0\x02)\
    \x12\x04\x8d\x01\x04f\x1aO\x20AddDeviceToMulticastGroup\x20adds\x20the\
    \x20given\x20device\x20to\x20the\x20given\x20multicast-group.\n\n\r\n\
    \x05\x06\0\x02)\x01\x12\x04\x8d\x01\x08!\n\r\n\x05\x06\0\x02)\x02\x12\
    \x04\x8d\x01\"B\n\r\n\x05\x06\0\x02)\x03\x12\x04\x8d\x01Mb\ng\n\x04\x06\
    \0\x02*\x12\x04\x90\x01\x04p\x1aY\x20RemoveDeviceFromMulticastGroup\x20r\
    emoves\x20the\x20given\x20device\x20from\x20the\x20given\x20multicast-gr\
    oup.\n\n\r\n\x05\x06\0\x02*\x01\x12\x04\x90\x01\x08&\n\r\n\x05\x06\0\x02\
    *\x02\x12\x04\x90\x01'L\n\r\n\x05\x06\0\x02*\x03\x12\x04\x90\x01Wl\n\x85\
    \x01\n\x04\x06\0\x02+\x12\x04\x94\x01\x04f\x1aw\x20EnqueueMulticastQueue\
    Item\x20enqueues\x20the\x20given\x20multicast\x20queue-item\x20and\n\x20\
    increments\x20the\x20frame-counter\x20after\x20enqueueing.\n\n\r\n\x05\
    \x06\0\x02+\x01\x12\x04\x94\x01\x08!\n\r\n\x05\x06\0\x02+\x02\x12\x04\
    \x94\x01\"B\n\r\n\x05\x06\0\x02+\x03\x12\x04\x94\x01Mb\ns\n\x04\x06\0\
    \x02,\x12\x04\x97\x01\x04|\x1ae\x20FlushMulticastQueueForMulticastGroup\
    \x20flushes\x20the\x20multicast\x20device-queue\x20given\x20a\x20multica\
    st-group\x20id.\n\n\r\n\x05\x06\0\x02,\x01\x12\x04\x97\x01\x08,\n\r\n\
    \x05\x06\0\x02,\x02\x12\x04\x97\x01-X\n\r\n\x05\x06\0\x02,\x03\x12\x04\
    \x97\x01cx\nl\n\x04\x06\0\x02-\x12\x05\x9a\x01\x04\x9c\x01\x1a]\x20GetMu\
    lticastQueueItemsForMulticastGroup\x20returns\x20the\x20queue-items\x20g\
    iven\x20a\x20multicast-group\x20id.\n\n\r\n\x05\x06\0\x02-\x01\x12\x04\
    \x9a\x01\x08/\n\r\n\x05\x06\0\x02-\x02\x12\x04\x9a\x010^\n\x0e\n\x05\x06\
    \0\x02-\x03\x12\x05\x9a\x01i\x98\x01\nI\n\x04\x06\0\x02.\x12\x04\x9d\x01\
    \x04I\x1a;\x20GetVersion\x20returns\x20the\x20ChirpStack\x20Network\x20S\
    erver\x20version.\n\n\r\n\x05\x06\0\x02.\x01\x12\x04\x9d\x01\x08\x12\n\r\
    \n\x05\x06\0\x02.\x02\x12\x04\x9d\x01\x13(\n\r\n\x05\x06\0\x02.\x03\x12\
    \x04\x9d\x013E\n\x0c\n\x02\x05\0\x12\x06\xa0\x01\0\xa6\x01\x01\n\x0b\n\
    \x03\x05\0\x01\x12\x04\xa0\x01\x05\r\n\x20\n\x04\x05\0\x02\0\x12\x04\xa2\
    \x01\x04\x0c\x1a\x12\x20Receive\x20window\x201\n\n\r\n\x05\x05\0\x02\0\
    \x01\x12\x04\xa2\x01\x04\x07\n\r\n\x05\x05\0\x02\0\x02\x12\x04\xa2\x01\n\
    \x0b\n\x20\n\x04\x05\0\x02\x01\x12\x04\xa5\x01\x04\x0c\x1a\x12\x20Receiv\
    e\x20window\x202\n\n\r\n\x05\x05\0\x02\x01\x01\x12\x04\xa5\x01\x04\x07\n\
    \r\n\x05\x05\0\x02\x01\x02\x12\x04\xa5\x01\n\x0b\n\x0c\n\x02\x04\0\x12\
    \x06\xa8\x01\0\xab\x01\x01\n\x0b\n\x03\x04\0\x01\x12\x04\xa8\x01\x08#\n1\
    \n\x04\x04\0\x02\0\x12\x04\xaa\x01\x04'\x1a#\x20Service-profile\x20objec\
    t\x20to\x20create.\n\n\x0f\n\x05\x04\0\x02\0\x04\x12\x06\xaa\x01\x04\xa8\
    \x01%\n\r\n\x05\x04\0\x02\0\x06\x12\x04\xaa\x01\x04\x12\n\r\n\x05\x04\0\
    \x02\0\x01\x12\x04\xaa\x01\x13\"\n\r\n\x05\x04\0\x02\0\x03\x12\x04\xaa\
    \x01%&\n\x0c\n\x02\x04\x01\x12\x06\xad\x01\0\xb0\x01\x01\n\x0b\n\x03\x04\
    \x01\x01\x12\x04\xad\x01\x08$\n2\n\x04\x04\x01\x02\0\x12\x04\xaf\x01\x04\
    \x11\x1a$\x20ID\x20of\x20the\x20created\x20service-profile.\n\n\x0f\n\
    \x05\x04\x01\x02\0\x04\x12\x06\xaf\x01\x04\xad\x01&\n\r\n\x05\x04\x01\
    \x02\0\x05\x12\x04\xaf\x01\x04\t\n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xaf\
    \x01\n\x0c\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\xaf\x01\x0f\x10\n\x0c\n\
    \x02\x04\x02\x12\x06\xb2\x01\0\xb5\x01\x01\n\x0b\n\x03\x04\x02\x01\x12\
    \x04\xb2\x01\x08\x20\n*\n\x04\x04\x02\x02\0\x12\x04\xb4\x01\x04\x11\x1a\
    \x1c\x20ID\x20of\x20the\x20service-profile.\n\n\x0f\n\x05\x04\x02\x02\0\
    \x04\x12\x06\xb4\x01\x04\xb2\x01\"\n\r\n\x05\x04\x02\x02\0\x05\x12\x04\
    \xb4\x01\x04\t\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\xb4\x01\n\x0c\n\r\n\
    \x05\x04\x02\x02\0\x03\x12\x04\xb4\x01\x0f\x10\n\x0c\n\x02\x04\x03\x12\
    \x06\xb7\x01\0\xc0\x01\x01\n\x0b\n\x03\x04\x03\x01\x12\x04\xb7\x01\x08!\
    \n'\n\x04\x04\x03\x02\0\x12\x04\xb9\x01\x04'\x1a\x19\x20Service-profile\
    \x20object.\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\xb9\x01\x04\xb7\x01#\
    \n\r\n\x05\x04\x03\x02\0\x06\x12\x04\xb9\x01\x04\x12\n\r\n\x05\x04\x03\
    \x02\0\x01\x12\x04\xb9\x01\x13\"\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\xb9\
    \x01%&\n%\n\x04\x04\x03\x02\x01\x12\x04\xbc\x01\x04-\x1a\x17\x20Created\
    \x20at\x20timestamp.\n\n\x0f\n\x05\x04\x03\x02\x01\x04\x12\x06\xbc\x01\
    \x04\xb9\x01'\n\r\n\x05\x04\x03\x02\x01\x06\x12\x04\xbc\x01\x04\x1d\n\r\
    \n\x05\x04\x03\x02\x01\x01\x12\x04\xbc\x01\x1e(\n\r\n\x05\x04\x03\x02\
    \x01\x03\x12\x04\xbc\x01+,\n&\n\x04\x04\x03\x02\x02\x12\x04\xbf\x01\x04-\
    \x1a\x18\x20Last\x20update\x20timestamp.\n\n\x0f\n\x05\x04\x03\x02\x02\
    \x04\x12\x06\xbf\x01\x04\xbc\x01-\n\r\n\x05\x04\x03\x02\x02\x06\x12\x04\
    \xbf\x01\x04\x1d\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\xbf\x01\x1e(\n\r\
    \n\x05\x04\x03\x02\x02\x03\x12\x04\xbf\x01+,\n\x0c\n\x02\x04\x04\x12\x06\
    \xc2\x01\0\xc5\x01\x01\n\x0b\n\x03\x04\x04\x01\x12\x04\xc2\x01\x08#\n1\n\
    \x04\x04\x04\x02\0\x12\x04\xc4\x01\x04'\x1a#\x20Service-profile\x20objec\
    t\x20to\x20update.\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\xc4\x01\x04\
    \xc2\x01%\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xc4\x01\x04\x12\n\r\n\x05\
    \x04\x04\x02\0\x01\x12\x04\xc4\x01\x13\"\n\r\n\x05\x04\x04\x02\0\x03\x12\
    \x04\xc4\x01%&\n\x0c\n\x02\x04\x05\x12\x06\xc7\x01\0\xca\x01\x01\n\x0b\n\
    \x03\x04\x05\x01\x12\x04\xc7\x01\x08#\n*\n\x04\x04\x05\x02\0\x12\x04\xc9\
    \x01\x04\x11\x1a\x1c\x20ID\x20of\x20the\x20service-profile.\n\n\x0f\n\
    \x05\x04\x05\x02\0\x04\x12\x06\xc9\x01\x04\xc7\x01%\n\r\n\x05\x04\x05\
    \x02\0\x05\x12\x04\xc9\x01\x04\t\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xc9\
    \x01\n\x0c\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xc9\x01\x0f\x10\n\x0c\n\
    \x02\x04\x06\x12\x06\xcd\x01\0\xd1\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\
    \x04\xcd\x01\x08#\n1\n\x04\x04\x06\x02\0\x12\x04\xcf\x01\x04'\x1a#\x20Ro\
    uting-profile\x20object\x20to\x20create.\n\n\x0f\n\x05\x04\x06\x02\0\x04\
    \x12\x06\xcf\x01\x04\xcd\x01%\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\xcf\
    \x01\x04\x12\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xcf\x01\x13\"\n\r\n\x05\
    \x04\x06\x02\0\x03\x12\x04\xcf\x01%&\n\x0c\n\x02\x04\x07\x12\x06\xd3\x01\
    \0\xd6\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\xd3\x01\x08$\n2\n\x04\x04\
    \x07\x02\0\x12\x04\xd5\x01\x04\x11\x1a$\x20ID\x20of\x20the\x20created\
    \x20routing-profile.\n\n\x0f\n\x05\x04\x07\x02\0\x04\x12\x06\xd5\x01\x04\
    \xd3\x01&\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xd5\x01\x04\t\n\r\n\x05\
    \x04\x07\x02\0\x01\x12\x04\xd5\x01\n\x0c\n\r\n\x05\x04\x07\x02\0\x03\x12\
    \x04\xd5\x01\x0f\x10\n\x0c\n\x02\x04\x08\x12\x06\xd8\x01\0\xdb\x01\x01\n\
    \x0b\n\x03\x04\x08\x01\x12\x04\xd8\x01\x08\x20\n*\n\x04\x04\x08\x02\0\
    \x12\x04\xda\x01\x04\x11\x1a\x1c\x20ID\x20of\x20the\x20routing-profile.\
    \n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xda\x01\x04\xd8\x01\"\n\r\n\x05\
    \x04\x08\x02\0\x05\x12\x04\xda\x01\x04\t\n\r\n\x05\x04\x08\x02\0\x01\x12\
    \x04\xda\x01\n\x0c\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xda\x01\x0f\x10\n\
    \x0c\n\x02\x04\t\x12\x06\xdd\x01\0\xe6\x01\x01\n\x0b\n\x03\x04\t\x01\x12\
    \x04\xdd\x01\x08!\n'\n\x04\x04\t\x02\0\x12\x04\xdf\x01\x04'\x1a\x19\x20R\
    outing-profile\x20object.\n\n\x0f\n\x05\x04\t\x02\0\x04\x12\x06\xdf\x01\
    \x04\xdd\x01#\n\r\n\x05\x04\t\x02\0\x06\x12\x04\xdf\x01\x04\x12\n\r\n\
    \x05\x04\t\x02\0\x01\x12\x04\xdf\x01\x13\"\n\r\n\x05\x04\t\x02\0\x03\x12\
    \x04\xdf\x01%&\n%\n\x04\x04\t\x02\x01\x12\x04\xe2\x01\x04-\x1a\x17\x20Cr\
    eated\x20at\x20timestamp.\n\n\x0f\n\x05\x04\t\x02\x01\x04\x12\x06\xe2\
    \x01\x04\xdf\x01'\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\xe2\x01\x04\x1d\n\
    \r\n\x05\x04\t\x02\x01\x01\x12\x04\xe2\x01\x1e(\n\r\n\x05\x04\t\x02\x01\
    \x03\x12\x04\xe2\x01+,\n&\n\x04\x04\t\x02\x02\x12\x04\xe5\x01\x04-\x1a\
    \x18\x20Last\x20update\x20timestamp.\n\n\x0f\n\x05\x04\t\x02\x02\x04\x12\
    \x06\xe5\x01\x04\xe2\x01-\n\r\n\x05\x04\t\x02\x02\x06\x12\x04\xe5\x01\
    \x04\x1d\n\r\n\x05\x04\t\x02\x02\x01\x12\x04\xe5\x01\x1e(\n\r\n\x05\x04\
    \t\x02\x02\x03\x12\x04\xe5\x01+,\n\x0c\n\x02\x04\n\x12\x06\xe8\x01\0\xeb\
    \x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\xe8\x01\x08#\n1\n\x04\x04\n\x02\0\
    \x12\x04\xea\x01\x04'\x1a#\x20Routing-profile\x20object\x20to\x20update.\
    \n\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\xea\x01\x04\xe8\x01%\n\r\n\x05\
    \x04\n\x02\0\x06\x12\x04\xea\x01\x04\x12\n\r\n\x05\x04\n\x02\0\x01\x12\
    \x04\xea\x01\x13\"\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xea\x01%&\n\x0c\n\
    \x02\x04\x0b\x12\x06\xed\x01\0\xf0\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\
    \x04\xed\x01\x08#\n#\n\x04\x04\x0b\x02\0\x12\x04\xef\x01\x04\x11\x1a\x15\
    \x20Routing-profile\x20ID.\n\n\x0f\n\x05\x04\x0b\x02\0\x04\x12\x06\xef\
    \x01\x04\xed\x01%\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xef\x01\x04\t\n\r\
    \n\x05\x04\x0b\x02\0\x01\x12\x04\xef\x01\n\x0c\n\r\n\x05\x04\x0b\x02\0\
    \x03\x12\x04\xef\x01\x0f\x10\n\x0c\n\x02\x04\x0c\x12\x06\xf2\x01\0\xf5\
    \x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\xf2\x01\x08\"\n0\n\x04\x04\x0c\
    \x02\0\x12\x04\xf4\x01\x04%\x1a\"\x20Device-profile\x20object\x20to\x20c\
    reate.\n\n\x0f\n\x05\x04\x0c\x02\0\x04\x12\x06\xf4\x01\x04\xf2\x01$\n\r\
    \n\x05\x04\x0c\x02\0\x06\x12\x04\xf4\x01\x04\x11\n\r\n\x05\x04\x0c\x02\0\
    \x01\x12\x04\xf4\x01\x12\x20\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xf4\x01\
    #$\n\x0c\n\x02\x04\r\x12\x06\xf7\x01\0\xfa\x01\x01\n\x0b\n\x03\x04\r\x01\
    \x12\x04\xf7\x01\x08#\n1\n\x04\x04\r\x02\0\x12\x04\xf9\x01\x04\x11\x1a#\
    \x20ID\x20of\x20the\x20created\x20device-profile.\n\n\x0f\n\x05\x04\r\
    \x02\0\x04\x12\x06\xf9\x01\x04\xf7\x01%\n\r\n\x05\x04\r\x02\0\x05\x12\
    \x04\xf9\x01\x04\t\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xf9\x01\n\x0c\n\r\n\
    \x05\x04\r\x02\0\x03\x12\x04\xf9\x01\x0f\x10\n\x0c\n\x02\x04\x0e\x12\x06\
    \xfc\x01\0\xff\x01\x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\xfc\x01\x08\x1f\n\
    \"\n\x04\x04\x0e\x02\0\x12\x04\xfe\x01\x04\x11\x1a\x14\x20Device-profile\
    \x20ID.\n\n\x0f\n\x05\x04\x0e\x02\0\x04\x12\x06\xfe\x01\x04\xfc\x01!\n\r\
    \n\x05\x04\x0e\x02\0\x05\x12\x04\xfe\x01\x04\t\n\r\n\x05\x04\x0e\x02\0\
    \x01\x12\x04\xfe\x01\n\x0c\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xfe\x01\
    \x0f\x10\n\x0c\n\x02\x04\x0f\x12\x06\x81\x02\0\x8a\x02\x01\n\x0b\n\x03\
    \x04\x0f\x01\x12\x04\x81\x02\x08\x20\n&\n\x04\x04\x0f\x02\0\x12\x04\x83\
    \x02\x04%\x1a\x18\x20Device-profile\x20object.\n\n\x0f\n\x05\x04\x0f\x02\
    \0\x04\x12\x06\x83\x02\x04\x81\x02\"\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\
    \x83\x02\x04\x11\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\x83\x02\x12\x20\n\r\
    \n\x05\x04\x0f\x02\0\x03\x12\x04\x83\x02#$\n%\n\x04\x04\x0f\x02\x01\x12\
    \x04\x86\x02\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0f\n\x05\
    \x04\x0f\x02\x01\x04\x12\x06\x86\x02\x04\x83\x02%\n\r\n\x05\x04\x0f\x02\
    \x01\x06\x12\x04\x86\x02\x04\x1d\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\
    \x86\x02\x1e(\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\x86\x02+,\n&\n\x04\
    \x04\x0f\x02\x02\x12\x04\x89\x02\x04-\x1a\x18\x20Last\x20update\x20times\
    tamp.\n\n\x0f\n\x05\x04\x0f\x02\x02\x04\x12\x06\x89\x02\x04\x86\x02-\n\r\
    \n\x05\x04\x0f\x02\x02\x06\x12\x04\x89\x02\x04\x1d\n\r\n\x05\x04\x0f\x02\
    \x02\x01\x12\x04\x89\x02\x1e(\n\r\n\x05\x04\x0f\x02\x02\x03\x12\x04\x89\
    \x02+,\n\x0c\n\x02\x04\x10\x12\x06\x8c\x02\0\x8f\x02\x01\n\x0b\n\x03\x04\
    \x10\x01\x12\x04\x8c\x02\x08\"\n0\n\x04\x04\x10\x02\0\x12\x04\x8e\x02\
    \x04%\x1a\"\x20Device-profile\x20object\x20to\x20update.\n\n\x0f\n\x05\
    \x04\x10\x02\0\x04\x12\x06\x8e\x02\x04\x8c\x02$\n\r\n\x05\x04\x10\x02\0\
    \x06\x12\x04\x8e\x02\x04\x11\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x8e\x02\
    \x12\x20\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\x8e\x02#$\n\x0c\n\x02\x04\
    \x11\x12\x06\x91\x02\0\x94\x02\x01\n\x0b\n\x03\x04\x11\x01\x12\x04\x91\
    \x02\x08\"\n\"\n\x04\x04\x11\x02\0\x12\x04\x93\x02\x04\x11\x1a\x14\x20De\
    vice-profile\x20ID.\n\n\x0f\n\x05\x04\x11\x02\0\x04\x12\x06\x93\x02\x04\
    \x91\x02$\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\x93\x02\x04\t\n\r\n\x05\
    \x04\x11\x02\0\x01\x12\x04\x93\x02\n\x0c\n\r\n\x05\x04\x11\x02\0\x03\x12\
    \x04\x93\x02\x0f\x10\n\x0c\n\x02\x04\x12\x12\x06\x96\x02\0\xac\x02\x01\n\
    \x0b\n\x03\x04\x12\x01\x12\x04\x96\x02\x08\x0e\n\x17\n\x04\x04\x12\x02\0\
    \x12\x04\x98\x02\x04\x16\x1a\t\x20DevEUI.\n\n\x0f\n\x05\x04\x12\x02\0\
    \x04\x12\x06\x98\x02\x04\x96\x02\x10\n\r\n\x05\x04\x12\x02\0\x05\x12\x04\
    \x98\x02\x04\t\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x98\x02\n\x11\n\r\n\
    \x05\x04\x12\x02\0\x03\x12\x04\x98\x02\x14\x15\n\"\n\x04\x04\x12\x02\x01\
    \x12\x04\x9b\x02\x04\x20\x1a\x14\x20Device-profile\x20ID.\n\n\x0f\n\x05\
    \x04\x12\x02\x01\x04\x12\x06\x9b\x02\x04\x98\x02\x16\n\r\n\x05\x04\x12\
    \x02\x01\x05\x12\x04\x9b\x02\x04\t\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\
    \x9b\x02\n\x1b\n\r\n\x05\x04\x12\x02\x01\x03\x12\x04\x9b\x02\x1e\x1f\n#\
    \n\x04\x04\x12\x02\x02\x12\x04\x9e\x02\x04!\x1a\x15\x20Service-profile\
    \x20ID.\n\n\x0f\n\x05\x04\x12\x02\x02\x04\x12\x06\x9e\x02\x04\x9b\x02\
    \x20\n\r\n\x05\x04\x12\x02\x02\x05\x12\x04\x9e\x02\x04\t\n\r\n\x05\x04\
    \x12\x02\x02\x01\x12\x04\x9e\x02\n\x1c\n\r\n\x05\x04\x12\x02\x02\x03\x12\
    \x04\x9e\x02\x1f\x20\n#\n\x04\x04\x12\x02\x03\x12\x04\xa1\x02\x04!\x1a\
    \x15\x20Routing-profile\x20ID.\n\n\x0f\n\x05\x04\x12\x02\x03\x04\x12\x06\
    \xa1\x02\x04\x9e\x02!\n\r\n\x05\x04\x12\x02\x03\x05\x12\x04\xa1\x02\x04\
    \t\n\r\n\x05\x04\x12\x02\x03\x01\x12\x04\xa1\x02\n\x1c\n\r\n\x05\x04\x12\
    \x02\x03\x03\x12\x04\xa1\x02\x1f\x20\nt\n\x04\x04\x12\x02\x04\x12\x04\
    \xa5\x02\x04\x1e\x1af\x20Skip\x20frame-counter\x20check.\n\x20Note\x20th\
    at\x20turning\x20this\x20on\x20is\x20insecure\x20and\x20is\x20intended\
    \x20for\x20debugging\x20only.\n\n\x0f\n\x05\x04\x12\x02\x04\x04\x12\x06\
    \xa5\x02\x04\xa1\x02!\n\r\n\x05\x04\x12\x02\x04\x05\x12\x04\xa5\x02\x04\
    \x08\n\r\n\x05\x04\x12\x02\x04\x01\x12\x04\xa5\x02\t\x19\n\r\n\x05\x04\
    \x12\x02\x04\x03\x12\x04\xa5\x02\x1c\x1d\n\xb6\x01\n\x04\x04\x12\x02\x05\
    \x12\x04\xab\x02\x04\"\x1a\xa7\x01\x20Reference\x20altitude.\n\x20When\
    \x20using\x20geolocation,\x20this\x20altitude\x20will\x20be\x20used\x20a\
    s\x20a\x20reference\n\x20(when\x20supported\x20by\x20the\x20geolocation-\
    server)\x20to\x20increase\x20geolocation\n\x20accuracy.\n\n\x0f\n\x05\
    \x04\x12\x02\x05\x04\x12\x06\xab\x02\x04\xa5\x02\x1e\n\r\n\x05\x04\x12\
    \x02\x05\x05\x12\x04\xab\x02\x04\n\n\r\n\x05\x04\x12\x02\x05\x01\x12\x04\
    \xab\x02\x0b\x1d\n\r\n\x05\x04\x12\x02\x05\x03\x12\x04\xab\x02\x20!\n\
    \x0c\n\x02\x04\x13\x12\x06\xae\x02\0\xb1\x02\x01\n\x0b\n\x03\x04\x13\x01\
    \x12\x04\xae\x02\x08\x1b\n(\n\x04\x04\x13\x02\0\x12\x04\xb0\x02\x04\x16\
    \x1a\x1a\x20Device\x20object\x20to\x20create.\n\n\x0f\n\x05\x04\x13\x02\
    \0\x04\x12\x06\xb0\x02\x04\xae\x02\x1d\n\r\n\x05\x04\x13\x02\0\x06\x12\
    \x04\xb0\x02\x04\n\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\xb0\x02\x0b\x11\n\
    \r\n\x05\x04\x13\x02\0\x03\x12\x04\xb0\x02\x14\x15\n\x0c\n\x02\x04\x14\
    \x12\x06\xb3\x02\0\xb6\x02\x01\n\x0b\n\x03\x04\x14\x01\x12\x04\xb3\x02\
    \x08\x18\n\x17\n\x04\x04\x14\x02\0\x12\x04\xb5\x02\x04\x16\x1a\t\x20DevE\
    UI.\n\n\x0f\n\x05\x04\x14\x02\0\x04\x12\x06\xb5\x02\x04\xb3\x02\x1a\n\r\
    \n\x05\x04\x14\x02\0\x05\x12\x04\xb5\x02\x04\t\n\r\n\x05\x04\x14\x02\0\
    \x01\x12\x04\xb5\x02\n\x11\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\xb5\x02\
    \x14\x15\n\x0c\n\x02\x04\x15\x12\x06\xb8\x02\0\xc1\x02\x01\n\x0b\n\x03\
    \x04\x15\x01\x12\x04\xb8\x02\x08\x19\n\x1e\n\x04\x04\x15\x02\0\x12\x04\
    \xba\x02\x04\x16\x1a\x10\x20Device\x20object.\n\n\x0f\n\x05\x04\x15\x02\
    \0\x04\x12\x06\xba\x02\x04\xb8\x02\x1b\n\r\n\x05\x04\x15\x02\0\x06\x12\
    \x04\xba\x02\x04\n\n\r\n\x05\x04\x15\x02\0\x01\x12\x04\xba\x02\x0b\x11\n\
    \r\n\x05\x04\x15\x02\0\x03\x12\x04\xba\x02\x14\x15\n%\n\x04\x04\x15\x02\
    \x01\x12\x04\xbd\x02\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0f\
    \n\x05\x04\x15\x02\x01\x04\x12\x06\xbd\x02\x04\xba\x02\x16\n\r\n\x05\x04\
    \x15\x02\x01\x06\x12\x04\xbd\x02\x04\x1d\n\r\n\x05\x04\x15\x02\x01\x01\
    \x12\x04\xbd\x02\x1e(\n\r\n\x05\x04\x15\x02\x01\x03\x12\x04\xbd\x02+,\n&\
    \n\x04\x04\x15\x02\x02\x12\x04\xc0\x02\x04-\x1a\x18\x20Last\x20update\
    \x20timestamp.\n\n\x0f\n\x05\x04\x15\x02\x02\x04\x12\x06\xc0\x02\x04\xbd\
    \x02-\n\r\n\x05\x04\x15\x02\x02\x06\x12\x04\xc0\x02\x04\x1d\n\r\n\x05\
    \x04\x15\x02\x02\x01\x12\x04\xc0\x02\x1e(\n\r\n\x05\x04\x15\x02\x02\x03\
    \x12\x04\xc0\x02+,\n\x0c\n\x02\x04\x16\x12\x06\xc3\x02\0\xc6\x02\x01\n\
    \x0b\n\x03\x04\x16\x01\x12\x04\xc3\x02\x08\x1b\n(\n\x04\x04\x16\x02\0\
    \x12\x04\xc5\x02\x04\x16\x1a\x1a\x20Device\x20object\x20to\x20update.\n\
    \n\x0f\n\x05\x04\x16\x02\0\x04\x12\x06\xc5\x02\x04\xc3\x02\x1d\n\r\n\x05\
    \x04\x16\x02\0\x06\x12\x04\xc5\x02\x04\n\n\r\n\x05\x04\x16\x02\0\x01\x12\
    \x04\xc5\x02\x0b\x11\n\r\n\x05\x04\x16\x02\0\x03\x12\x04\xc5\x02\x14\x15\
    \n\x0c\n\x02\x04\x17\x12\x06\xc8\x02\0\xcb\x02\x01\n\x0b\n\x03\x04\x17\
    \x01\x12\x04\xc8\x02\x08\x1b\n\x17\n\x04\x04\x17\x02\0\x12\x04\xca\x02\
    \x04\x16\x1a\t\x20DevEUI.\n\n\x0f\n\x05\x04\x17\x02\0\x04\x12\x06\xca\
    \x02\x04\xc8\x02\x1d\n\r\n\x05\x04\x17\x02\0\x05\x12\x04\xca\x02\x04\t\n\
    \r\n\x05\x04\x17\x02\0\x01\x12\x04\xca\x02\n\x11\n\r\n\x05\x04\x17\x02\0\
    \x03\x12\x04\xca\x02\x14\x15\n\x0c\n\x02\x04\x18\x12\x06\xcd\x02\0\xe8\
    \x02\x01\n\x0b\n\x03\x04\x18\x01\x12\x04\xcd\x02\x08\x18\n\x17\n\x04\x04\
    \x18\x02\0\x12\x04\xcf\x02\x04\x16\x1a\t\x20DevEUI.\n\n\x0f\n\x05\x04\
    \x18\x02\0\x04\x12\x06\xcf\x02\x04\xcd\x02\x1a\n\r\n\x05\x04\x18\x02\0\
    \x05\x12\x04\xcf\x02\x04\t\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\xcf\x02\n\
    \x11\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\xcf\x02\x14\x15\n)\n\x04\x04\
    \x18\x02\x01\x12\x04\xd2\x02\x04\x17\x1a\x1b\x20Device\x20address\x20(De\
    vAddr).\n\n\x0f\n\x05\x04\x18\x02\x01\x04\x12\x06\xd2\x02\x04\xcf\x02\
    \x16\n\r\n\x05\x04\x18\x02\x01\x05\x12\x04\xd2\x02\x04\t\n\r\n\x05\x04\
    \x18\x02\x01\x01\x12\x04\xd2\x02\n\x12\n\r\n\x05\x04\x18\x02\x01\x03\x12\
    \x04\xd2\x02\x15\x16\nK\n\x04\x04\x18\x02\x02\x12\x04\xd5\x02\x04\x1e\
    \x1a=\x20SNwkSIntKey\x20(serving\x20network-server\x20session\x20integri\
    ty\x20key).\n\n\x0f\n\x05\x04\x18\x02\x02\x04\x12\x06\xd5\x02\x04\xd2\
    \x02\x17\n\r\n\x05\x04\x18\x02\x02\x05\x12\x04\xd5\x02\x04\t\n\r\n\x05\
    \x04\x18\x02\x02\x01\x12\x04\xd5\x02\n\x19\n\r\n\x05\x04\x18\x02\x02\x03\
    \x12\x04\xd5\x02\x1c\x1d\nN\n\x04\x04\x18\x02\x03\x12\x04\xd8\x02\x04\
    \x1e\x1a@\x20FNwkSIntKey\x20(forwarding\x20network-server\x20session\x20\
    integrity\x20key).\n\n\x0f\n\x05\x04\x18\x02\x03\x04\x12\x06\xd8\x02\x04\
    \xd5\x02\x1e\n\r\n\x05\x04\x18\x02\x03\x05\x12\x04\xd8\x02\x04\t\n\r\n\
    \x05\x04\x18\x02\x03\x01\x12\x04\xd8\x02\n\x19\n\r\n\x05\x04\x18\x02\x03\
    \x03\x12\x04\xd8\x02\x1c\x1d\nC\n\x04\x04\x18\x02\x04\x12\x04\xdb\x02\
    \x04\x1c\x1a5\x20NwkSEncKey\x20(network-server\x20session\x20encryption\
    \x20key).\n\n\x0f\n\x05\x04\x18\x02\x04\x04\x12\x06\xdb\x02\x04\xd8\x02\
    \x1e\n\r\n\x05\x04\x18\x02\x04\x05\x12\x04\xdb\x02\x04\t\n\r\n\x05\x04\
    \x18\x02\x04\x01\x12\x04\xdb\x02\n\x17\n\r\n\x05\x04\x18\x02\x04\x03\x12\
    \x04\xdb\x02\x1a\x1b\n7\n\x04\x04\x18\x02\x05\x12\x04\xde\x02\x04\x18\
    \x1a)\x20The\x20next\x20expected\x20uplink\x20frame-counter.\n\n\x0f\n\
    \x05\x04\x18\x02\x05\x04\x12\x06\xde\x02\x04\xdb\x02\x1c\n\r\n\x05\x04\
    \x18\x02\x05\x05\x12\x04\xde\x02\x04\n\n\r\n\x05\x04\x18\x02\x05\x01\x12\
    \x04\xde\x02\x0b\x13\n\r\n\x05\x04\x18\x02\x05\x03\x12\x04\xde\x02\x16\
    \x17\nK\n\x04\x04\x18\x02\x06\x12\x04\xe1\x02\x04\x1c\x1a=\x20The\x20net\
    work\x20frame-counter\x20used\x20for\x20the\x20next\x20downlink\x20frame\
    .\n\n\x0f\n\x05\x04\x18\x02\x06\x04\x12\x06\xe1\x02\x04\xde\x02\x18\n\r\
    \n\x05\x04\x18\x02\x06\x05\x12\x04\xe1\x02\x04\n\n\r\n\x05\x04\x18\x02\
    \x06\x01\x12\x04\xe1\x02\x0b\x17\n\r\n\x05\x04\x18\x02\x06\x03\x12\x04\
    \xe1\x02\x1a\x1b\n]\n\x04\x04\x18\x02\x07\x12\x04\xe4\x02\x04\x1c\x1aO\
    \x20The\x20application\x20frame-counter\x20used\x20for\x20the\x20next\
    \x20downlink\x20frame\x20(LoRaWAN\x201.1).\n\n\x0f\n\x05\x04\x18\x02\x07\
    \x04\x12\x06\xe4\x02\x04\xe1\x02\x1c\n\r\n\x05\x04\x18\x02\x07\x05\x12\
    \x04\xe4\x02\x04\n\n\r\n\x05\x04\x18\x02\x07\x01\x12\x04\xe4\x02\x0b\x17\
    \n\r\n\x05\x04\x18\x02\x07\x03\x12\x04\xe4\x02\x1a\x1b\na\n\x04\x04\x18\
    \x02\x08\x12\x04\xe7\x02\x04\x1e\x1aS\x20Skip\x20frame-counter\x20checks\
    \x20(this\x20is\x20insecure,\x20but\x20could\x20be\x20helpful\x20for\x20\
    debugging).\n\n\x0f\n\x05\x04\x18\x02\x08\x04\x12\x06\xe7\x02\x04\xe4\
    \x02\x1c\n\r\n\x05\x04\x18\x02\x08\x05\x12\x04\xe7\x02\x04\x08\n\r\n\x05\
    \x04\x18\x02\x08\x01\x12\x04\xe7\x02\t\x19\n\r\n\x05\x04\x18\x02\x08\x03\
    \x12\x04\xe7\x02\x1c\x1d\n\x0c\n\x02\x04\x19\x12\x06\xea\x02\0\xed\x02\
    \x01\n\x0b\n\x03\x04\x19\x01\x12\x04\xea\x02\x08\x1d\n=\n\x04\x04\x19\
    \x02\0\x12\x04\xec\x02\x04+\x1a/\x20Device-activation\x20to\x20activate\
    \x20a\x20device\x20(ABP).\n\n\x0f\n\x05\x04\x19\x02\0\x04\x12\x06\xec\
    \x02\x04\xea\x02\x1f\n\r\n\x05\x04\x19\x02\0\x06\x12\x04\xec\x02\x04\x14\
    \n\r\n\x05\x04\x19\x02\0\x01\x12\x04\xec\x02\x15&\n\r\n\x05\x04\x19\x02\
    \0\x03\x12\x04\xec\x02)*\n\x0c\n\x02\x04\x1a\x12\x06\xef\x02\0\xf2\x02\
    \x01\n\x0b\n\x03\x04\x1a\x01\x12\x04\xef\x02\x08\x1f\n%\n\x04\x04\x1a\
    \x02\0\x12\x04\xf1\x02\x04\x16\x1a\x17\x20Device\x20EUI\x20(8\x20bytes).\
    \n\n\x0f\n\x05\x04\x1a\x02\0\x04\x12\x06\xf1\x02\x04\xef\x02!\n\r\n\x05\
    \x04\x1a\x02\0\x05\x12\x04\xf1\x02\x04\t\n\r\n\x05\x04\x1a\x02\0\x01\x12\
    \x04\xf1\x02\n\x11\n\r\n\x05\x04\x1a\x02\0\x03\x12\x04\xf1\x02\x14\x15\n\
    \x0c\n\x02\x04\x1b\x12\x06\xf4\x02\0\xf7\x02\x01\n\x0b\n\x03\x04\x1b\x01\
    \x12\x04\xf4\x02\x08\"\n%\n\x04\x04\x1b\x02\0\x12\x04\xf6\x02\x04\x16\
    \x1a\x17\x20Device\x20EUI\x20(8\x20bytes).\n\n\x0f\n\x05\x04\x1b\x02\0\
    \x04\x12\x06\xf6\x02\x04\xf4\x02$\n\r\n\x05\x04\x1b\x02\0\x05\x12\x04\
    \xf6\x02\x04\t\n\r\n\x05\x04\x1b\x02\0\x01\x12\x04\xf6\x02\n\x11\n\r\n\
    \x05\x04\x1b\x02\0\x03\x12\x04\xf6\x02\x14\x15\n\x0c\n\x02\x04\x1c\x12\
    \x06\xf9\x02\0\xfc\x02\x01\n\x0b\n\x03\x04\x1c\x01\x12\x04\xf9\x02\x08#\
    \n)\n\x04\x04\x1c\x02\0\x12\x04\xfb\x02\x04+\x1a\x1b\x20Device-activatio\
    n\x20object.\n\n\x0f\n\x05\x04\x1c\x02\0\x04\x12\x06\xfb\x02\x04\xf9\x02\
    %\n\r\n\x05\x04\x1c\x02\0\x06\x12\x04\xfb\x02\x04\x14\n\r\n\x05\x04\x1c\
    \x02\0\x01\x12\x04\xfb\x02\x15&\n\r\n\x05\x04\x1c\x02\0\x03\x12\x04\xfb\
    \x02)*\n\x0c\n\x02\x04\x1d\x12\x06\xfe\x02\0\x82\x03\x01\n\x0b\n\x03\x04\
    \x1d\x01\x12\x04\xfe\x02\x08\x20\nq\n\x04\x04\x1d\x02\0\x12\x04\x81\x03\
    \x04\x17\x1ac\x20Random\x20device\x20address\x20(DevAddr).\n\x20Note\x20\
    that\x20this\x20includes\x20the\x20NetID\x20prefix\x20of\x20the\x20netwo\
    rk-server.\n\n\x0f\n\x05\x04\x1d\x02\0\x04\x12\x06\x81\x03\x04\xfe\x02\"\
    \n\r\n\x05\x04\x1d\x02\0\x05\x12\x04\x81\x03\x04\t\n\r\n\x05\x04\x1d\x02\
    \0\x01\x12\x04\x81\x03\n\x12\n\r\n\x05\x04\x1d\x02\0\x03\x12\x04\x81\x03\
    \x15\x16\n\x0c\n\x02\x04\x1e\x12\x06\x84\x03\0\x8e\x03\x01\n\x0b\n\x03\
    \x04\x1e\x01\x12\x04\x84\x03\x08(\n%\n\x04\x04\x1e\x02\0\x12\x04\x86\x03\
    \x04\x16\x1a\x17\x20DevEUI\x20EUI\x20(8\x20bytes).\n\n\x0f\n\x05\x04\x1e\
    \x02\0\x04\x12\x06\x86\x03\x04\x84\x03*\n\r\n\x05\x04\x1e\x02\0\x05\x12\
    \x04\x86\x03\x04\t\n\r\n\x05\x04\x1e\x02\0\x01\x12\x04\x86\x03\n\x11\n\r\
    \n\x05\x04\x1e\x02\0\x03\x12\x04\x86\x03\x14\x15\nD\n\x04\x04\x1e\x02\
    \x01\x12\x04\x89\x03\x04\x13\x1a6\x20Command\x20identifier\x20(specified\
    \x20by\x20the\x20LoRaWAN\x20specs).\n\n\x0f\n\x05\x04\x1e\x02\x01\x04\
    \x12\x06\x89\x03\x04\x86\x03\x16\n\r\n\x05\x04\x1e\x02\x01\x05\x12\x04\
    \x89\x03\x04\n\n\r\n\x05\x04\x1e\x02\x01\x01\x12\x04\x89\x03\x0b\x0e\n\r\
    \n\x05\x04\x1e\x02\x01\x03\x12\x04\x89\x03\x11\x12\nx\n\x04\x04\x1e\x02\
    \x02\x12\x04\x8d\x03\x04\x20\x1aj\x20MAC-command(s).\x20In\x20case\x20mu\
    ltiple\x20payloads\x20are\x20defined,\x20then\x20they\n\x20are\x20always\
    \x20sent\x20within\x20a\x20single\x20frame.\n\n\r\n\x05\x04\x1e\x02\x02\
    \x04\x12\x04\x8d\x03\x04\x0c\n\r\n\x05\x04\x1e\x02\x02\x05\x12\x04\x8d\
    \x03\r\x12\n\r\n\x05\x04\x1e\x02\x02\x01\x12\x04\x8d\x03\x13\x1b\n\r\n\
    \x05\x04\x1e\x02\x02\x03\x12\x04\x8d\x03\x1e\x1f\n\x0c\n\x02\x04\x1f\x12\
    \x06\x90\x03\0\xa3\x03\x01\n\x0b\n\x03\x04\x1f\x01\x12\x04\x90\x03\x08%\
    \n<\n\x04\x04\x1f\x02\0\x12\x04\x92\x03\x04\x1a\x1a.\x20MACPayload\x20of\
    \x20the\x20proprietary\x20LoRaWAN\x20frame.\n\n\x0f\n\x05\x04\x1f\x02\0\
    \x04\x12\x06\x92\x03\x04\x90\x03'\n\r\n\x05\x04\x1f\x02\0\x05\x12\x04\
    \x92\x03\x04\t\n\r\n\x05\x04\x1f\x02\0\x01\x12\x04\x92\x03\n\x15\n\r\n\
    \x05\x04\x1f\x02\0\x03\x12\x04\x92\x03\x18\x19\nG\n\x04\x04\x1f\x02\x01\
    \x12\x04\x95\x03\x04\x12\x1a9\x20MIC\x20of\x20the\x20proprietary\x20LoRa\
    WAN\x20frame\x20(must\x20be\x204\x20bytes).\n\n\x0f\n\x05\x04\x1f\x02\
    \x01\x04\x12\x06\x95\x03\x04\x92\x03\x1a\n\r\n\x05\x04\x1f\x02\x01\x05\
    \x12\x04\x95\x03\x04\t\n\r\n\x05\x04\x1f\x02\x01\x01\x12\x04\x95\x03\n\r\
    \n\r\n\x05\x04\x1f\x02\x01\x03\x12\x04\x95\x03\x10\x11\nR\n\x04\x04\x1f\
    \x02\x02\x12\x04\x98\x03\x04$\x1aD\x20Gateway\x20MAC\x20address(es)\x20t\
    o\x20use\x20for\x20transmitting\x20the\x20LoRaWAN\x20frame.\n\n\r\n\x05\
    \x04\x1f\x02\x02\x04\x12\x04\x98\x03\x04\x0c\n\r\n\x05\x04\x1f\x02\x02\
    \x05\x12\x04\x98\x03\r\x12\n\r\n\x05\x04\x1f\x02\x02\x01\x12\x04\x98\x03\
    \x13\x1f\n\r\n\x05\x04\x1f\x02\x02\x03\x12\x04\x98\x03\"#\n\x98\x01\n\
    \x04\x04\x1f\x02\x03\x12\x04\x9c\x03\x04$\x1a\x89\x01\x20Set\x20to\x20tr\
    ue\x20for\x20sending\x20as\x20a\x20gateway,\x20or\x20false\x20for\x20sen\
    ding\x20as\x20a\x20node.\n\x20In\x20the\x20latter\x20case\x20the\x20fram\
    e\x20will\x20be\x20received\x20by\x20other\x20gateways.\n\n\x0f\n\x05\
    \x04\x1f\x02\x03\x04\x12\x06\x9c\x03\x04\x98\x03$\n\r\n\x05\x04\x1f\x02\
    \x03\x05\x12\x04\x9c\x03\x04\x08\n\r\n\x05\x04\x1f\x02\x03\x01\x12\x04\
    \x9c\x03\t\x1f\n\r\n\x05\x04\x1f\x02\x03\x03\x12\x04\x9c\x03\"#\n;\n\x04\
    \x04\x1f\x02\x04\x12\x04\x9f\x03\x04\x19\x1a-\x20Frequency\x20(Hz)\x20to\
    \x20use\x20for\x20the\x20transmission.\n\n\x0f\n\x05\x04\x1f\x02\x04\x04\
    \x12\x06\x9f\x03\x04\x9c\x03$\n\r\n\x05\x04\x1f\x02\x04\x05\x12\x04\x9f\
    \x03\x04\n\n\r\n\x05\x04\x1f\x02\x04\x01\x12\x04\x9f\x03\x0b\x14\n\r\n\
    \x05\x04\x1f\x02\x04\x03\x12\x04\x9f\x03\x17\x18\n6\n\x04\x04\x1f\x02\
    \x05\x12\x04\xa2\x03\x04\x12\x1a(\x20Data-rate\x20to\x20use\x20for\x20th\
    e\x20transmission.\n\n\x0f\n\x05\x04\x1f\x02\x05\x04\x12\x06\xa2\x03\x04\
    \x9f\x03\x19\n\r\n\x05\x04\x1f\x02\x05\x05\x12\x04\xa2\x03\x04\n\n\r\n\
    \x05\x04\x1f\x02\x05\x01\x12\x04\xa2\x03\x0b\r\n\r\n\x05\x04\x1f\x02\x05\
    \x03\x12\x04\xa2\x03\x10\x11\n\x0c\n\x02\x04\x20\x12\x06\xa5\x03\0\xb9\
    \x03\x01\n\x0b\n\x03\x04\x20\x01\x12\x04\xa5\x03\x08\x0f\n+\n\x04\x04\
    \x20\x02\0\x12\x04\xa7\x03\x04\x11\x1a\x1d\x20Gateway\x20ID\x20(8\x20byt\
    es\x20EUI64).\n\n\x0f\n\x05\x04\x20\x02\0\x04\x12\x06\xa7\x03\x04\xa5\
    \x03\x11\n\r\n\x05\x04\x20\x02\0\x05\x12\x04\xa7\x03\x04\t\n\r\n\x05\x04\
    \x20\x02\0\x01\x12\x04\xa7\x03\n\x0c\n\r\n\x05\x04\x20\x02\0\x03\x12\x04\
    \xa7\x03\x0f\x10\n!\n\x04\x04\x20\x02\x01\x12\x04\xaa\x03\x04!\x1a\x13\
    \x20Gateway\x20location.\n\n\x0f\n\x05\x04\x20\x02\x01\x04\x12\x06\xaa\
    \x03\x04\xa7\x03\x11\n\r\n\x05\x04\x20\x02\x01\x06\x12\x04\xaa\x03\x04\
    \x13\n\r\n\x05\x04\x20\x02\x01\x01\x12\x04\xaa\x03\x14\x1c\n\r\n\x05\x04\
    \x20\x02\x01\x03\x12\x04\xaa\x03\x1f\x20\n5\n\x04\x04\x20\x02\x02\x12\
    \x04\xad\x03\x04!\x1a'\x20ID\x20of\x20the\x20gateway-profile\x20(optiona\
    l).\n\n\x0f\n\x05\x04\x20\x02\x02\x04\x12\x06\xad\x03\x04\xaa\x03!\n\r\n\
    \x05\x04\x20\x02\x02\x05\x12\x04\xad\x03\x04\t\n\r\n\x05\x04\x20\x02\x02\
    \x01\x12\x04\xad\x03\n\x1c\n\r\n\x05\x04\x20\x02\x02\x03\x12\x04\xad\x03\
    \x1f\x20\n\x93\x02\n\x04\x04\x20\x02\x03\x12\x04\xb3\x03\x04%\x1a\x84\
    \x02\x20Gateway\x20boards\x20configuration\x20(optional).\n\x20This\x20i\
    s\x20(currently)\x20only\x20needed\x20when\x20the\x20gateway\x20supports\
    \x20the\x20fine-timestamp\n\x20and\x20you\x20you\x20would\x20like\x20to\
    \x20add\x20the\x20FPGA\x20ID\x20to\x20the\x20gateway\x20meta-data\x20or\
    \x20would\n\x20like\x20ChirpStack\x20Network\x20Server\x20to\x20decrypt\
    \x20the\x20fine-timestamp.\n\n\r\n\x05\x04\x20\x02\x03\x04\x12\x04\xb3\
    \x03\x04\x0c\n\r\n\x05\x04\x20\x02\x03\x06\x12\x04\xb3\x03\r\x19\n\r\n\
    \x05\x04\x20\x02\x03\x01\x12\x04\xb3\x03\x1a\x20\n\r\n\x05\x04\x20\x02\
    \x03\x03\x12\x04\xb3\x03#$\n\x91\x01\n\x04\x04\x20\x02\x04\x12\x04\xb8\
    \x03\x04!\x1a\x82\x01\x20Routing\x20Profile\x20ID.\n\x20The\x20routing-p\
    rofile\x20ID\x20defines\x20to\x20which\x20application-server\x20statisti\
    cal\n\x20data\x20for\x20this\x20gateway\x20is\x20forwarded.\n\n\x0f\n\
    \x05\x04\x20\x02\x04\x04\x12\x06\xb8\x03\x04\xb3\x03%\n\r\n\x05\x04\x20\
    \x02\x04\x05\x12\x04\xb8\x03\x04\t\n\r\n\x05\x04\x20\x02\x04\x01\x12\x04\
    \xb8\x03\n\x1c\n\r\n\x05\x04\x20\x02\x04\x03\x12\x04\xb8\x03\x1f\x20\n\
    \x0c\n\x02\x04!\x12\x06\xbb\x03\0\xc1\x03\x01\n\x0b\n\x03\x04!\x01\x12\
    \x04\xbb\x03\x08\x14\n<\n\x04\x04!\x02\0\x12\x04\xbd\x03\x04\x16\x1a.\
    \x20FPGA\x20ID\x20of\x20the\x20gateway\x20(8\x20bytes)\x20(optional).\n\
    \n\x0f\n\x05\x04!\x02\0\x04\x12\x06\xbd\x03\x04\xbb\x03\x16\n\r\n\x05\
    \x04!\x02\0\x05\x12\x04\xbd\x03\x04\t\n\r\n\x05\x04!\x02\0\x01\x12\x04\
    \xbd\x03\n\x11\n\r\n\x05\x04!\x02\0\x03\x12\x04\xbd\x03\x14\x15\nH\n\x04\
    \x04!\x02\x01\x12\x04\xc0\x03\x04!\x1a:\x20Fine-timestamp\x20AES\x20decr\
    yption\x20key\x20(16\x20bytes)\x20(optional).\n\n\x0f\n\x05\x04!\x02\x01\
    \x04\x12\x06\xc0\x03\x04\xbd\x03\x16\n\r\n\x05\x04!\x02\x01\x05\x12\x04\
    \xc0\x03\x04\t\n\r\n\x05\x04!\x02\x01\x01\x12\x04\xc0\x03\n\x1c\n\r\n\
    \x05\x04!\x02\x01\x03\x12\x04\xc0\x03\x1f\x20\n\x0c\n\x02\x04\"\x12\x06\
    \xc3\x03\0\xc6\x03\x01\n\x0b\n\x03\x04\"\x01\x12\x04\xc3\x03\x08\x1c\n)\
    \n\x04\x04\"\x02\0\x12\x04\xc5\x03\x04\x18\x1a\x1b\x20Gateway\x20object\
    \x20to\x20create.\n\n\x0f\n\x05\x04\"\x02\0\x04\x12\x06\xc5\x03\x04\xc3\
    \x03\x1e\n\r\n\x05\x04\"\x02\0\x06\x12\x04\xc5\x03\x04\x0b\n\r\n\x05\x04\
    \"\x02\0\x01\x12\x04\xc5\x03\x0c\x13\n\r\n\x05\x04\"\x02\0\x03\x12\x04\
    \xc5\x03\x16\x17\n\x0c\n\x02\x04#\x12\x06\xc8\x03\0\xcb\x03\x01\n\x0b\n\
    \x03\x04#\x01\x12\x04\xc8\x03\x08\x19\n\x1b\n\x04\x04#\x02\0\x12\x04\xca\
    \x03\x04\x11\x1a\r\x20Gateway\x20ID.\n\n\x0f\n\x05\x04#\x02\0\x04\x12\
    \x06\xca\x03\x04\xc8\x03\x1b\n\r\n\x05\x04#\x02\0\x05\x12\x04\xca\x03\
    \x04\t\n\r\n\x05\x04#\x02\0\x01\x12\x04\xca\x03\n\x0c\n\r\n\x05\x04#\x02\
    \0\x03\x12\x04\xca\x03\x0f\x10\n\x0c\n\x02\x04$\x12\x06\xcd\x03\0\xdc\
    \x03\x01\n\x0b\n\x03\x04$\x01\x12\x04\xcd\x03\x08\x1a\n\x1f\n\x04\x04$\
    \x02\0\x12\x04\xcf\x03\x04\x18\x1a\x11\x20Gateway\x20object.\n\n\x0f\n\
    \x05\x04$\x02\0\x04\x12\x06\xcf\x03\x04\xcd\x03\x1c\n\r\n\x05\x04$\x02\0\
    \x06\x12\x04\xcf\x03\x04\x0b\n\r\n\x05\x04$\x02\0\x01\x12\x04\xcf\x03\
    \x0c\x13\n\r\n\x05\x04$\x02\0\x03\x12\x04\xcf\x03\x16\x17\n%\n\x04\x04$\
    \x02\x01\x12\x04\xd2\x03\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\
    \x0f\n\x05\x04$\x02\x01\x04\x12\x06\xd2\x03\x04\xcf\x03\x18\n\r\n\x05\
    \x04$\x02\x01\x06\x12\x04\xd2\x03\x04\x1d\n\r\n\x05\x04$\x02\x01\x01\x12\
    \x04\xd2\x03\x1e(\n\r\n\x05\x04$\x02\x01\x03\x12\x04\xd2\x03+,\n&\n\x04\
    \x04$\x02\x02\x12\x04\xd5\x03\x04-\x1a\x18\x20Last\x20update\x20timestam\
    p.\n\n\x0f\n\x05\x04$\x02\x02\x04\x12\x06\xd5\x03\x04\xd2\x03-\n\r\n\x05\
    \x04$\x02\x02\x06\x12\x04\xd5\x03\x04\x1d\n\r\n\x05\x04$\x02\x02\x01\x12\
    \x04\xd5\x03\x1e(\n\r\n\x05\x04$\x02\x02\x03\x12\x04\xd5\x03+,\n%\n\x04\
    \x04$\x02\x03\x12\x04\xd8\x03\x040\x1a\x17\x20First\x20seen\x20timestamp\
    .\n\n\x0f\n\x05\x04$\x02\x03\x04\x12\x06\xd8\x03\x04\xd5\x03-\n\r\n\x05\
    \x04$\x02\x03\x06\x12\x04\xd8\x03\x04\x1d\n\r\n\x05\x04$\x02\x03\x01\x12\
    \x04\xd8\x03\x1e+\n\r\n\x05\x04$\x02\x03\x03\x12\x04\xd8\x03./\n$\n\x04\
    \x04$\x02\x04\x12\x04\xdb\x03\x04/\x1a\x16\x20Last\x20seen\x20timestamp.\
    \n\n\x0f\n\x05\x04$\x02\x04\x04\x12\x06\xdb\x03\x04\xd8\x030\n\r\n\x05\
    \x04$\x02\x04\x06\x12\x04\xdb\x03\x04\x1d\n\r\n\x05\x04$\x02\x04\x01\x12\
    \x04\xdb\x03\x1e*\n\r\n\x05\x04$\x02\x04\x03\x12\x04\xdb\x03-.\n\x0c\n\
    \x02\x04%\x12\x06\xde\x03\0\xe1\x03\x01\n\x0b\n\x03\x04%\x01\x12\x04\xde\
    \x03\x08\x1c\n)\n\x04\x04%\x02\0\x12\x04\xe0\x03\x04\x18\x1a\x1b\x20Gate\
    way\x20object\x20to\x20update.\n\n\x0f\n\x05\x04%\x02\0\x04\x12\x06\xe0\
    \x03\x04\xde\x03\x1e\n\r\n\x05\x04%\x02\0\x06\x12\x04\xe0\x03\x04\x0b\n\
    \r\n\x05\x04%\x02\0\x01\x12\x04\xe0\x03\x0c\x13\n\r\n\x05\x04%\x02\0\x03\
    \x12\x04\xe0\x03\x16\x17\n\x0c\n\x02\x04&\x12\x06\xe3\x03\0\xe6\x03\x01\
    \n\x0b\n\x03\x04&\x01\x12\x04\xe3\x03\x08\x1c\n\x1b\n\x04\x04&\x02\0\x12\
    \x04\xe5\x03\x04\x11\x1a\r\x20Gateway\x20ID.\n\n\x0f\n\x05\x04&\x02\0\
    \x04\x12\x06\xe5\x03\x04\xe3\x03\x1e\n\r\n\x05\x04&\x02\0\x05\x12\x04\
    \xe5\x03\x04\t\n\r\n\x05\x04&\x02\0\x01\x12\x04\xe5\x03\n\x0c\n\r\n\x05\
    \x04&\x02\0\x03\x12\x04\xe5\x03\x0f\x10\n\x0c\n\x02\x05\x01\x12\x06\xe8\
    \x03\0\xf1\x03\x01\n\x0b\n\x03\x05\x01\x01\x12\x04\xe8\x03\x05\x18\n\x0c\
    \n\x04\x05\x01\x02\0\x12\x04\xe9\x03\x04\x0f\n\r\n\x05\x05\x01\x02\0\x01\
    \x12\x04\xe9\x03\x04\n\n\r\n\x05\x05\x01\x02\0\x02\x12\x04\xe9\x03\r\x0e\
    \n\x0c\n\x04\x05\x01\x02\x01\x12\x04\xea\x03\x04\x0f\n\r\n\x05\x05\x01\
    \x02\x01\x01\x12\x04\xea\x03\x04\n\n\r\n\x05\x05\x01\x02\x01\x02\x12\x04\
    \xea\x03\r\x0e\n\x0c\n\x04\x05\x01\x02\x02\x12\x04\xeb\x03\x04\r\n\r\n\
    \x05\x05\x01\x02\x02\x01\x12\x04\xeb\x03\x04\x08\n\r\n\x05\x05\x01\x02\
    \x02\x02\x12\x04\xeb\x03\x0b\x0c\n\x0c\n\x04\x05\x01\x02\x03\x12\x04\xec\
    \x03\x04\x0c\n\r\n\x05\x05\x01\x02\x03\x01\x12\x04\xec\x03\x04\x07\n\r\n\
    \x05\x05\x01\x02\x03\x02\x12\x04\xec\x03\n\x0b\n\x0c\n\x04\x05\x01\x02\
    \x04\x12\x04\xed\x03\x04\r\n\r\n\x05\x05\x01\x02\x04\x01\x12\x04\xed\x03\
    \x04\x08\n\r\n\x05\x05\x01\x02\x04\x02\x12\x04\xed\x03\x0b\x0c\n\x0c\n\
    \x04\x05\x01\x02\x05\x12\x04\xee\x03\x04\x0e\n\r\n\x05\x05\x01\x02\x05\
    \x01\x12\x04\xee\x03\x04\t\n\r\n\x05\x05\x01\x02\x05\x02\x12\x04\xee\x03\
    \x0c\r\n\x0c\n\x04\x05\x01\x02\x06\x12\x04\xef\x03\x04\x10\n\r\n\x05\x05\
    \x01\x02\x06\x01\x12\x04\xef\x03\x04\x0b\n\r\n\x05\x05\x01\x02\x06\x02\
    \x12\x04\xef\x03\x0e\x0f\n\x0c\n\x04\x05\x01\x02\x07\x12\x04\xf0\x03\x04\
    \r\n\r\n\x05\x05\x01\x02\x07\x01\x12\x04\xf0\x03\x04\x08\n\r\n\x05\x05\
    \x01\x02\x07\x02\x12\x04\xf0\x03\x0b\x0c\n\x0c\n\x02\x04'\x12\x06\xf3\
    \x03\0\x82\x04\x01\n\x0b\n\x03\x04'\x01\x12\x04\xf3\x03\x08\x14\n:\n\x04\
    \x04'\x02\0\x12\x04\xf5\x03\x04,\x1a,\x20Timestamp\x20of\x20the\x20(aggr\
    egated)\x20measurement.\n\n\x0f\n\x05\x04'\x02\0\x04\x12\x06\xf5\x03\x04\
    \xf3\x03\x16\n\r\n\x05\x04'\x02\0\x06\x12\x04\xf5\x03\x04\x1d\n\r\n\x05\
    \x04'\x02\0\x01\x12\x04\xf5\x03\x1e'\n\r\n\x05\x04'\x02\0\x03\x12\x04\
    \xf5\x03*+\n0\n\x04\x04'\x02\x01\x12\x04\xf8\x03\x04\"\x1a\"\x20Packets\
    \x20received\x20by\x20the\x20gateway.\n\n\x0f\n\x05\x04'\x02\x01\x04\x12\
    \x06\xf8\x03\x04\xf5\x03,\n\r\n\x05\x04'\x02\x01\x05\x12\x04\xf8\x03\x04\
    \t\n\r\n\x05\x04'\x02\x01\x01\x12\x04\xf8\x03\n\x1d\n\r\n\x05\x04'\x02\
    \x01\x03\x12\x04\xf8\x03\x20!\nJ\n\x04\x04'\x02\x02\x12\x04\xfb\x03\x04%\
    \x1a<\x20Packets\x20received\x20by\x20the\x20gateway\x20that\x20passed\
    \x20the\x20CRC\x20check.\n\n\x0f\n\x05\x04'\x02\x02\x04\x12\x06\xfb\x03\
    \x04\xf8\x03\"\n\r\n\x05\x04'\x02\x02\x05\x12\x04\xfb\x03\x04\t\n\r\n\
    \x05\x04'\x02\x02\x01\x12\x04\xfb\x03\n\x20\n\r\n\x05\x04'\x02\x02\x03\
    \x12\x04\xfb\x03#$\nA\n\x04\x04'\x02\x03\x12\x04\xfe\x03\x04\"\x1a3\x20P\
    ackets\x20received\x20by\x20the\x20gateway\x20for\x20transmission.\n\n\
    \x0f\n\x05\x04'\x02\x03\x04\x12\x06\xfe\x03\x04\xfb\x03%\n\r\n\x05\x04'\
    \x02\x03\x05\x12\x04\xfe\x03\x04\t\n\r\n\x05\x04'\x02\x03\x01\x12\x04\
    \xfe\x03\n\x1d\n\r\n\x05\x04'\x02\x03\x03\x12\x04\xfe\x03\x20!\n3\n\x04\
    \x04'\x02\x04\x12\x04\x81\x04\x04!\x1a%\x20Packets\x20transmitted\x20by\
    \x20the\x20gateway.\n\n\x0f\n\x05\x04'\x02\x04\x04\x12\x06\x81\x04\x04\
    \xfe\x03\"\n\r\n\x05\x04'\x02\x04\x05\x12\x04\x81\x04\x04\t\n\r\n\x05\
    \x04'\x02\x04\x01\x12\x04\x81\x04\n\x1c\n\r\n\x05\x04'\x02\x04\x03\x12\
    \x04\x81\x04\x1f\x20\n\x0c\n\x02\x04(\x12\x06\x84\x04\0\x90\x04\x01\n\
    \x0b\n\x03\x04(\x01\x12\x04\x84\x04\x08\x1e\n+\n\x04\x04(\x02\0\x12\x04\
    \x86\x04\x04\x19\x1a\x1d\x20MAC\x20address\x20of\x20the\x20gateway.\n\n\
    \x0f\n\x05\x04(\x02\0\x04\x12\x06\x86\x04\x04\x84\x04\x20\n\r\n\x05\x04(\
    \x02\0\x05\x12\x04\x86\x04\x04\t\n\r\n\x05\x04(\x02\0\x01\x12\x04\x86\
    \x04\n\x14\n\r\n\x05\x04(\x02\0\x03\x12\x04\x86\x04\x17\x18\n%\n\x04\x04\
    (\x02\x01\x12\x04\x89\x04\x04%\x1a\x17\x20Aggregation\x20interval.\n\n\
    \x0f\n\x05\x04(\x02\x01\x04\x12\x06\x89\x04\x04\x86\x04\x19\n\r\n\x05\
    \x04(\x02\x01\x06\x12\x04\x89\x04\x04\x17\n\r\n\x05\x04(\x02\x01\x01\x12\
    \x04\x89\x04\x18\x20\n\r\n\x05\x04(\x02\x01\x03\x12\x04\x89\x04#$\n(\n\
    \x04\x04(\x02\x02\x12\x04\x8c\x04\x042\x1a\x1a\x20Timestamp\x20to\x20sta\
    rt\x20from.\n\n\x0f\n\x05\x04(\x02\x02\x04\x12\x06\x8c\x04\x04\x89\x04%\
    \n\r\n\x05\x04(\x02\x02\x06\x12\x04\x8c\x04\x04\x1d\n\r\n\x05\x04(\x02\
    \x02\x01\x12\x04\x8c\x04\x1e-\n\r\n\x05\x04(\x02\x02\x03\x12\x04\x8c\x04\
    01\n,\n\x04\x04(\x02\x03\x12\x04\x8f\x04\x040\x1a\x1e\x20Timestamp\x20un\
    til\x20to\x20get\x20from.\n\n\x0f\n\x05\x04(\x02\x03\x04\x12\x06\x8f\x04\
    \x04\x8c\x042\n\r\n\x05\x04(\x02\x03\x06\x12\x04\x8f\x04\x04\x1d\n\r\n\
    \x05\x04(\x02\x03\x01\x12\x04\x8f\x04\x1e+\n\r\n\x05\x04(\x02\x03\x03\
    \x12\x04\x8f\x04./\n\x0c\n\x02\x04)\x12\x06\x92\x04\0\x94\x04\x01\n\x0b\
    \n\x03\x04)\x01\x12\x04\x92\x04\x08\x1f\n\x0c\n\x04\x04)\x02\0\x12\x04\
    \x93\x04\x04%\n\r\n\x05\x04)\x02\0\x04\x12\x04\x93\x04\x04\x0c\n\r\n\x05\
    \x04)\x02\0\x06\x12\x04\x93\x04\r\x19\n\r\n\x05\x04)\x02\0\x01\x12\x04\
    \x93\x04\x1a\x20\n\r\n\x05\x04)\x02\0\x03\x12\x04\x93\x04#$\n\x0c\n\x02\
    \x04*\x12\x06\x96\x04\0\xae\x04\x01\n\x0b\n\x03\x04*\x01\x12\x04\x96\x04\
    \x08\x17\n%\n\x04\x04*\x02\0\x12\x04\x98\x04\x04\x16\x1a\x17\x20DevEUI\
    \x20of\x20the\x20device.\n\n\x0f\n\x05\x04*\x02\0\x04\x12\x06\x98\x04\
    \x04\x96\x04\x19\n\r\n\x05\x04*\x02\0\x05\x12\x04\x98\x04\x04\t\n\r\n\
    \x05\x04*\x02\0\x01\x12\x04\x98\x04\n\x11\n\r\n\x05\x04*\x02\0\x03\x12\
    \x04\x98\x04\x14\x15\n/\n\x04\x04*\x02\x01\x12\x04\x9b\x04\x04\x1a\x1a!\
    \x20The\x20encrypted\x20FRMPayload\x20bytes.\n\n\x0f\n\x05\x04*\x02\x01\
    \x04\x12\x06\x9b\x04\x04\x98\x04\x16\n\r\n\x05\x04*\x02\x01\x05\x12\x04\
    \x9b\x04\x04\t\n\r\n\x05\x04*\x02\x01\x01\x12\x04\x9b\x04\n\x15\n\r\n\
    \x05\x04*\x02\x01\x03\x12\x04\x9b\x04\x18\x19\n(\n\x04\x04*\x02\x02\x12\
    \x04\x9e\x04\x04\x15\x1a\x1a\x20The\x20FCnt\x20of\x20the\x20payload.\n\n\
    \x0f\n\x05\x04*\x02\x02\x04\x12\x06\x9e\x04\x04\x9b\x04\x1a\n\r\n\x05\
    \x04*\x02\x02\x05\x12\x04\x9e\x04\x04\n\n\r\n\x05\x04*\x02\x02\x01\x12\
    \x04\x9e\x04\x0b\x10\n\r\n\x05\x04*\x02\x02\x03\x12\x04\x9e\x04\x13\x14\
    \n)\n\x04\x04*\x02\x03\x12\x04\xa1\x04\x04\x16\x1a\x1b\x20The\x20FPort\
    \x20of\x20the\x20payload.\n\n\x0f\n\x05\x04*\x02\x03\x04\x12\x06\xa1\x04\
    \x04\x9e\x04\x15\n\r\n\x05\x04*\x02\x03\x05\x12\x04\xa1\x04\x04\n\n\r\n\
    \x05\x04*\x02\x03\x01\x12\x04\xa1\x04\x0b\x11\n\r\n\x05\x04*\x02\x03\x03\
    \x12\x04\xa1\x04\x14\x15\np\n\x04\x04*\x02\x04\x12\x04\xa5\x04\x04\x17\
    \x1ab\x20When\x20set\x20to\x20true,\x20ChirpStack\x20Network\x20Server\
    \x20will\x20wait\x20for\x20the\x20device\x20to\x20ack\x20the\n\x20receiv\
    ed\x20frame.\n\n\x0f\n\x05\x04*\x02\x04\x04\x12\x06\xa5\x04\x04\xa1\x04\
    \x16\n\r\n\x05\x04*\x02\x04\x05\x12\x04\xa5\x04\x04\x08\n\r\n\x05\x04*\
    \x02\x04\x01\x12\x04\xa5\x04\t\x12\n\r\n\x05\x04*\x02\x04\x03\x12\x04\
    \xa5\x04\x15\x16\n\x95\x03\n\x04\x04*\x02\x05\x12\x04\xad\x04\x04\x17\
    \x1a\x86\x03\x20Device\x20address\x20(as\x20known\x20by\x20the\x20applic\
    ation-server).\n\x20It\x20will\x20be\x20used\x20to\x20validate\x20that\
    \x20the\x20application-server\x20is\n\x20using\x20the\x20correct\x20secu\
    rity\x20context\x20of\x20the\x20device.\x20As\x20on\x20OTAA,\x20there\n\
    \x20is\x20a\x20gap\x20between\x20the\x20activation\x20and\x20the\x20deli\
    very\x20of\x20the\x20AppSKey\x20to\x20the\n\x20application-server,\x20th\
    ere\x20is\x20a\x20possibility\x20that\x20the\x20application-server\n\x20\
    tries\x20to\x20enqueue\x20payloads\x20encrypted\x20with\x20the\x20old\
    \x20session-key.\n\n\x0f\n\x05\x04*\x02\x05\x04\x12\x06\xad\x04\x04\xa5\
    \x04\x17\n\r\n\x05\x04*\x02\x05\x05\x12\x04\xad\x04\x04\t\n\r\n\x05\x04*\
    \x02\x05\x01\x12\x04\xad\x04\n\x12\n\r\n\x05\x04*\x02\x05\x03\x12\x04\
    \xad\x04\x15\x16\n\x0c\n\x02\x04+\x12\x06\xb0\x04\0\xb2\x04\x01\n\x0b\n\
    \x03\x04+\x01\x12\x04\xb0\x04\x08$\n\x0c\n\x04\x04+\x02\0\x12\x04\xb1\
    \x04\x04\x1d\n\x0f\n\x05\x04+\x02\0\x04\x12\x06\xb1\x04\x04\xb0\x04&\n\r\
    \n\x05\x04+\x02\0\x06\x12\x04\xb1\x04\x04\x13\n\r\n\x05\x04+\x02\0\x01\
    \x12\x04\xb1\x04\x14\x18\n\r\n\x05\x04+\x02\0\x03\x12\x04\xb1\x04\x1b\
    \x1c\n\x0c\n\x02\x04,\x12\x06\xb4\x04\0\xb7\x04\x01\n\x0b\n\x03\x04,\x01\
    \x12\x04\xb4\x04\x08(\n%\n\x04\x04,\x02\0\x12\x04\xb6\x04\x04\x16\x1a\
    \x17\x20DevEUI\x20of\x20the\x20device.\n\n\x0f\n\x05\x04,\x02\0\x04\x12\
    \x06\xb6\x04\x04\xb4\x04*\n\r\n\x05\x04,\x02\0\x05\x12\x04\xb6\x04\x04\t\
    \n\r\n\x05\x04,\x02\0\x01\x12\x04\xb6\x04\n\x11\n\r\n\x05\x04,\x02\0\x03\
    \x12\x04\xb6\x04\x14\x15\n\x0c\n\x02\x04-\x12\x06\xb9\x04\0\xbc\x04\x01\
    \n\x0b\n\x03\x04-\x01\x12\x04\xb9\x04\x08+\n%\n\x04\x04-\x02\0\x12\x04\
    \xbb\x04\x04\x16\x1a\x17\x20DevEUI\x20of\x20the\x20device.\n\n\x0f\n\x05\
    \x04-\x02\0\x04\x12\x06\xbb\x04\x04\xb9\x04-\n\r\n\x05\x04-\x02\0\x05\
    \x12\x04\xbb\x04\x04\t\n\r\n\x05\x04-\x02\0\x01\x12\x04\xbb\x04\n\x11\n\
    \r\n\x05\x04-\x02\0\x03\x12\x04\xbb\x04\x14\x15\n\x0c\n\x02\x04.\x12\x06\
    \xbe\x04\0\xc0\x04\x01\n\x0b\n\x03\x04.\x01\x12\x04\xbe\x04\x08,\n\x0c\n\
    \x04\x04.\x02\0\x12\x04\xbf\x04\x04'\n\r\n\x05\x04.\x02\0\x04\x12\x04\
    \xbf\x04\x04\x0c\n\r\n\x05\x04.\x02\0\x06\x12\x04\xbf\x04\r\x1c\n\r\n\
    \x05\x04.\x02\0\x01\x12\x04\xbf\x04\x1d\"\n\r\n\x05\x04.\x02\0\x03\x12\
    \x04\xbf\x04%&\n\x0c\n\x02\x04/\x12\x06\xc2\x04\0\xc5\x04\x01\n\x0b\n\
    \x03\x04/\x01\x12\x04\xc2\x04\x08+\n%\n\x04\x04/\x02\0\x12\x04\xc4\x04\
    \x04\x16\x1a\x17\x20DevEUI\x20of\x20the\x20device.\n\n\x0f\n\x05\x04/\
    \x02\0\x04\x12\x06\xc4\x04\x04\xc2\x04-\n\r\n\x05\x04/\x02\0\x05\x12\x04\
    \xc4\x04\x04\t\n\r\n\x05\x04/\x02\0\x01\x12\x04\xc4\x04\n\x11\n\r\n\x05\
    \x04/\x02\0\x03\x12\x04\xc4\x04\x14\x15\n\x0c\n\x02\x040\x12\x06\xc7\x04\
    \0\xca\x04\x01\n\x0b\n\x03\x040\x01\x12\x04\xc7\x04\x08,\n)\n\x04\x040\
    \x02\0\x12\x04\xc9\x04\x04\x15\x1a\x1b\x20The\x20frame-counter\x20to\x20\
    use.\n\n\x0f\n\x05\x040\x02\0\x04\x12\x06\xc9\x04\x04\xc7\x04.\n\r\n\x05\
    \x040\x02\0\x05\x12\x04\xc9\x04\x04\n\n\r\n\x05\x040\x02\0\x01\x12\x04\
    \xc9\x04\x0b\x10\n\r\n\x05\x040\x02\0\x03\x12\x04\xc9\x04\x13\x14\n\x0c\
    \n\x02\x041\x12\x06\xcc\x04\0\xcf\x04\x01\n\x0b\n\x03\x041\x01\x12\x04\
    \xcc\x04\x08(\n+\n\x04\x041\x02\0\x12\x04\xce\x04\x04\x19\x1a\x1d\x20MAC\
    \x20address\x20of\x20the\x20gateway.\n\n\x0f\n\x05\x041\x02\0\x04\x12\
    \x06\xce\x04\x04\xcc\x04*\n\r\n\x05\x041\x02\0\x05\x12\x04\xce\x04\x04\t\
    \n\r\n\x05\x041\x02\0\x01\x12\x04\xce\x04\n\x14\n\r\n\x05\x041\x02\0\x03\
    \x12\x04\xce\x04\x17\x18\n\x0c\n\x02\x042\x12\x06\xd1\x04\0\xd9\x04\x01\
    \n\x0b\n\x03\x042\x01\x12\x04\xd1\x04\x08)\n\x0e\n\x04\x042\x08\0\x12\
    \x06\xd2\x04\x04\xd8\x04\x05\n\r\n\x05\x042\x08\0\x01\x12\x04\xd2\x04\n\
    \x0f\n)\n\x04\x042\x02\0\x12\x04\xd4\x04\x08/\x1a\x1b\x20Contains\x20an\
    \x20uplink\x20frame.\n\n\r\n\x05\x042\x02\0\x06\x12\x04\xd4\x04\x08\x19\
    \n\r\n\x05\x042\x02\0\x01\x12\x04\xd4\x04\x1a*\n\r\n\x05\x042\x02\0\x03\
    \x12\x04\xd4\x04-.\n*\n\x04\x042\x02\x01\x12\x04\xd7\x04\x08,\x1a\x1c\
    \x20Contains\x20a\x20downlink\x20frame.\n\n\r\n\x05\x042\x02\x01\x06\x12\
    \x04\xd7\x04\x08\x18\n\r\n\x05\x042\x02\x01\x01\x12\x04\xd7\x04\x19'\n\r\
    \n\x05\x042\x02\x01\x03\x12\x04\xd7\x04*+\n\x0c\n\x02\x043\x12\x06\xdb\
    \x04\0\xde\x04\x01\n\x0b\n\x03\x043\x01\x12\x04\xdb\x04\x08'\n%\n\x04\
    \x043\x02\0\x12\x04\xdd\x04\x04\x16\x1a\x17\x20DevEUI\x20of\x20the\x20de\
    vice.\n\n\x0f\n\x05\x043\x02\0\x04\x12\x06\xdd\x04\x04\xdb\x04)\n\r\n\
    \x05\x043\x02\0\x05\x12\x04\xdd\x04\x04\t\n\r\n\x05\x043\x02\0\x01\x12\
    \x04\xdd\x04\n\x11\n\r\n\x05\x043\x02\0\x03\x12\x04\xdd\x04\x14\x15\n\
    \x0c\n\x02\x044\x12\x06\xe0\x04\0\xe8\x04\x01\n\x0b\n\x03\x044\x01\x12\
    \x04\xe0\x04\x08(\n\x0e\n\x04\x044\x08\0\x12\x06\xe1\x04\x04\xe7\x04\x05\
    \n\r\n\x05\x044\x08\0\x01\x12\x04\xe1\x04\n\x0f\n)\n\x04\x044\x02\0\x12\
    \x04\xe3\x04\x08/\x1a\x1b\x20Contains\x20an\x20uplink\x20frame.\n\n\r\n\
    \x05\x044\x02\0\x06\x12\x04\xe3\x04\x08\x19\n\r\n\x05\x044\x02\0\x01\x12\
    \x04\xe3\x04\x1a*\n\r\n\x05\x044\x02\0\x03\x12\x04\xe3\x04-.\n*\n\x04\
    \x044\x02\x01\x12\x04\xe6\x04\x08,\x1a\x1c\x20Contains\x20a\x20downlink\
    \x20frame.\n\n\r\n\x05\x044\x02\x01\x06\x12\x04\xe6\x04\x08\x18\n\r\n\
    \x05\x044\x02\x01\x01\x12\x04\xe6\x04\x19'\n\r\n\x05\x044\x02\x01\x03\
    \x12\x04\xe6\x04*+\n\x0c\n\x02\x045\x12\x06\xea\x04\0\xf0\x04\x01\n\x0b\
    \n\x03\x045\x01\x12\x04\xea\x04\x08\x1a\n2\n\x04\x045\x02\0\x12\x04\xec\
    \x04\x04\x17\x1a$\x20ChirpStack\x20Network\x20Server\x20version.\n\n\x0f\
    \n\x05\x045\x02\0\x04\x12\x06\xec\x04\x04\xea\x04\x1c\n\r\n\x05\x045\x02\
    \0\x05\x12\x04\xec\x04\x04\n\n\r\n\x05\x045\x02\0\x01\x12\x04\xec\x04\
    \x0b\x12\n\r\n\x05\x045\x02\0\x03\x12\x04\xec\x04\x15\x16\n:\n\x04\x045\
    \x02\x01\x12\x04\xef\x04\x04\x1d\x1a,\x20Region\x20configured\x20for\x20\
    this\x20network-server.\n\n\x0f\n\x05\x045\x02\x01\x04\x12\x06\xef\x04\
    \x04\xec\x04\x17\n\r\n\x05\x045\x02\x01\x06\x12\x04\xef\x04\x04\x11\n\r\
    \n\x05\x045\x02\x01\x01\x12\x04\xef\x04\x12\x18\n\r\n\x05\x045\x02\x01\
    \x03\x12\x04\xef\x04\x1b\x1c\n\x0c\n\x02\x046\x12\x06\xf1\x04\0\xfc\x04\
    \x01\n\x0b\n\x03\x046\x01\x12\x04\xf1\x04\x08\x16\n*\n\x04\x046\x02\0\
    \x12\x04\xf3\x04\x04\x11\x1a\x1c\x20ID\x20of\x20the\x20gateway-profile.\
    \n\n\x0f\n\x05\x046\x02\0\x04\x12\x06\xf3\x04\x04\xf1\x04\x18\n\r\n\x05\
    \x046\x02\0\x05\x12\x04\xf3\x04\x04\t\n\r\n\x05\x046\x02\0\x01\x12\x04\
    \xf3\x04\n\x0c\n\r\n\x05\x046\x02\0\x03\x12\x04\xf3\x04\x0f\x10\n\x87\
    \x01\n\x04\x046\x02\x01\x12\x04\xf7\x04\x04!\x1ay\x20Default\x20channels\
    \x20(channels\x20specified\x20by\x20the\x20LoRaWAN\x20Regional\x20Parame\
    ters\n\x20specification)\x20enabled\x20for\x20this\x20configuration.\n\n\
    \r\n\x05\x046\x02\x01\x04\x12\x04\xf7\x04\x04\x0c\n\r\n\x05\x046\x02\x01\
    \x05\x12\x04\xf7\x04\r\x13\n\r\n\x05\x046\x02\x01\x01\x12\x04\xf7\x04\
    \x14\x1c\n\r\n\x05\x046\x02\x01\x03\x12\x04\xf7\x04\x1f\x20\n\x80\x01\n\
    \x04\x046\x02\x02\x12\x04\xfb\x04\x04;\x1ar\x20Extra\x20channels\x20adde\
    d\x20to\x20the\x20channel-configuration\x20(in\x20case\x20the\x20LoRaWAN\
    \n\x20region\x20supports\x20adding\x20custom\x20channels).\n\n\r\n\x05\
    \x046\x02\x02\x04\x12\x04\xfb\x04\x04\x0c\n\r\n\x05\x046\x02\x02\x06\x12\
    \x04\xfb\x04\r'\n\r\n\x05\x046\x02\x02\x01\x12\x04\xfb\x04(6\n\r\n\x05\
    \x046\x02\x02\x03\x12\x04\xfb\x049:\n\x0c\n\x02\x047\x12\x06\xfe\x04\0\
    \x8d\x05\x01\n\x0b\n\x03\x047\x01\x12\x04\xfe\x04\x08\"\n\x1b\n\x04\x047\
    \x02\0\x12\x04\x80\x05\x04%\x1a\r\x20Modulation.\n\n\x0f\n\x05\x047\x02\
    \0\x04\x12\x06\x80\x05\x04\xfe\x04$\n\r\n\x05\x047\x02\0\x06\x12\x04\x80\
    \x05\x04\x15\n\r\n\x05\x047\x02\0\x01\x12\x04\x80\x05\x16\x20\n\r\n\x05\
    \x047\x02\0\x03\x12\x04\x80\x05#$\n\x1a\n\x04\x047\x02\x01\x12\x04\x83\
    \x05\x04\x19\x1a\x0c\x20Frequency.\n\n\x0f\n\x05\x047\x02\x01\x04\x12\
    \x06\x83\x05\x04\x80\x05%\n\r\n\x05\x047\x02\x01\x05\x12\x04\x83\x05\x04\
    \n\n\r\n\x05\x047\x02\x01\x01\x12\x04\x83\x05\x0b\x14\n\r\n\x05\x047\x02\
    \x01\x03\x12\x04\x83\x05\x17\x18\n\x1a\n\x04\x047\x02\x02\x12\x04\x86\
    \x05\x04\x19\x1a\x0c\x20Bandwidth.\n\n\x0f\n\x05\x047\x02\x02\x04\x12\
    \x06\x86\x05\x04\x83\x05\x19\n\r\n\x05\x047\x02\x02\x05\x12\x04\x86\x05\
    \x04\n\n\r\n\x05\x047\x02\x02\x01\x12\x04\x86\x05\x0b\x14\n\r\n\x05\x047\
    \x02\x02\x03\x12\x04\x86\x05\x17\x18\n4\n\x04\x047\x02\x03\x12\x04\x89\
    \x05\x04\x17\x1a&\x20Bitrate\x20(in\x20case\x20of\x20FSK\x20modulation).\
    \n\n\x0f\n\x05\x047\x02\x03\x04\x12\x06\x89\x05\x04\x86\x05\x19\n\r\n\
    \x05\x047\x02\x03\x05\x12\x04\x89\x05\x04\n\n\r\n\x05\x047\x02\x03\x01\
    \x12\x04\x89\x05\x0b\x12\n\r\n\x05\x047\x02\x03\x03\x12\x04\x89\x05\x15\
    \x16\n?\n\x04\x047\x02\x04\x12\x04\x8c\x05\x04*\x1a1\x20Spreading\x20fac\
    tors\x20(in\x20case\x20of\x20LoRa\x20modulation).\n\n\r\n\x05\x047\x02\
    \x04\x04\x12\x04\x8c\x05\x04\x0c\n\r\n\x05\x047\x02\x04\x05\x12\x04\x8c\
    \x05\r\x13\n\r\n\x05\x047\x02\x04\x01\x12\x04\x8c\x05\x14%\n\r\n\x05\x04\
    7\x02\x04\x03\x12\x04\x8c\x05()\n\x0c\n\x02\x048\x12\x06\x8f\x05\0\x92\
    \x05\x01\n\x0b\n\x03\x048\x01\x12\x04\x8f\x05\x08#\n1\n\x04\x048\x02\0\
    \x12\x04\x91\x05\x04'\x1a#\x20Gateway-profile\x20object\x20to\x20create.\
    \n\n\x0f\n\x05\x048\x02\0\x04\x12\x06\x91\x05\x04\x8f\x05%\n\r\n\x05\x04\
    8\x02\0\x06\x12\x04\x91\x05\x04\x12\n\r\n\x05\x048\x02\0\x01\x12\x04\x91\
    \x05\x13\"\n\r\n\x05\x048\x02\0\x03\x12\x04\x91\x05%&\n\x0c\n\x02\x049\
    \x12\x06\x94\x05\0\x97\x05\x01\n\x0b\n\x03\x049\x01\x12\x04\x94\x05\x08$\
    \n6\n\x04\x049\x02\0\x12\x04\x96\x05\x04\x11\x1a(\x20ID\x20of\x20the\x20\
    create\x20configuration\x20object.\n\n\x0f\n\x05\x049\x02\0\x04\x12\x06\
    \x96\x05\x04\x94\x05&\n\r\n\x05\x049\x02\0\x05\x12\x04\x96\x05\x04\t\n\r\
    \n\x05\x049\x02\0\x01\x12\x04\x96\x05\n\x0c\n\r\n\x05\x049\x02\0\x03\x12\
    \x04\x96\x05\x0f\x10\n\x0c\n\x02\x04:\x12\x06\x99\x05\0\x9c\x05\x01\n\
    \x0b\n\x03\x04:\x01\x12\x04\x99\x05\x08\x20\n#\n\x04\x04:\x02\0\x12\x04\
    \x9b\x05\x04\x11\x1a\x15\x20Gateway-profile\x20ID.\n\n\x0f\n\x05\x04:\
    \x02\0\x04\x12\x06\x9b\x05\x04\x99\x05\"\n\r\n\x05\x04:\x02\0\x05\x12\
    \x04\x9b\x05\x04\t\n\r\n\x05\x04:\x02\0\x01\x12\x04\x9b\x05\n\x0c\n\r\n\
    \x05\x04:\x02\0\x03\x12\x04\x9b\x05\x0f\x10\n\x0c\n\x02\x04;\x12\x06\x9e\
    \x05\0\xa7\x05\x01\n\x0b\n\x03\x04;\x01\x12\x04\x9e\x05\x08!\n'\n\x04\
    \x04;\x02\0\x12\x04\xa0\x05\x04'\x1a\x19\x20Gateway-profile\x20object.\n\
    \n\x0f\n\x05\x04;\x02\0\x04\x12\x06\xa0\x05\x04\x9e\x05#\n\r\n\x05\x04;\
    \x02\0\x06\x12\x04\xa0\x05\x04\x12\n\r\n\x05\x04;\x02\0\x01\x12\x04\xa0\
    \x05\x13\"\n\r\n\x05\x04;\x02\0\x03\x12\x04\xa0\x05%&\n%\n\x04\x04;\x02\
    \x01\x12\x04\xa3\x05\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0f\
    \n\x05\x04;\x02\x01\x04\x12\x06\xa3\x05\x04\xa0\x05'\n\r\n\x05\x04;\x02\
    \x01\x06\x12\x04\xa3\x05\x04\x1d\n\r\n\x05\x04;\x02\x01\x01\x12\x04\xa3\
    \x05\x1e(\n\r\n\x05\x04;\x02\x01\x03\x12\x04\xa3\x05+,\n&\n\x04\x04;\x02\
    \x02\x12\x04\xa6\x05\x04-\x1a\x18\x20Last\x20update\x20timestamp.\n\n\
    \x0f\n\x05\x04;\x02\x02\x04\x12\x06\xa6\x05\x04\xa3\x05-\n\r\n\x05\x04;\
    \x02\x02\x06\x12\x04\xa6\x05\x04\x1d\n\r\n\x05\x04;\x02\x02\x01\x12\x04\
    \xa6\x05\x1e(\n\r\n\x05\x04;\x02\x02\x03\x12\x04\xa6\x05+,\n\x0c\n\x02\
    \x04<\x12\x06\xa9\x05\0\xac\x05\x01\n\x0b\n\x03\x04<\x01\x12\x04\xa9\x05\
    \x08#\n1\n\x04\x04<\x02\0\x12\x04\xab\x05\x04'\x1a#\x20Gateway-profile\
    \x20object\x20to\x20update.\n\n\x0f\n\x05\x04<\x02\0\x04\x12\x06\xab\x05\
    \x04\xa9\x05%\n\r\n\x05\x04<\x02\0\x06\x12\x04\xab\x05\x04\x12\n\r\n\x05\
    \x04<\x02\0\x01\x12\x04\xab\x05\x13\"\n\r\n\x05\x04<\x02\0\x03\x12\x04\
    \xab\x05%&\n\x0c\n\x02\x04=\x12\x06\xae\x05\0\xb1\x05\x01\n\x0b\n\x03\
    \x04=\x01\x12\x04\xae\x05\x08#\n#\n\x04\x04=\x02\0\x12\x04\xb0\x05\x04\
    \x11\x1a\x15\x20Gateway-profile\x20ID.\n\n\x0f\n\x05\x04=\x02\0\x04\x12\
    \x06\xb0\x05\x04\xae\x05%\n\r\n\x05\x04=\x02\0\x05\x12\x04\xb0\x05\x04\t\
    \n\r\n\x05\x04=\x02\0\x01\x12\x04\xb0\x05\n\x0c\n\r\n\x05\x04=\x02\0\x03\
    \x12\x04\xb0\x05\x0f\x10\n\x0c\n\x02\x05\x02\x12\x06\xb3\x05\0\xb9\x05\
    \x01\n\x0b\n\x03\x05\x02\x01\x12\x04\xb3\x05\x05\x17\n\x18\n\x04\x05\x02\
    \x02\0\x12\x04\xb5\x05\x04\x10\x1a\n\x20Class-C.\n\n\r\n\x05\x05\x02\x02\
    \0\x01\x12\x04\xb5\x05\x04\x0b\n\r\n\x05\x05\x02\x02\0\x02\x12\x04\xb5\
    \x05\x0e\x0f\n\x18\n\x04\x05\x02\x02\x01\x12\x04\xb8\x05\x04\x10\x1a\n\
    \x20Class-B.\n\n\r\n\x05\x05\x02\x02\x01\x01\x12\x04\xb8\x05\x04\x0b\n\r\
    \n\x05\x05\x02\x02\x01\x02\x12\x04\xb8\x05\x0e\x0f\n\x0c\n\x02\x04>\x12\
    \x06\xbb\x05\0\xdc\x05\x01\n\x0b\n\x03\x04>\x01\x12\x04\xbb\x05\x08\x16\
    \nv\n\x04\x04>\x02\0\x12\x04\xbf\x05\x04\x11\x1ah\x20Multicast-group\x20\
    ID.\n\x20Note:\x20this\x20can\x20be\x20set\x20on\x20create.\x20When\x20l\
    eft\x20blank,\x20a\x20random\x20ID\x20will\n\x20be\x20generated.\n\n\x0f\
    \n\x05\x04>\x02\0\x04\x12\x06\xbf\x05\x04\xbb\x05\x18\n\r\n\x05\x04>\x02\
    \0\x05\x12\x04\xbf\x05\x04\t\n\r\n\x05\x04>\x02\0\x01\x12\x04\xbf\x05\n\
    \x0c\n\r\n\x05\x04>\x02\0\x03\x12\x04\xbf\x05\x0f\x10\n1\n\x04\x04>\x02\
    \x01\x12\x04\xc2\x05\x04\x16\x1a#\x20Multicast\x20Address\x20for\x20this\
    \x20group.\n\n\x0f\n\x05\x04>\x02\x01\x04\x12\x06\xc2\x05\x04\xbf\x05\
    \x11\n\r\n\x05\x04>\x02\x01\x05\x12\x04\xc2\x05\x04\t\n\r\n\x05\x04>\x02\
    \x01\x01\x12\x04\xc2\x05\n\x11\n\r\n\x05\x04>\x02\x01\x03\x12\x04\xc2\
    \x05\x14\x15\n.\n\x04\x04>\x02\x02\x12\x04\xc5\x05\x04\x1b\x1a\x20\x20Mu\
    lticast\x20network\x20session\x20key.\n\n\x0f\n\x05\x04>\x02\x02\x04\x12\
    \x06\xc5\x05\x04\xc2\x05\x16\n\r\n\x05\x04>\x02\x02\x05\x12\x04\xc5\x05\
    \x04\t\n\r\n\x05\x04>\x02\x02\x01\x12\x04\xc5\x05\n\x16\n\r\n\x05\x04>\
    \x02\x02\x03\x12\x04\xc5\x05\x19\x1a\n)\n\x04\x04>\x02\x03\x12\x04\xc8\
    \x05\x04\x15\x1a\x1b\x20Frame-counter\x20(downlink).\n\n\x0f\n\x05\x04>\
    \x02\x03\x04\x12\x06\xc8\x05\x04\xc5\x05\x1b\n\r\n\x05\x04>\x02\x03\x05\
    \x12\x04\xc8\x05\x04\n\n\r\n\x05\x04>\x02\x03\x01\x12\x04\xc8\x05\x0b\
    \x10\n\r\n\x05\x04>\x02\x03\x03\x12\x04\xc8\x05\x13\x14\n:\n\x04\x04>\
    \x02\x04\x12\x04\xcb\x05\x04&\x1a,\x20Multicast-group\x20type\x20(Class-\
    B\x20or\x20Class-C).\n\n\x0f\n\x05\x04>\x02\x04\x04\x12\x06\xcb\x05\x04\
    \xc8\x05\x15\n\r\n\x05\x04>\x02\x04\x06\x12\x04\xcb\x05\x04\x16\n\r\n\
    \x05\x04>\x02\x04\x01\x12\x04\xcb\x05\x17!\n\r\n\x05\x04>\x02\x04\x03\
    \x12\x04\xcb\x05$%\n\x1a\n\x04\x04>\x02\x05\x12\x04\xce\x05\x04\x12\x1a\
    \x0c\x20Data-rate.\n\n\x0f\n\x05\x04>\x02\x05\x04\x12\x06\xce\x05\x04\
    \xcb\x05&\n\r\n\x05\x04>\x02\x05\x05\x12\x04\xce\x05\x04\n\n\r\n\x05\x04\
    >\x02\x05\x01\x12\x04\xce\x05\x0b\r\n\r\n\x05\x04>\x02\x05\x03\x12\x04\
    \xce\x05\x10\x11\n\x1f\n\x04\x04>\x02\x06\x12\x04\xd1\x05\x04\x19\x1a\
    \x11\x20Frequency\x20(Hz).\n\n\x0f\n\x05\x04>\x02\x06\x04\x12\x06\xd1\
    \x05\x04\xce\x05\x12\n\r\n\x05\x04>\x02\x06\x05\x12\x04\xd1\x05\x04\n\n\
    \r\n\x05\x04>\x02\x06\x01\x12\x04\xd1\x05\x0b\x14\n\r\n\x05\x04>\x02\x06\
    \x03\x12\x04\xd1\x05\x17\x18\nJ\n\x04\x04>\x02\x07\x12\x04\xd5\x05\x04\
    \x20\x1a<\x20Ping-slot\x20period.\n\x20Mandatory\x20for\x20Class-B\x20mu\
    lticast\x20groups.\n\n\x0f\n\x05\x04>\x02\x07\x04\x12\x06\xd5\x05\x04\
    \xd1\x05\x19\n\r\n\x05\x04>\x02\x07\x05\x12\x04\xd5\x05\x04\n\n\r\n\x05\
    \x04>\x02\x07\x01\x12\x04\xd5\x05\x0b\x1b\n\r\n\x05\x04>\x02\x07\x03\x12\
    \x04\xd5\x05\x1e\x1f\n#\n\x04\x04>\x02\x08\x12\x04\xd8\x05\x04!\x1a\x15\
    \x20Service-profile\x20ID.\n\n\x0f\n\x05\x04>\x02\x08\x04\x12\x06\xd8\
    \x05\x04\xd5\x05\x20\n\r\n\x05\x04>\x02\x08\x05\x12\x04\xd8\x05\x04\t\n\
    \r\n\x05\x04>\x02\x08\x01\x12\x04\xd8\x05\n\x1c\n\r\n\x05\x04>\x02\x08\
    \x03\x12\x04\xd8\x05\x1f\x20\n#\n\x04\x04>\x02\t\x12\x04\xdb\x05\x04\"\
    \x1a\x15\x20Routing-profile\x20ID.\n\n\x0f\n\x05\x04>\x02\t\x04\x12\x06\
    \xdb\x05\x04\xd8\x05!\n\r\n\x05\x04>\x02\t\x05\x12\x04\xdb\x05\x04\t\n\r\
    \n\x05\x04>\x02\t\x01\x12\x04\xdb\x05\n\x1c\n\r\n\x05\x04>\x02\t\x03\x12\
    \x04\xdb\x05\x1f!\n\x0c\n\x02\x04?\x12\x06\xde\x05\0\xe1\x05\x01\n\x0b\n\
    \x03\x04?\x01\x12\x04\xde\x05\x08#\n*\n\x04\x04?\x02\0\x12\x04\xe0\x05\
    \x04'\x1a\x1c\x20Multicast-group\x20to\x20create.\n\n\x0f\n\x05\x04?\x02\
    \0\x04\x12\x06\xe0\x05\x04\xde\x05%\n\r\n\x05\x04?\x02\0\x06\x12\x04\xe0\
    \x05\x04\x12\n\r\n\x05\x04?\x02\0\x01\x12\x04\xe0\x05\x13\"\n\r\n\x05\
    \x04?\x02\0\x03\x12\x04\xe0\x05%&\n\x0c\n\x02\x04@\x12\x06\xe3\x05\0\xe6\
    \x05\x01\n\x0b\n\x03\x04@\x01\x12\x04\xe3\x05\x08$\n#\n\x04\x04@\x02\0\
    \x12\x04\xe5\x05\x04\x11\x1a\x15\x20Multicast-group\x20ID.\n\n\x0f\n\x05\
    \x04@\x02\0\x04\x12\x06\xe5\x05\x04\xe3\x05&\n\r\n\x05\x04@\x02\0\x05\
    \x12\x04\xe5\x05\x04\t\n\r\n\x05\x04@\x02\0\x01\x12\x04\xe5\x05\n\x0c\n\
    \r\n\x05\x04@\x02\0\x03\x12\x04\xe5\x05\x0f\x10\n\x0c\n\x02\x04A\x12\x06\
    \xe8\x05\0\xeb\x05\x01\n\x0b\n\x03\x04A\x01\x12\x04\xe8\x05\x08\x20\n#\n\
    \x04\x04A\x02\0\x12\x04\xea\x05\x04\x11\x1a\x15\x20Multicast-group\x20ID\
    .\n\n\x0f\n\x05\x04A\x02\0\x04\x12\x06\xea\x05\x04\xe8\x05\"\n\r\n\x05\
    \x04A\x02\0\x05\x12\x04\xea\x05\x04\t\n\r\n\x05\x04A\x02\0\x01\x12\x04\
    \xea\x05\n\x0c\n\r\n\x05\x04A\x02\0\x03\x12\x04\xea\x05\x0f\x10\n\x0c\n\
    \x02\x04B\x12\x06\xed\x05\0\xf6\x05\x01\n\x0b\n\x03\x04B\x01\x12\x04\xed\
    \x05\x08!\n\x20\n\x04\x04B\x02\0\x12\x04\xef\x05\x04'\x1a\x12\x20Multica\
    st-group.\n\n\x0f\n\x05\x04B\x02\0\x04\x12\x06\xef\x05\x04\xed\x05#\n\r\
    \n\x05\x04B\x02\0\x06\x12\x04\xef\x05\x04\x12\n\r\n\x05\x04B\x02\0\x01\
    \x12\x04\xef\x05\x13\"\n\r\n\x05\x04B\x02\0\x03\x12\x04\xef\x05%&\n%\n\
    \x04\x04B\x02\x01\x12\x04\xf2\x05\x04-\x1a\x17\x20Created\x20at\x20times\
    tamp.\n\n\x0f\n\x05\x04B\x02\x01\x04\x12\x06\xf2\x05\x04\xef\x05'\n\r\n\
    \x05\x04B\x02\x01\x06\x12\x04\xf2\x05\x04\x1d\n\r\n\x05\x04B\x02\x01\x01\
    \x12\x04\xf2\x05\x1e(\n\r\n\x05\x04B\x02\x01\x03\x12\x04\xf2\x05+,\n&\n\
    \x04\x04B\x02\x02\x12\x04\xf5\x05\x04-\x1a\x18\x20Last\x20update\x20time\
    stamp.\n\n\x0f\n\x05\x04B\x02\x02\x04\x12\x06\xf5\x05\x04\xf2\x05-\n\r\n\
    \x05\x04B\x02\x02\x06\x12\x04\xf5\x05\x04\x1d\n\r\n\x05\x04B\x02\x02\x01\
    \x12\x04\xf5\x05\x1e(\n\r\n\x05\x04B\x02\x02\x03\x12\x04\xf5\x05+,\n\x0c\
    \n\x02\x04C\x12\x06\xf8\x05\0\xfb\x05\x01\n\x0b\n\x03\x04C\x01\x12\x04\
    \xf8\x05\x08#\n*\n\x04\x04C\x02\0\x12\x04\xfa\x05\x04'\x1a\x1c\x20Multic\
    ast-group\x20to\x20update.\n\n\x0f\n\x05\x04C\x02\0\x04\x12\x06\xfa\x05\
    \x04\xf8\x05%\n\r\n\x05\x04C\x02\0\x06\x12\x04\xfa\x05\x04\x12\n\r\n\x05\
    \x04C\x02\0\x01\x12\x04\xfa\x05\x13\"\n\r\n\x05\x04C\x02\0\x03\x12\x04\
    \xfa\x05%&\n\x0c\n\x02\x04D\x12\x06\xfd\x05\0\x80\x06\x01\n\x0b\n\x03\
    \x04D\x01\x12\x04\xfd\x05\x08#\n#\n\x04\x04D\x02\0\x12\x04\xff\x05\x04\
    \x11\x1a\x15\x20Multicast-group\x20ID.\n\n\x0f\n\x05\x04D\x02\0\x04\x12\
    \x06\xff\x05\x04\xfd\x05%\n\r\n\x05\x04D\x02\0\x05\x12\x04\xff\x05\x04\t\
    \n\r\n\x05\x04D\x02\0\x01\x12\x04\xff\x05\n\x0c\n\r\n\x05\x04D\x02\0\x03\
    \x12\x04\xff\x05\x0f\x10\n\x0c\n\x02\x04E\x12\x06\x83\x06\0\x89\x06\x01\
    \n\x0b\n\x03\x04E\x01\x12\x04\x83\x06\x08(\n\x1b\n\x04\x04E\x02\0\x12\
    \x04\x85\x06\x04\x16\x1a\r\x20Device\x20EUI.\n\n\x0f\n\x05\x04E\x02\0\
    \x04\x12\x06\x85\x06\x04\x83\x06*\n\r\n\x05\x04E\x02\0\x05\x12\x04\x85\
    \x06\x04\t\n\r\n\x05\x04E\x02\0\x01\x12\x04\x85\x06\n\x11\n\r\n\x05\x04E\
    \x02\0\x03\x12\x04\x85\x06\x14\x15\n#\n\x04\x04E\x02\x01\x12\x04\x88\x06\
    \x04!\x1a\x15\x20Multicast-group\x20ID.\n\n\x0f\n\x05\x04E\x02\x01\x04\
    \x12\x06\x88\x06\x04\x85\x06\x16\n\r\n\x05\x04E\x02\x01\x05\x12\x04\x88\
    \x06\x04\t\n\r\n\x05\x04E\x02\x01\x01\x12\x04\x88\x06\n\x1c\n\r\n\x05\
    \x04E\x02\x01\x03\x12\x04\x88\x06\x1f\x20\n\x0c\n\x02\x04F\x12\x06\x8b\
    \x06\0\x91\x06\x01\n\x0b\n\x03\x04F\x01\x12\x04\x8b\x06\x08-\n\x1b\n\x04\
    \x04F\x02\0\x12\x04\x8d\x06\x04\x16\x1a\r\x20Device\x20EUI.\n\n\x0f\n\
    \x05\x04F\x02\0\x04\x12\x06\x8d\x06\x04\x8b\x06/\n\r\n\x05\x04F\x02\0\
    \x05\x12\x04\x8d\x06\x04\t\n\r\n\x05\x04F\x02\0\x01\x12\x04\x8d\x06\n\
    \x11\n\r\n\x05\x04F\x02\0\x03\x12\x04\x8d\x06\x14\x15\n#\n\x04\x04F\x02\
    \x01\x12\x04\x90\x06\x04!\x1a\x15\x20Multicast-group\x20ID.\n\n\x0f\n\
    \x05\x04F\x02\x01\x04\x12\x06\x90\x06\x04\x8d\x06\x16\n\r\n\x05\x04F\x02\
    \x01\x05\x12\x04\x90\x06\x04\t\n\r\n\x05\x04F\x02\x01\x01\x12\x04\x90\
    \x06\n\x1c\n\r\n\x05\x04F\x02\x01\x03\x12\x04\x90\x06\x1f\x20\n\x0c\n\
    \x02\x04G\x12\x06\x93\x06\0\xa0\x06\x01\n\x0b\n\x03\x04G\x01\x12\x04\x93\
    \x06\x08\x1a\n#\n\x04\x04G\x02\0\x12\x04\x95\x06\x04!\x1a\x15\x20Multica\
    st-group\x20id.\n\n\x0f\n\x05\x04G\x02\0\x04\x12\x06\x95\x06\x04\x93\x06\
    \x1c\n\r\n\x05\x04G\x02\0\x05\x12\x04\x95\x06\x04\t\n\r\n\x05\x04G\x02\0\
    \x01\x12\x04\x95\x06\n\x1c\n\r\n\x05\x04G\x02\0\x03\x12\x04\x95\x06\x1f\
    \x20\n)\n\x04\x04G\x02\x01\x12\x04\x98\x06\x04\x15\x1a\x1b\x20Frame-coun\
    ter\x20of\x20payload.\n\n\x0f\n\x05\x04G\x02\x01\x04\x12\x06\x98\x06\x04\
    \x95\x06!\n\r\n\x05\x04G\x02\x01\x05\x12\x04\x98\x06\x04\n\n\r\n\x05\x04\
    G\x02\x01\x01\x12\x04\x98\x06\x0b\x10\n\r\n\x05\x04G\x02\x01\x03\x12\x04\
    \x98\x06\x13\x14\n&\n\x04\x04G\x02\x02\x12\x04\x9b\x06\x04\x16\x1a\x18\
    \x20Frame-port\x20of\x20payload.\n\n\x0f\n\x05\x04G\x02\x02\x04\x12\x06\
    \x9b\x06\x04\x98\x06\x15\n\r\n\x05\x04G\x02\x02\x05\x12\x04\x9b\x06\x04\
    \n\n\r\n\x05\x04G\x02\x02\x01\x12\x04\x9b\x06\x0b\x11\n\r\n\x05\x04G\x02\
    \x02\x03\x12\x04\x9b\x06\x14\x15\n+\n\x04\x04G\x02\x03\x12\x04\x9e\x06\
    \x04\x1a\x1a\x1d\x20Encrypted\x20FRMPayload\x20bytes.\n\n\x0f\n\x05\x04G\
    \x02\x03\x04\x12\x06\x9e\x06\x04\x9b\x06\x16\n\r\n\x05\x04G\x02\x03\x05\
    \x12\x04\x9e\x06\x04\t\n\r\n\x05\x04G\x02\x03\x01\x12\x04\x9e\x06\n\x15\
    \n\r\n\x05\x04G\x02\x03\x03\x12\x04\x9e\x06\x18\x19\n\x0c\n\x02\x04H\x12\
    \x06\xa2\x06\0\xa4\x06\x01\n\x0b\n\x03\x04H\x01\x12\x04\xa2\x06\x08(\n\
    \x0c\n\x04\x04H\x02\0\x12\x04\xa3\x06\x040\n\x0f\n\x05\x04H\x02\0\x04\
    \x12\x06\xa3\x06\x04\xa2\x06*\n\r\n\x05\x04H\x02\0\x06\x12\x04\xa3\x06\
    \x04\x16\n\r\n\x05\x04H\x02\0\x01\x12\x04\xa3\x06\x17+\n\r\n\x05\x04H\
    \x02\0\x03\x12\x04\xa3\x06./\n\x0c\n\x02\x04I\x12\x06\xa6\x06\0\xa9\x06\
    \x01\n\x0b\n\x03\x04I\x01\x12\x04\xa6\x06\x083\n#\n\x04\x04I\x02\0\x12\
    \x04\xa8\x06\x04!\x1a\x15\x20Multicast-group\x20id.\n\n\x0f\n\x05\x04I\
    \x02\0\x04\x12\x06\xa8\x06\x04\xa6\x065\n\r\n\x05\x04I\x02\0\x05\x12\x04\
    \xa8\x06\x04\t\n\r\n\x05\x04I\x02\0\x01\x12\x04\xa8\x06\n\x1c\n\r\n\x05\
    \x04I\x02\0\x03\x12\x04\xa8\x06\x1f\x20\n\x0c\n\x02\x04J\x12\x06\xab\x06\
    \0\xae\x06\x01\n\x0b\n\x03\x04J\x01\x12\x04\xab\x06\x086\n#\n\x04\x04J\
    \x02\0\x12\x04\xad\x06\x04!\x1a\x15\x20Multicast-group\x20id.\n\n\x0f\n\
    \x05\x04J\x02\0\x04\x12\x06\xad\x06\x04\xab\x068\n\r\n\x05\x04J\x02\0\
    \x05\x12\x04\xad\x06\x04\t\n\r\n\x05\x04J\x02\0\x01\x12\x04\xad\x06\n\
    \x1c\n\r\n\x05\x04J\x02\0\x03\x12\x04\xad\x06\x1f\x20\n\x0c\n\x02\x04K\
    \x12\x06\xb0\x06\0\xb2\x06\x01\n\x0b\n\x03\x04K\x01\x12\x04\xb0\x06\x087\
    \n\x0c\n\x04\x04K\x02\0\x12\x04\xb1\x06\x04:\n\r\n\x05\x04K\x02\0\x04\
    \x12\x04\xb1\x06\x04\x0c\n\r\n\x05\x04K\x02\0\x06\x12\x04\xb1\x06\r\x1f\
    \n\r\n\x05\x04K\x02\0\x01\x12\x04\xb1\x06\x205\n\r\n\x05\x04K\x02\0\x03\
    \x12\x04\xb1\x0689b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
