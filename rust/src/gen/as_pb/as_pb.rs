// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/as.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct DeviceActivationContext {
    // message fields
    pub dev_addr: ::std::vec::Vec<u8>,
    pub app_s_key: ::protobuf::SingularPtrField<super::common::KeyEnvelope>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceActivationContext {
    fn default() -> &'a DeviceActivationContext {
        <DeviceActivationContext as ::protobuf::Message>::default_instance()
    }
}

impl DeviceActivationContext {
    pub fn new() -> DeviceActivationContext {
        ::std::default::Default::default()
    }

    // bytes dev_addr = 1;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }

    // .common.KeyEnvelope app_s_key = 2;


    pub fn get_app_s_key(&self) -> &super::common::KeyEnvelope {
        self.app_s_key.as_ref().unwrap_or_else(|| super::common::KeyEnvelope::default_instance())
    }
    pub fn clear_app_s_key(&mut self) {
        self.app_s_key.clear();
    }

    pub fn has_app_s_key(&self) -> bool {
        self.app_s_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_s_key(&mut self, v: super::common::KeyEnvelope) {
        self.app_s_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_s_key(&mut self) -> &mut super::common::KeyEnvelope {
        if self.app_s_key.is_none() {
            self.app_s_key.set_default();
        }
        self.app_s_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_app_s_key(&mut self) -> super::common::KeyEnvelope {
        self.app_s_key.take().unwrap_or_else(|| super::common::KeyEnvelope::new())
    }
}

impl ::protobuf::Message for DeviceActivationContext {
    fn is_initialized(&self) -> bool {
        for v in &self.app_s_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.app_s_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_addr);
        }
        if let Some(ref v) = self.app_s_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_addr.is_empty() {
            os.write_bytes(1, &self.dev_addr)?;
        }
        if let Some(ref v) = self.app_s_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceActivationContext {
        DeviceActivationContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &DeviceActivationContext| { &m.dev_addr },
                    |m: &mut DeviceActivationContext| { &mut m.dev_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::KeyEnvelope>>(
                    "app_s_key",
                    |m: &DeviceActivationContext| { &m.app_s_key },
                    |m: &mut DeviceActivationContext| { &mut m.app_s_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceActivationContext>(
                    "DeviceActivationContext",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeviceActivationContext {
        static mut instance: ::protobuf::lazy::Lazy<DeviceActivationContext> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeviceActivationContext,
        };
        unsafe {
            instance.get(DeviceActivationContext::new)
        }
    }
}

impl ::protobuf::Clear for DeviceActivationContext {
    fn clear(&mut self) {
        self.dev_addr.clear();
        self.app_s_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceActivationContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceActivationContext {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleUplinkDataRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub join_eui: ::std::vec::Vec<u8>,
    pub f_cnt: u32,
    pub f_port: u32,
    pub adr: bool,
    pub dr: u32,
    pub tx_info: ::protobuf::SingularPtrField<super::gw::UplinkTXInfo>,
    pub rx_info: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>,
    pub data: ::std::vec::Vec<u8>,
    pub device_activation_context: ::protobuf::SingularPtrField<DeviceActivationContext>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleUplinkDataRequest {
    fn default() -> &'a HandleUplinkDataRequest {
        <HandleUplinkDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleUplinkDataRequest {
    pub fn new() -> HandleUplinkDataRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes join_eui = 2;


    pub fn get_join_eui(&self) -> &[u8] {
        &self.join_eui
    }
    pub fn clear_join_eui(&mut self) {
        self.join_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_join_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.join_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_join_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.join_eui
    }

    // Take field
    pub fn take_join_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.join_eui, ::std::vec::Vec::new())
    }

    // uint32 f_cnt = 3;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // uint32 f_port = 4;


    pub fn get_f_port(&self) -> u32 {
        self.f_port
    }
    pub fn clear_f_port(&mut self) {
        self.f_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_port(&mut self, v: u32) {
        self.f_port = v;
    }

    // bool adr = 5;


    pub fn get_adr(&self) -> bool {
        self.adr
    }
    pub fn clear_adr(&mut self) {
        self.adr = false;
    }

    // Param is passed by value, moved
    pub fn set_adr(&mut self, v: bool) {
        self.adr = v;
    }

    // uint32 dr = 6;


    pub fn get_dr(&self) -> u32 {
        self.dr
    }
    pub fn clear_dr(&mut self) {
        self.dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr(&mut self, v: u32) {
        self.dr = v;
    }

    // .gw.UplinkTXInfo tx_info = 7;


    pub fn get_tx_info(&self) -> &super::gw::UplinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::UplinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::UplinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::UplinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::UplinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::UplinkTXInfo::new())
    }

    // repeated .gw.UplinkRXInfo rx_info = 8;


    pub fn get_rx_info(&self) -> &[super::gw::UplinkRXInfo] {
        &self.rx_info
    }
    pub fn clear_rx_info(&mut self) {
        self.rx_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_rx_info(&mut self, v: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>) {
        self.rx_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rx_info(&mut self) -> &mut ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        &mut self.rx_info
    }

    // Take field
    pub fn take_rx_info(&mut self) -> ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        ::std::mem::replace(&mut self.rx_info, ::protobuf::RepeatedField::new())
    }

    // bytes data = 9;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // .as.DeviceActivationContext device_activation_context = 10;


    pub fn get_device_activation_context(&self) -> &DeviceActivationContext {
        self.device_activation_context.as_ref().unwrap_or_else(|| DeviceActivationContext::default_instance())
    }
    pub fn clear_device_activation_context(&mut self) {
        self.device_activation_context.clear();
    }

    pub fn has_device_activation_context(&self) -> bool {
        self.device_activation_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_activation_context(&mut self, v: DeviceActivationContext) {
        self.device_activation_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_activation_context(&mut self) -> &mut DeviceActivationContext {
        if self.device_activation_context.is_none() {
            self.device_activation_context.set_default();
        }
        self.device_activation_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_activation_context(&mut self) -> DeviceActivationContext {
        self.device_activation_context.take().unwrap_or_else(|| DeviceActivationContext::new())
    }
}

impl ::protobuf::Message for HandleUplinkDataRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.device_activation_context {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.join_eui)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_port = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.adr = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dr = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rx_info)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_activation_context)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if !self.join_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.join_eui);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(3, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.f_port != 0 {
            my_size += ::protobuf::rt::value_size(4, self.f_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.adr != false {
            my_size += 2;
        }
        if self.dr != 0 {
            my_size += ::protobuf::rt::value_size(6, self.dr, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rx_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.data);
        }
        if let Some(ref v) = self.device_activation_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if !self.join_eui.is_empty() {
            os.write_bytes(2, &self.join_eui)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(3, self.f_cnt)?;
        }
        if self.f_port != 0 {
            os.write_uint32(4, self.f_port)?;
        }
        if self.adr != false {
            os.write_bool(5, self.adr)?;
        }
        if self.dr != 0 {
            os.write_uint32(6, self.dr)?;
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rx_info {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(9, &self.data)?;
        }
        if let Some(ref v) = self.device_activation_context.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleUplinkDataRequest {
        HandleUplinkDataRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &HandleUplinkDataRequest| { &m.dev_eui },
                    |m: &mut HandleUplinkDataRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "join_eui",
                    |m: &HandleUplinkDataRequest| { &m.join_eui },
                    |m: &mut HandleUplinkDataRequest| { &mut m.join_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &HandleUplinkDataRequest| { &m.f_cnt },
                    |m: &mut HandleUplinkDataRequest| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_port",
                    |m: &HandleUplinkDataRequest| { &m.f_port },
                    |m: &mut HandleUplinkDataRequest| { &mut m.f_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "adr",
                    |m: &HandleUplinkDataRequest| { &m.adr },
                    |m: &mut HandleUplinkDataRequest| { &mut m.adr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dr",
                    |m: &HandleUplinkDataRequest| { &m.dr },
                    |m: &mut HandleUplinkDataRequest| { &mut m.dr },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkTXInfo>>(
                    "tx_info",
                    |m: &HandleUplinkDataRequest| { &m.tx_info },
                    |m: &mut HandleUplinkDataRequest| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkRXInfo>>(
                    "rx_info",
                    |m: &HandleUplinkDataRequest| { &m.rx_info },
                    |m: &mut HandleUplinkDataRequest| { &mut m.rx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &HandleUplinkDataRequest| { &m.data },
                    |m: &mut HandleUplinkDataRequest| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceActivationContext>>(
                    "device_activation_context",
                    |m: &HandleUplinkDataRequest| { &m.device_activation_context },
                    |m: &mut HandleUplinkDataRequest| { &mut m.device_activation_context },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleUplinkDataRequest>(
                    "HandleUplinkDataRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleUplinkDataRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleUplinkDataRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleUplinkDataRequest,
        };
        unsafe {
            instance.get(HandleUplinkDataRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleUplinkDataRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.join_eui.clear();
        self.f_cnt = 0;
        self.f_port = 0;
        self.adr = false;
        self.dr = 0;
        self.tx_info.clear();
        self.rx_info.clear();
        self.data.clear();
        self.device_activation_context.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleUplinkDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleUplinkDataRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleProprietaryUplinkRequest {
    // message fields
    pub mac_payload: ::std::vec::Vec<u8>,
    pub mic: ::std::vec::Vec<u8>,
    pub tx_info: ::protobuf::SingularPtrField<super::gw::UplinkTXInfo>,
    pub rx_info: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleProprietaryUplinkRequest {
    fn default() -> &'a HandleProprietaryUplinkRequest {
        <HandleProprietaryUplinkRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleProprietaryUplinkRequest {
    pub fn new() -> HandleProprietaryUplinkRequest {
        ::std::default::Default::default()
    }

    // bytes mac_payload = 1;


    pub fn get_mac_payload(&self) -> &[u8] {
        &self.mac_payload
    }
    pub fn clear_mac_payload(&mut self) {
        self.mac_payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_mac_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.mac_payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mac_payload
    }

    // Take field
    pub fn take_mac_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mac_payload, ::std::vec::Vec::new())
    }

    // bytes mic = 2;


    pub fn get_mic(&self) -> &[u8] {
        &self.mic
    }
    pub fn clear_mic(&mut self) {
        self.mic.clear();
    }

    // Param is passed by value, moved
    pub fn set_mic(&mut self, v: ::std::vec::Vec<u8>) {
        self.mic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mic(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mic
    }

    // Take field
    pub fn take_mic(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mic, ::std::vec::Vec::new())
    }

    // .gw.UplinkTXInfo tx_info = 3;


    pub fn get_tx_info(&self) -> &super::gw::UplinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::UplinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::UplinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::UplinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::UplinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::UplinkTXInfo::new())
    }

    // repeated .gw.UplinkRXInfo rx_info = 4;


    pub fn get_rx_info(&self) -> &[super::gw::UplinkRXInfo] {
        &self.rx_info
    }
    pub fn clear_rx_info(&mut self) {
        self.rx_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_rx_info(&mut self, v: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>) {
        self.rx_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rx_info(&mut self) -> &mut ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        &mut self.rx_info
    }

    // Take field
    pub fn take_rx_info(&mut self) -> ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        ::std::mem::replace(&mut self.rx_info, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HandleProprietaryUplinkRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mac_payload)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mic)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rx_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.mac_payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.mac_payload);
        }
        if !self.mic.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.mic);
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rx_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.mac_payload.is_empty() {
            os.write_bytes(1, &self.mac_payload)?;
        }
        if !self.mic.is_empty() {
            os.write_bytes(2, &self.mic)?;
        }
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rx_info {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleProprietaryUplinkRequest {
        HandleProprietaryUplinkRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "mac_payload",
                    |m: &HandleProprietaryUplinkRequest| { &m.mac_payload },
                    |m: &mut HandleProprietaryUplinkRequest| { &mut m.mac_payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "mic",
                    |m: &HandleProprietaryUplinkRequest| { &m.mic },
                    |m: &mut HandleProprietaryUplinkRequest| { &mut m.mic },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkTXInfo>>(
                    "tx_info",
                    |m: &HandleProprietaryUplinkRequest| { &m.tx_info },
                    |m: &mut HandleProprietaryUplinkRequest| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkRXInfo>>(
                    "rx_info",
                    |m: &HandleProprietaryUplinkRequest| { &m.rx_info },
                    |m: &mut HandleProprietaryUplinkRequest| { &mut m.rx_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleProprietaryUplinkRequest>(
                    "HandleProprietaryUplinkRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleProprietaryUplinkRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleProprietaryUplinkRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleProprietaryUplinkRequest,
        };
        unsafe {
            instance.get(HandleProprietaryUplinkRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleProprietaryUplinkRequest {
    fn clear(&mut self) {
        self.mac_payload.clear();
        self.mic.clear();
        self.tx_info.clear();
        self.rx_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleProprietaryUplinkRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleProprietaryUplinkRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleErrorRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub field_type: ErrorType,
    pub error: ::std::string::String,
    pub f_cnt: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleErrorRequest {
    fn default() -> &'a HandleErrorRequest {
        <HandleErrorRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleErrorRequest {
    pub fn new() -> HandleErrorRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // .as.ErrorType type = 3;


    pub fn get_field_type(&self) -> ErrorType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ErrorType::GENERIC;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ErrorType) {
        self.field_type = v;
    }

    // string error = 4;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    // uint32 f_cnt = 5;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }
}

impl ::protobuf::Message for HandleErrorRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if self.field_type != ErrorType::GENERIC {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.error);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(5, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if self.field_type != ErrorType::GENERIC {
            os.write_enum(3, self.field_type.value())?;
        }
        if !self.error.is_empty() {
            os.write_string(4, &self.error)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(5, self.f_cnt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleErrorRequest {
        HandleErrorRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &HandleErrorRequest| { &m.dev_eui },
                    |m: &mut HandleErrorRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorType>>(
                    "type",
                    |m: &HandleErrorRequest| { &m.field_type },
                    |m: &mut HandleErrorRequest| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &HandleErrorRequest| { &m.error },
                    |m: &mut HandleErrorRequest| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &HandleErrorRequest| { &m.f_cnt },
                    |m: &mut HandleErrorRequest| { &mut m.f_cnt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleErrorRequest>(
                    "HandleErrorRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleErrorRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleErrorRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleErrorRequest,
        };
        unsafe {
            instance.get(HandleErrorRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleErrorRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.field_type = ErrorType::GENERIC;
        self.error.clear();
        self.f_cnt = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleErrorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleErrorRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleDownlinkACKRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub f_cnt: u32,
    pub acknowledged: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleDownlinkACKRequest {
    fn default() -> &'a HandleDownlinkACKRequest {
        <HandleDownlinkACKRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleDownlinkACKRequest {
    pub fn new() -> HandleDownlinkACKRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // uint32 f_cnt = 2;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // bool acknowledged = 3;


    pub fn get_acknowledged(&self) -> bool {
        self.acknowledged
    }
    pub fn clear_acknowledged(&mut self) {
        self.acknowledged = false;
    }

    // Param is passed by value, moved
    pub fn set_acknowledged(&mut self, v: bool) {
        self.acknowledged = v;
    }
}

impl ::protobuf::Message for HandleDownlinkACKRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.acknowledged = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(2, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.acknowledged != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(2, self.f_cnt)?;
        }
        if self.acknowledged != false {
            os.write_bool(3, self.acknowledged)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleDownlinkACKRequest {
        HandleDownlinkACKRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &HandleDownlinkACKRequest| { &m.dev_eui },
                    |m: &mut HandleDownlinkACKRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &HandleDownlinkACKRequest| { &m.f_cnt },
                    |m: &mut HandleDownlinkACKRequest| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "acknowledged",
                    |m: &HandleDownlinkACKRequest| { &m.acknowledged },
                    |m: &mut HandleDownlinkACKRequest| { &mut m.acknowledged },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleDownlinkACKRequest>(
                    "HandleDownlinkACKRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleDownlinkACKRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleDownlinkACKRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleDownlinkACKRequest,
        };
        unsafe {
            instance.get(HandleDownlinkACKRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleDownlinkACKRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.f_cnt = 0;
        self.acknowledged = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleDownlinkACKRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleDownlinkACKRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetDeviceStatusRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub battery: u32,
    pub margin: i32,
    pub external_power_source: bool,
    pub battery_level_unavailable: bool,
    pub battery_level: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetDeviceStatusRequest {
    fn default() -> &'a SetDeviceStatusRequest {
        <SetDeviceStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetDeviceStatusRequest {
    pub fn new() -> SetDeviceStatusRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // uint32 battery = 2;


    pub fn get_battery(&self) -> u32 {
        self.battery
    }
    pub fn clear_battery(&mut self) {
        self.battery = 0;
    }

    // Param is passed by value, moved
    pub fn set_battery(&mut self, v: u32) {
        self.battery = v;
    }

    // int32 margin = 3;


    pub fn get_margin(&self) -> i32 {
        self.margin
    }
    pub fn clear_margin(&mut self) {
        self.margin = 0;
    }

    // Param is passed by value, moved
    pub fn set_margin(&mut self, v: i32) {
        self.margin = v;
    }

    // bool external_power_source = 4;


    pub fn get_external_power_source(&self) -> bool {
        self.external_power_source
    }
    pub fn clear_external_power_source(&mut self) {
        self.external_power_source = false;
    }

    // Param is passed by value, moved
    pub fn set_external_power_source(&mut self, v: bool) {
        self.external_power_source = v;
    }

    // bool battery_level_unavailable = 5;


    pub fn get_battery_level_unavailable(&self) -> bool {
        self.battery_level_unavailable
    }
    pub fn clear_battery_level_unavailable(&mut self) {
        self.battery_level_unavailable = false;
    }

    // Param is passed by value, moved
    pub fn set_battery_level_unavailable(&mut self, v: bool) {
        self.battery_level_unavailable = v;
    }

    // float battery_level = 6;


    pub fn get_battery_level(&self) -> f32 {
        self.battery_level
    }
    pub fn clear_battery_level(&mut self) {
        self.battery_level = 0.;
    }

    // Param is passed by value, moved
    pub fn set_battery_level(&mut self, v: f32) {
        self.battery_level = v;
    }
}

impl ::protobuf::Message for SetDeviceStatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.battery = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.margin = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.external_power_source = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.battery_level_unavailable = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.battery_level = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if self.battery != 0 {
            my_size += ::protobuf::rt::value_size(2, self.battery, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.margin != 0 {
            my_size += ::protobuf::rt::value_size(3, self.margin, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.external_power_source != false {
            my_size += 2;
        }
        if self.battery_level_unavailable != false {
            my_size += 2;
        }
        if self.battery_level != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if self.battery != 0 {
            os.write_uint32(2, self.battery)?;
        }
        if self.margin != 0 {
            os.write_int32(3, self.margin)?;
        }
        if self.external_power_source != false {
            os.write_bool(4, self.external_power_source)?;
        }
        if self.battery_level_unavailable != false {
            os.write_bool(5, self.battery_level_unavailable)?;
        }
        if self.battery_level != 0. {
            os.write_float(6, self.battery_level)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetDeviceStatusRequest {
        SetDeviceStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &SetDeviceStatusRequest| { &m.dev_eui },
                    |m: &mut SetDeviceStatusRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "battery",
                    |m: &SetDeviceStatusRequest| { &m.battery },
                    |m: &mut SetDeviceStatusRequest| { &mut m.battery },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "margin",
                    |m: &SetDeviceStatusRequest| { &m.margin },
                    |m: &mut SetDeviceStatusRequest| { &mut m.margin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "external_power_source",
                    |m: &SetDeviceStatusRequest| { &m.external_power_source },
                    |m: &mut SetDeviceStatusRequest| { &mut m.external_power_source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "battery_level_unavailable",
                    |m: &SetDeviceStatusRequest| { &m.battery_level_unavailable },
                    |m: &mut SetDeviceStatusRequest| { &mut m.battery_level_unavailable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "battery_level",
                    |m: &SetDeviceStatusRequest| { &m.battery_level },
                    |m: &mut SetDeviceStatusRequest| { &mut m.battery_level },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetDeviceStatusRequest>(
                    "SetDeviceStatusRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetDeviceStatusRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetDeviceStatusRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetDeviceStatusRequest,
        };
        unsafe {
            instance.get(SetDeviceStatusRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetDeviceStatusRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.battery = 0;
        self.margin = 0;
        self.external_power_source = false;
        self.battery_level_unavailable = false;
        self.battery_level = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetDeviceStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetDeviceStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetDeviceLocationRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub location: ::protobuf::SingularPtrField<super::common::Location>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetDeviceLocationRequest {
    fn default() -> &'a SetDeviceLocationRequest {
        <SetDeviceLocationRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetDeviceLocationRequest {
    pub fn new() -> SetDeviceLocationRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // .common.Location location = 2;


    pub fn get_location(&self) -> &super::common::Location {
        self.location.as_ref().unwrap_or_else(|| super::common::Location::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: super::common::Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut super::common::Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> super::common::Location {
        self.location.take().unwrap_or_else(|| super::common::Location::new())
    }
}

impl ::protobuf::Message for SetDeviceLocationRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetDeviceLocationRequest {
        SetDeviceLocationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &SetDeviceLocationRequest| { &m.dev_eui },
                    |m: &mut SetDeviceLocationRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Location>>(
                    "location",
                    |m: &SetDeviceLocationRequest| { &m.location },
                    |m: &mut SetDeviceLocationRequest| { &mut m.location },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetDeviceLocationRequest>(
                    "SetDeviceLocationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetDeviceLocationRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetDeviceLocationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetDeviceLocationRequest,
        };
        unsafe {
            instance.get(SetDeviceLocationRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetDeviceLocationRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetDeviceLocationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetDeviceLocationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleGatewayStatsRequest {
    // message fields
    pub gateway_id: ::std::vec::Vec<u8>,
    pub stats_id: ::std::vec::Vec<u8>,
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub location: ::protobuf::SingularPtrField<super::common::Location>,
    pub rx_packets_received: u32,
    pub rx_packets_received_ok: u32,
    pub tx_packets_received: u32,
    pub tx_packets_emitted: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleGatewayStatsRequest {
    fn default() -> &'a HandleGatewayStatsRequest {
        <HandleGatewayStatsRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleGatewayStatsRequest {
    pub fn new() -> HandleGatewayStatsRequest {
        ::std::default::Default::default()
    }

    // bytes gateway_id = 1;


    pub fn get_gateway_id(&self) -> &[u8] {
        &self.gateway_id
    }
    pub fn clear_gateway_id(&mut self) {
        self.gateway_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.gateway_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.gateway_id
    }

    // Take field
    pub fn take_gateway_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.gateway_id, ::std::vec::Vec::new())
    }

    // bytes stats_id = 2;


    pub fn get_stats_id(&self) -> &[u8] {
        &self.stats_id
    }
    pub fn clear_stats_id(&mut self) {
        self.stats_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_stats_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.stats_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stats_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.stats_id
    }

    // Take field
    pub fn take_stats_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.stats_id, ::std::vec::Vec::new())
    }

    // .google.protobuf.Timestamp time = 3;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .common.Location location = 4;


    pub fn get_location(&self) -> &super::common::Location {
        self.location.as_ref().unwrap_or_else(|| super::common::Location::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: super::common::Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut super::common::Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> super::common::Location {
        self.location.take().unwrap_or_else(|| super::common::Location::new())
    }

    // uint32 rx_packets_received = 5;


    pub fn get_rx_packets_received(&self) -> u32 {
        self.rx_packets_received
    }
    pub fn clear_rx_packets_received(&mut self) {
        self.rx_packets_received = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_packets_received(&mut self, v: u32) {
        self.rx_packets_received = v;
    }

    // uint32 rx_packets_received_ok = 6;


    pub fn get_rx_packets_received_ok(&self) -> u32 {
        self.rx_packets_received_ok
    }
    pub fn clear_rx_packets_received_ok(&mut self) {
        self.rx_packets_received_ok = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_packets_received_ok(&mut self, v: u32) {
        self.rx_packets_received_ok = v;
    }

    // uint32 tx_packets_received = 7;


    pub fn get_tx_packets_received(&self) -> u32 {
        self.tx_packets_received
    }
    pub fn clear_tx_packets_received(&mut self) {
        self.tx_packets_received = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_packets_received(&mut self, v: u32) {
        self.tx_packets_received = v;
    }

    // uint32 tx_packets_emitted = 8;


    pub fn get_tx_packets_emitted(&self) -> u32 {
        self.tx_packets_emitted
    }
    pub fn clear_tx_packets_emitted(&mut self) {
        self.tx_packets_emitted = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_packets_emitted(&mut self, v: u32) {
        self.tx_packets_emitted = v;
    }
}

impl ::protobuf::Message for HandleGatewayStatsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.gateway_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.stats_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx_packets_received = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx_packets_received_ok = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_packets_received = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_packets_emitted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gateway_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.gateway_id);
        }
        if !self.stats_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.stats_id);
        }
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.rx_packets_received != 0 {
            my_size += ::protobuf::rt::value_size(5, self.rx_packets_received, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rx_packets_received_ok != 0 {
            my_size += ::protobuf::rt::value_size(6, self.rx_packets_received_ok, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_packets_received != 0 {
            my_size += ::protobuf::rt::value_size(7, self.tx_packets_received, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_packets_emitted != 0 {
            my_size += ::protobuf::rt::value_size(8, self.tx_packets_emitted, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gateway_id.is_empty() {
            os.write_bytes(1, &self.gateway_id)?;
        }
        if !self.stats_id.is_empty() {
            os.write_bytes(2, &self.stats_id)?;
        }
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.rx_packets_received != 0 {
            os.write_uint32(5, self.rx_packets_received)?;
        }
        if self.rx_packets_received_ok != 0 {
            os.write_uint32(6, self.rx_packets_received_ok)?;
        }
        if self.tx_packets_received != 0 {
            os.write_uint32(7, self.tx_packets_received)?;
        }
        if self.tx_packets_emitted != 0 {
            os.write_uint32(8, self.tx_packets_emitted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleGatewayStatsRequest {
        HandleGatewayStatsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "gateway_id",
                    |m: &HandleGatewayStatsRequest| { &m.gateway_id },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.gateway_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "stats_id",
                    |m: &HandleGatewayStatsRequest| { &m.stats_id },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.stats_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "time",
                    |m: &HandleGatewayStatsRequest| { &m.time },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Location>>(
                    "location",
                    |m: &HandleGatewayStatsRequest| { &m.location },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.location },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx_packets_received",
                    |m: &HandleGatewayStatsRequest| { &m.rx_packets_received },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.rx_packets_received },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx_packets_received_ok",
                    |m: &HandleGatewayStatsRequest| { &m.rx_packets_received_ok },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.rx_packets_received_ok },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "tx_packets_received",
                    |m: &HandleGatewayStatsRequest| { &m.tx_packets_received },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.tx_packets_received },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "tx_packets_emitted",
                    |m: &HandleGatewayStatsRequest| { &m.tx_packets_emitted },
                    |m: &mut HandleGatewayStatsRequest| { &mut m.tx_packets_emitted },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleGatewayStatsRequest>(
                    "HandleGatewayStatsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleGatewayStatsRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleGatewayStatsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleGatewayStatsRequest,
        };
        unsafe {
            instance.get(HandleGatewayStatsRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleGatewayStatsRequest {
    fn clear(&mut self) {
        self.gateway_id.clear();
        self.stats_id.clear();
        self.time.clear();
        self.location.clear();
        self.rx_packets_received = 0;
        self.rx_packets_received_ok = 0;
        self.tx_packets_received = 0;
        self.tx_packets_emitted = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleGatewayStatsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleGatewayStatsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandleTxAckRequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub f_cnt: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HandleTxAckRequest {
    fn default() -> &'a HandleTxAckRequest {
        <HandleTxAckRequest as ::protobuf::Message>::default_instance()
    }
}

impl HandleTxAckRequest {
    pub fn new() -> HandleTxAckRequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // uint32 f_cnt = 2;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }
}

impl ::protobuf::Message for HandleTxAckRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(2, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(2, self.f_cnt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandleTxAckRequest {
        HandleTxAckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &HandleTxAckRequest| { &m.dev_eui },
                    |m: &mut HandleTxAckRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &HandleTxAckRequest| { &m.f_cnt },
                    |m: &mut HandleTxAckRequest| { &mut m.f_cnt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandleTxAckRequest>(
                    "HandleTxAckRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandleTxAckRequest {
        static mut instance: ::protobuf::lazy::Lazy<HandleTxAckRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandleTxAckRequest,
        };
        unsafe {
            instance.get(HandleTxAckRequest::new)
        }
    }
}

impl ::protobuf::Clear for HandleTxAckRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.f_cnt = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandleTxAckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandleTxAckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RXWindow {
    RX1 = 0,
    RX2 = 1,
}

impl ::protobuf::ProtobufEnum for RXWindow {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RXWindow> {
        match value {
            0 => ::std::option::Option::Some(RXWindow::RX1),
            1 => ::std::option::Option::Some(RXWindow::RX2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RXWindow] = &[
            RXWindow::RX1,
            RXWindow::RX2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RXWindow", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RXWindow {
}

impl ::std::default::Default for RXWindow {
    fn default() -> Self {
        RXWindow::RX1
    }
}

impl ::protobuf::reflect::ProtobufValue for RXWindow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorType {
    GENERIC = 0,
    OTAA = 1,
    DATA_UP_FCNT_RESET = 2,
    DATA_UP_MIC = 3,
    DEVICE_QUEUE_ITEM_SIZE = 4,
    DEVICE_QUEUE_ITEM_FCNT = 5,
    DATA_UP_FCNT_RETRANSMISSION = 6,
    DATA_DOWN_GATEWAY = 7,
}

impl ::protobuf::ProtobufEnum for ErrorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorType> {
        match value {
            0 => ::std::option::Option::Some(ErrorType::GENERIC),
            1 => ::std::option::Option::Some(ErrorType::OTAA),
            2 => ::std::option::Option::Some(ErrorType::DATA_UP_FCNT_RESET),
            3 => ::std::option::Option::Some(ErrorType::DATA_UP_MIC),
            4 => ::std::option::Option::Some(ErrorType::DEVICE_QUEUE_ITEM_SIZE),
            5 => ::std::option::Option::Some(ErrorType::DEVICE_QUEUE_ITEM_FCNT),
            6 => ::std::option::Option::Some(ErrorType::DATA_UP_FCNT_RETRANSMISSION),
            7 => ::std::option::Option::Some(ErrorType::DATA_DOWN_GATEWAY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorType] = &[
            ErrorType::GENERIC,
            ErrorType::OTAA,
            ErrorType::DATA_UP_FCNT_RESET,
            ErrorType::DATA_UP_MIC,
            ErrorType::DEVICE_QUEUE_ITEM_SIZE,
            ErrorType::DEVICE_QUEUE_ITEM_FCNT,
            ErrorType::DATA_UP_FCNT_RETRANSMISSION,
            ErrorType::DATA_DOWN_GATEWAY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ErrorType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ErrorType {
}

impl ::std::default::Default for ErrorType {
    fn default() -> Self {
        ErrorType::GENERIC
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bas/as.proto\x12\x02as\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgo\
    ogle/protobuf/timestamp.proto\x1a\x13common/common.proto\x1a\x0bgw/gw.pr\
    oto\"e\n\x17DeviceActivationContext\x12\x19\n\x08dev_addr\x18\x01\x20\
    \x01(\x0cR\x07devAddr\x12/\n\tapp_s_key\x18\x02\x20\x01(\x0b2\x13.common\
    .KeyEnvelopeR\x07appSKey\"\xde\x02\n\x17HandleUplinkDataRequest\x12\x17\
    \n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\x19\n\x08join_eui\x18\
    \x02\x20\x01(\x0cR\x07joinEui\x12\x13\n\x05f_cnt\x18\x03\x20\x01(\rR\x04\
    fCnt\x12\x15\n\x06f_port\x18\x04\x20\x01(\rR\x05fPort\x12\x10\n\x03adr\
    \x18\x05\x20\x01(\x08R\x03adr\x12\x0e\n\x02dr\x18\x06\x20\x01(\rR\x02dr\
    \x12)\n\x07tx_info\x18\x07\x20\x01(\x0b2\x10.gw.UplinkTXInfoR\x06txInfo\
    \x12)\n\x07rx_info\x18\x08\x20\x03(\x0b2\x10.gw.UplinkRXInfoR\x06rxInfo\
    \x12\x12\n\x04data\x18\t\x20\x01(\x0cR\x04data\x12W\n\x19device_activati\
    on_context\x18\n\x20\x01(\x0b2\x1b.as.DeviceActivationContextR\x17device\
    ActivationContext\"\xa9\x01\n\x1eHandleProprietaryUplinkRequest\x12\x1f\
    \n\x0bmac_payload\x18\x01\x20\x01(\x0cR\nmacPayload\x12\x10\n\x03mic\x18\
    \x02\x20\x01(\x0cR\x03mic\x12)\n\x07tx_info\x18\x03\x20\x01(\x0b2\x10.gw\
    .UplinkTXInfoR\x06txInfo\x12)\n\x07rx_info\x18\x04\x20\x03(\x0b2\x10.gw.\
    UplinkRXInfoR\x06rxInfo\"{\n\x12HandleErrorRequest\x12\x17\n\x07dev_eui\
    \x18\x01\x20\x01(\x0cR\x06devEui\x12!\n\x04type\x18\x03\x20\x01(\x0e2\r.\
    as.ErrorTypeR\x04type\x12\x14\n\x05error\x18\x04\x20\x01(\tR\x05error\
    \x12\x13\n\x05f_cnt\x18\x05\x20\x01(\rR\x04fCnt\"l\n\x18HandleDownlinkAC\
    KRequest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\x13\n\
    \x05f_cnt\x18\x02\x20\x01(\rR\x04fCnt\x12\"\n\x0cacknowledged\x18\x03\
    \x20\x01(\x08R\x0cacknowledged\"\xf8\x01\n\x16SetDeviceStatusRequest\x12\
    \x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\x18\n\x07battery\
    \x18\x02\x20\x01(\rR\x07battery\x12\x16\n\x06margin\x18\x03\x20\x01(\x05\
    R\x06margin\x122\n\x15external_power_source\x18\x04\x20\x01(\x08R\x13ext\
    ernalPowerSource\x12:\n\x19battery_level_unavailable\x18\x05\x20\x01(\
    \x08R\x17batteryLevelUnavailable\x12#\n\rbattery_level\x18\x06\x20\x01(\
    \x02R\x0cbatteryLevel\"a\n\x18SetDeviceLocationRequest\x12\x17\n\x07dev_\
    eui\x18\x01\x20\x01(\x0cR\x06devEui\x12,\n\x08location\x18\x02\x20\x01(\
    \x0b2\x10.common.LocationR\x08location\"\xf6\x02\n\x19HandleGatewayStats\
    Request\x12\x1d\n\ngateway_id\x18\x01\x20\x01(\x0cR\tgatewayId\x12\x19\n\
    \x08stats_id\x18\x02\x20\x01(\x0cR\x07statsId\x12.\n\x04time\x18\x03\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x04time\x12,\n\x08location\x18\
    \x04\x20\x01(\x0b2\x10.common.LocationR\x08location\x12.\n\x13rx_packets\
    _received\x18\x05\x20\x01(\rR\x11rxPacketsReceived\x123\n\x16rx_packets_\
    received_ok\x18\x06\x20\x01(\rR\x13rxPacketsReceivedOk\x12.\n\x13tx_pack\
    ets_received\x18\x07\x20\x01(\rR\x11txPacketsReceived\x12,\n\x12tx_packe\
    ts_emitted\x18\x08\x20\x01(\rR\x10txPacketsEmitted\"B\n\x12HandleTxAckRe\
    quest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEui\x12\x13\n\x05\
    f_cnt\x18\x02\x20\x01(\rR\x04fCnt*\x1c\n\x08RXWindow\x12\x07\n\x03RX1\
    \x10\0\x12\x07\n\x03RX2\x10\x01*\xbb\x01\n\tErrorType\x12\x0b\n\x07GENER\
    IC\x10\0\x12\x08\n\x04OTAA\x10\x01\x12\x16\n\x12DATA_UP_FCNT_RESET\x10\
    \x02\x12\x0f\n\x0bDATA_UP_MIC\x10\x03\x12\x1a\n\x16DEVICE_QUEUE_ITEM_SIZ\
    E\x10\x04\x12\x1a\n\x16DEVICE_QUEUE_ITEM_FCNT\x10\x05\x12\x1f\n\x1bDATA_\
    UP_FCNT_RETRANSMISSION\x10\x06\x12\x15\n\x11DATA_DOWN_GATEWAY\x10\x072\
    \xf2\x04\n\x18ApplicationServerService\x12I\n\x10HandleUplinkData\x12\
    \x1b.as.HandleUplinkDataRequest\x1a\x16.google.protobuf.Empty\"\0\x12W\n\
    \x17HandleProprietaryUplink\x12\".as.HandleProprietaryUplinkRequest\x1a\
    \x16.google.protobuf.Empty\"\0\x12?\n\x0bHandleError\x12\x16.as.HandleEr\
    rorRequest\x1a\x16.google.protobuf.Empty\"\0\x12K\n\x11HandleDownlinkACK\
    \x12\x1c.as.HandleDownlinkACKRequest\x1a\x16.google.protobuf.Empty\"\0\
    \x12M\n\x12HandleGatewayStats\x12\x1d.as.HandleGatewayStatsRequest\x1a\
    \x16.google.protobuf.Empty\"\0\x12?\n\x0bHandleTxAck\x12\x16.as.HandleTx\
    AckRequest\x1a\x16.google.protobuf.Empty\"\0\x12G\n\x0fSetDeviceStatus\
    \x12\x1a.as.SetDeviceStatusRequest\x1a\x16.google.protobuf.Empty\"\0\x12\
    K\n\x11SetDeviceLocation\x12\x1c.as.SetDeviceLocationRequest\x1a\x16.goo\
    gle.protobuf.Empty\"\0B,Z*github.com/brocaar/chirpstack-api/go/v3/asJ\
    \xf73\n\x07\x12\x05\0\0\xda\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\x08\n\n\x08\n\x01\x08\x12\x03\x04\0A\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0A\n\t\n\x02\x03\0\x12\x03\x06\x07$\n\t\n\x02\
    \x03\x01\x12\x03\x07\x07(\n\t\n\x02\x03\x02\x12\x03\x08\x07\x1c\n\t\n\
    \x02\x03\x03\x12\x03\t\x07\x14\na\n\x02\x06\0\x12\x04\r\0%\x01\x1aU\x20A\
    pplicationServerService\x20is\x20the\x20service\x20providing\x20the\x20a\
    pplication-server\x20interface.\n\n\n\n\x03\x06\0\x01\x12\x03\r\x08\x20\
    \nP\n\x04\x06\0\x02\0\x12\x03\x0f\x04T\x1aC\x20HandleUplinkData\x20handl\
    es\x20uplink\x20data\x20received\x20from\x20an\x20end-device.\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x0f\x08\x18\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x0f\x190\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0f;P\nK\n\x04\x06\0\
    \x02\x01\x12\x03\x12\x04b\x1a>\x20HandleProprietaryUplink\x20handles\x20\
    proprietary\x20uplink\x20payloads.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x12\x08\x1f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x12\x20>\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x12I^\n4\n\x04\x06\0\x02\x02\x12\x03\x15\
    \x04J\x1a'\x20HandleError\x20handles\x20an\x20error\x20message.\n\n\x0c\
    \n\x05\x06\0\x02\x02\x01\x12\x03\x15\x08\x13\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03\x15\x14&\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x151F\nI\n\
    \x04\x06\0\x02\x03\x12\x03\x18\x04V\x1a<\x20HandleDownlinkACK\x20handles\
    \x20a\x20downlink\x20ACK\x20or\x20nACK\x20response.\n\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03\x18\x08\x19\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\
    \x18\x1a2\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x18=R\nB\n\x04\x06\0\x02\
    \x04\x12\x03\x1b\x04X\x1a5\x20HandleGatewayStats\x20handles\x20the\x20gi\
    ven\x20gateway\x20stats.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x1b\x08\
    \x1a\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x1b\x1b4\n\x0c\n\x05\x06\0\
    \x02\x04\x03\x12\x03\x1b?T\n:\n\x04\x06\0\x02\x05\x12\x03\x1e\x04J\x1a-\
    \x20HandleTXACK\x20handles\x20the\x20TX\x20acknowledgement.\n\n\x0c\n\
    \x05\x06\0\x02\x05\x01\x12\x03\x1e\x08\x13\n\x0c\n\x05\x06\0\x02\x05\x02\
    \x12\x03\x1e\x14&\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x03\x1e1F\nF\n\x04\
    \x06\0\x02\x06\x12\x03!\x04R\x1a9\x20SetDeviceStatus\x20updates\x20the\
    \x20device-status\x20for\x20a\x20device.\n\n\x0c\n\x05\x06\0\x02\x06\x01\
    \x12\x03!\x08\x17\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03!\x18.\n\x0c\n\
    \x05\x06\0\x02\x06\x03\x12\x03!9N\nJ\n\x04\x06\0\x02\x07\x12\x03$\x04V\
    \x1a=\x20SetDeviceLocation\x20updates\x20the\x20device-location\x20for\
    \x20a\x20device.\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03$\x08\x19\n\x0c\
    \n\x05\x06\0\x02\x07\x02\x12\x03$\x1a2\n\x0c\n\x05\x06\0\x02\x07\x03\x12\
    \x03$=R\n\n\n\x02\x05\0\x12\x04'\0*\x01\n\n\n\x03\x05\0\x01\x12\x03'\x05\
    \r\n\x0b\n\x04\x05\0\x02\0\x12\x03(\x04\x0c\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03(\x04\x07\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03(\n\x0b\n\x0b\n\x04\
    \x05\0\x02\x01\x12\x03)\x04\x0c\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03)\
    \x04\x07\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03)\n\x0b\n\n\n\x02\x05\x01\
    \x12\x04,\0D\x01\n\n\n\x03\x05\x01\x01\x12\x03,\x05\x0e\n\"\n\x04\x05\
    \x01\x02\0\x12\x03.\x04\x10\x1a\x15\x20Generic\x20error\x20type.\n\n\x0c\
    \n\x05\x05\x01\x02\0\x01\x12\x03.\x04\x0b\n\x0c\n\x05\x05\x01\x02\0\x02\
    \x12\x03.\x0e\x0f\n\x1a\n\x04\x05\x01\x02\x01\x12\x031\x04\r\x1a\r\x20OT\
    AA\x20error.\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x031\x04\x08\n\x0c\n\
    \x05\x05\x01\x02\x01\x02\x12\x031\x0b\x0c\n.\n\x04\x05\x01\x02\x02\x12\
    \x034\x04\x1b\x1a!\x20Uplink\x20frame-counter\x20was\x20reset.\n\n\x0c\n\
    \x05\x05\x01\x02\x02\x01\x12\x034\x04\x16\n\x0c\n\x05\x05\x01\x02\x02\
    \x02\x12\x034\x19\x1a\n\x20\n\x04\x05\x01\x02\x03\x12\x037\x04\x14\x1a\
    \x13\x20Uplink\x20MIC\x20error.\n\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\
    \x037\x04\x0f\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x037\x12\x13\n+\n\x04\
    \x05\x01\x02\x04\x12\x03:\x04\x1f\x1a\x1e\x20Downlink\x20payload\x20size\
    \x20error.\n\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03:\x04\x1a\n\x0c\n\
    \x05\x05\x01\x02\x04\x02\x12\x03:\x1d\x1e\n,\n\x04\x05\x01\x02\x05\x12\
    \x03=\x04\x1f\x1a\x1f\x20Downlink\x20frame-counter\x20error.\n\n\x0c\n\
    \x05\x05\x01\x02\x05\x01\x12\x03=\x04\x1a\n\x0c\n\x05\x05\x01\x02\x05\
    \x02\x12\x03=\x1d\x1e\n3\n\x04\x05\x01\x02\x06\x12\x03@\x04$\x1a&\x20Upl\
    ink\x20frame-counter\x20retransmission.\n\n\x0c\n\x05\x05\x01\x02\x06\
    \x01\x12\x03@\x04\x1f\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03@\"#\n&\n\
    \x04\x05\x01\x02\x07\x12\x03C\x04\x1a\x1a\x19\x20Downlink\x20gateway\x20\
    error.\n\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x03C\x04\x15\n\x0c\n\x05\
    \x05\x01\x02\x07\x02\x12\x03C\x18\x19\n\n\n\x02\x04\0\x12\x04G\0M\x01\n\
    \n\n\x03\x04\0\x01\x12\x03G\x08\x1f\n'\n\x04\x04\0\x02\0\x12\x03I\x04\
    \x17\x1a\x1a\x20Assigned\x20Device\x20Address.\n\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04I\x04G!\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03I\x04\t\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03I\n\x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03I\
    \x15\x16\n2\n\x04\x04\0\x02\x01\x12\x03L\x04%\x1a%\x20Application\x20ses\
    sion\x20key\x20(envelope).\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04L\x04I\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03L\x04\x16\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03L\x17\x20\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03L#$\n\
    \n\n\x02\x04\x01\x12\x04P\0q\x01\n\n\n\x03\x04\x01\x01\x12\x03P\x08\x1f\
    \n$\n\x04\x04\x01\x02\0\x12\x03R\x04\x16\x1a\x17\x20DevEUI\x20EUI\x20(8\
    \x20bytes).\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04R\x04P!\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03R\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03R\n\
    \x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03R\x14\x15\n;\n\x04\x04\x01\x02\
    \x01\x12\x03U\x04\x17\x1a.\x20Join\x20EUI\x20used\x20for\x20OTAA\x20acti\
    vation\x20(8\x20bytes).\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04U\x04R\
    \x16\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03U\x04\t\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03U\n\x12\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03U\x15\
    \x16\n\x1d\n\x04\x04\x01\x02\x02\x12\x03X\x04\x15\x1a\x10\x20Frame-count\
    er.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04X\x04U\x17\n\x0c\n\x05\x04\
    \x01\x02\x02\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03X\
    \x0b\x10\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03X\x13\x14\n\x1a\n\x04\
    \x04\x01\x02\x03\x12\x03[\x04\x16\x1a\r\x20Frame\x20port.\n\n\r\n\x05\
    \x04\x01\x02\x03\x04\x12\x04[\x04X\x15\n\x0c\n\x05\x04\x01\x02\x03\x05\
    \x12\x03[\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03[\x0b\x11\n\x0c\n\
    \x05\x04\x01\x02\x03\x03\x12\x03[\x14\x15\n\x1b\n\x04\x04\x01\x02\x04\
    \x12\x03^\x04\x11\x1a\x0e\x20ADR\x20enabled.\n\n\r\n\x05\x04\x01\x02\x04\
    \x04\x12\x04^\x04[\x16\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03^\x04\x08\
    \n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03^\t\x0c\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03^\x0f\x10\n\x19\n\x04\x04\x01\x02\x05\x12\x03a\x04\x12\
    \x1a\x0c\x20Data-rate.\n\n\r\n\x05\x04\x01\x02\x05\x04\x12\x04a\x04^\x11\
    \n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03a\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x05\x01\x12\x03a\x0b\r\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03a\x10\x11\
    \n\x1c\n\x04\x04\x01\x02\x06\x12\x03d\x04\x20\x1a\x0f\x20TX\x20meta-data\
    .\n\n\r\n\x05\x04\x01\x02\x06\x04\x12\x04d\x04a\x12\n\x0c\n\x05\x04\x01\
    \x02\x06\x06\x12\x03d\x04\x13\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03d\
    \x14\x1b\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03d\x1e\x1f\n\x1c\n\x04\
    \x04\x01\x02\x07\x12\x03g\x04)\x1a\x0f\x20RX\x20meta-data.\n\n\x0c\n\x05\
    \x04\x01\x02\x07\x04\x12\x03g\x04\x0c\n\x0c\n\x05\x04\x01\x02\x07\x06\
    \x12\x03g\r\x1c\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03g\x1d$\n\x0c\n\
    \x05\x04\x01\x02\x07\x03\x12\x03g'(\n)\n\x04\x04\x01\x02\x08\x12\x03j\
    \x04\x13\x1a\x1c\x20Received\x20data\x20(encrypted).\n\n\r\n\x05\x04\x01\
    \x02\x08\x04\x12\x04j\x04g)\n\x0c\n\x05\x04\x01\x02\x08\x05\x12\x03j\x04\
    \t\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03j\n\x0e\n\x0c\n\x05\x04\x01\
    \x02\x08\x03\x12\x03j\x11\x12\n\xa7\x01\n\x04\x04\x01\x02\t\x12\x03p\x04\
    ;\x1a\x99\x01\x20Device\x20activation\x20context.\n\x20\n\x20This\x20fie\
    ld\x20is\x20only\x20set\x20on\x20the\x20first\x20uplink\x20frame\x20when\
    \x20the\x20security\n\x20context\x20has\x20changed\x20(e.g.\x20a\x20new\
    \x20OTAA\x20(re)activation).\n\n\r\n\x05\x04\x01\x02\t\x04\x12\x04p\x04j\
    \x13\n\x0c\n\x05\x04\x01\x02\t\x06\x12\x03p\x04\x1b\n\x0c\n\x05\x04\x01\
    \x02\t\x01\x12\x03p\x1c5\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03p8:\n\n\n\
    \x02\x04\x02\x12\x04s\0\x7f\x01\n\n\n\x03\x04\x02\x01\x12\x03s\x08&\n;\n\
    \x04\x04\x02\x02\0\x12\x03u\x04\x1a\x1a.\x20MACPayload\x20of\x20the\x20p\
    roprietary\x20LoRaWAN\x20frame.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04u\
    \x04s(\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03u\x04\t\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03u\n\x15\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03u\x18\x19\
    \n4\n\x04\x04\x02\x02\x01\x12\x03x\x04\x12\x1a'\x20MIC\x20of\x20the\x20p\
    roprietary\x20LoRaWAN\x20frame.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04x\
    \x04u\x1a\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03x\x04\t\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03x\n\r\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03x\
    \x10\x11\n8\n\x04\x04\x02\x02\x02\x12\x03{\x04\x20\x1a+\x20TXInfo\x20con\
    tains\x20the\x20TX\x20related\x20meta-data.\n\n\r\n\x05\x04\x02\x02\x02\
    \x04\x12\x04{\x04x\x12\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03{\x04\x13\
    \n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03{\x14\x1b\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03{\x1e\x1f\n8\n\x04\x04\x02\x02\x03\x12\x03~\x04)\x1a\
    +\x20RXInfo\x20contains\x20the\x20RX\x20related\x20meta-data.\n\n\x0c\n\
    \x05\x04\x02\x02\x03\x04\x12\x03~\x04\x0c\n\x0c\n\x05\x04\x02\x02\x03\
    \x06\x12\x03~\r\x1c\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03~\x1d$\n\x0c\
    \n\x05\x04\x02\x02\x03\x03\x12\x03~'(\n\x0c\n\x02\x04\x03\x12\x06\x81\
    \x01\0\x8d\x01\x01\n\x0b\n\x03\x04\x03\x01\x12\x04\x81\x01\x08\x1a\n%\n\
    \x04\x04\x03\x02\0\x12\x04\x83\x01\x04\x16\x1a\x17\x20Device\x20EUI\x20(\
    8\x20bytes).\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\x83\x01\x04\x81\x01\
    \x1c\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\x83\x01\x04\t\n\r\n\x05\x04\x03\
    \x02\0\x01\x12\x04\x83\x01\n\x11\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x83\
    \x01\x14\x15\n\"\n\x04\x04\x03\x02\x01\x12\x04\x86\x01\x04\x17\x1a\x14\
    \x20Type\x20of\x20the\x20error.\n\n\x0f\n\x05\x04\x03\x02\x01\x04\x12\
    \x06\x86\x01\x04\x83\x01\x16\n\r\n\x05\x04\x03\x02\x01\x06\x12\x04\x86\
    \x01\x04\r\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x86\x01\x0e\x12\n\r\n\
    \x05\x04\x03\x02\x01\x03\x12\x04\x86\x01\x15\x16\n2\n\x04\x04\x03\x02\
    \x02\x12\x04\x89\x01\x04\x15\x1a$\x20Error\x20string\x20describing\x20th\
    e\x20error.\n\n\x0f\n\x05\x04\x03\x02\x02\x04\x12\x06\x89\x01\x04\x86\
    \x01\x17\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\x89\x01\x04\n\n\r\n\x05\
    \x04\x03\x02\x02\x01\x12\x04\x89\x01\x0b\x10\n\r\n\x05\x04\x03\x02\x02\
    \x03\x12\x04\x89\x01\x13\x14\nC\n\x04\x04\x03\x02\x03\x12\x04\x8c\x01\
    \x04\x15\x1a5\x20Frame-counter\x20(if\x20applicable)\x20related\x20to\
    \x20the\x20error.\n\n\x0f\n\x05\x04\x03\x02\x03\x04\x12\x06\x8c\x01\x04\
    \x89\x01\x15\n\r\n\x05\x04\x03\x02\x03\x05\x12\x04\x8c\x01\x04\n\n\r\n\
    \x05\x04\x03\x02\x03\x01\x12\x04\x8c\x01\x0b\x10\n\r\n\x05\x04\x03\x02\
    \x03\x03\x12\x04\x8c\x01\x13\x14\n\x0c\n\x02\x04\x04\x12\x06\x8f\x01\0\
    \x98\x01\x01\n\x0b\n\x03\x04\x04\x01\x12\x04\x8f\x01\x08\x20\n%\n\x04\
    \x04\x04\x02\0\x12\x04\x91\x01\x04\x16\x1a\x17\x20Device\x20EUI\x20(8\
    \x20bytes).\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\x91\x01\x04\x8f\x01\
    \"\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\x91\x01\x04\t\n\r\n\x05\x04\x04\
    \x02\0\x01\x12\x04\x91\x01\n\x11\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x91\
    \x01\x14\x15\n'\n\x04\x04\x04\x02\x01\x12\x04\x94\x01\x04\x15\x1a\x19\
    \x20Downlink\x20frame-counter.\n\n\x0f\n\x05\x04\x04\x02\x01\x04\x12\x06\
    \x94\x01\x04\x91\x01\x16\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\x94\x01\
    \x04\n\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\x94\x01\x0b\x10\n\r\n\x05\
    \x04\x04\x02\x01\x03\x12\x04\x94\x01\x13\x14\n'\n\x04\x04\x04\x02\x02\
    \x12\x04\x97\x01\x04\x1a\x1a\x19\x20Frame\x20was\x20acknowledged?\n\n\
    \x0f\n\x05\x04\x04\x02\x02\x04\x12\x06\x97\x01\x04\x94\x01\x15\n\r\n\x05\
    \x04\x04\x02\x02\x05\x12\x04\x97\x01\x04\x08\n\r\n\x05\x04\x04\x02\x02\
    \x01\x12\x04\x97\x01\t\x15\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\x97\x01\
    \x18\x19\n\x0c\n\x02\x04\x05\x12\x06\x9a\x01\0\xb0\x01\x01\n\x0b\n\x03\
    \x04\x05\x01\x12\x04\x9a\x01\x08\x1e\n%\n\x04\x04\x05\x02\0\x12\x04\x9c\
    \x01\x04\x16\x1a\x17\x20Device\x20EUI\x20(8\x20bytes).\n\n\x0f\n\x05\x04\
    \x05\x02\0\x04\x12\x06\x9c\x01\x04\x9a\x01\x20\n\r\n\x05\x04\x05\x02\0\
    \x05\x12\x04\x9c\x01\x04\t\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x9c\x01\n\
    \x11\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x9c\x01\x14\x15\n\x8a\x02\n\x04\
    \x04\x05\x02\x01\x12\x04\xa2\x01\x04\x17\x1a\xfb\x01\x20Battery\x20level\
    \x20(deprecated,\x20use\x20battery_level).\n\x200:\x20\x20\x20\x20\x20\
    \x20The\x20end-device\x20is\x20connected\x20to\x20an\x20external\x20powe\
    r\x20source\n\x201..254:\x20The\x20battery\x20level,\x201\x20being\x20at\
    \x20minimum\x20and\x20254\x20being\x20at\x20maximum\n\x20255:\x20\x20\
    \x20\x20The\x20end-device\x20was\x20not\x20able\x20to\x20measure\x20the\
    \x20battery\x20level\n\n\x0f\n\x05\x04\x05\x02\x01\x04\x12\x06\xa2\x01\
    \x04\x9c\x01\x16\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xa2\x01\x04\n\n\r\
    \n\x05\x04\x05\x02\x01\x01\x12\x04\xa2\x01\x0b\x12\n\r\n\x05\x04\x05\x02\
    \x01\x03\x12\x04\xa2\x01\x15\x16\nT\n\x04\x04\x05\x02\x02\x12\x04\xa6\
    \x01\x04\x16\x1aF\x20The\x20device\x20margin\x20status\n\x20-32..32:\x20\
    The\x20demodulation\x20SNR\x20ration\x20in\x20dB\n\n\x0f\n\x05\x04\x05\
    \x02\x02\x04\x12\x06\xa6\x01\x04\xa2\x01\x17\n\r\n\x05\x04\x05\x02\x02\
    \x05\x12\x04\xa6\x01\x04\t\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xa6\x01\
    \x0b\x11\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xa6\x01\x14\x15\n@\n\x04\
    \x04\x05\x02\x03\x12\x04\xa9\x01\x04#\x1a2\x20Device\x20is\x20connected\
    \x20to\x20an\x20external\x20power\x20source.\n\n\x0f\n\x05\x04\x05\x02\
    \x03\x04\x12\x06\xa9\x01\x04\xa6\x01\x16\n\r\n\x05\x04\x05\x02\x03\x05\
    \x12\x04\xa9\x01\x04\x08\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\xa9\x01\t\
    \x1e\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xa9\x01!\"\n7\n\x04\x04\x05\
    \x02\x04\x12\x04\xac\x01\x04'\x1a)\x20Device\x20battery\x20status\x20is\
    \x20not\x20available.\n\n\x0f\n\x05\x04\x05\x02\x04\x04\x12\x06\xac\x01\
    \x04\xa9\x01#\n\r\n\x05\x04\x05\x02\x04\x05\x12\x04\xac\x01\x04\x08\n\r\
    \n\x05\x04\x05\x02\x04\x01\x12\x04\xac\x01\t\"\n\r\n\x05\x04\x05\x02\x04\
    \x03\x12\x04\xac\x01%&\n.\n\x04\x04\x05\x02\x05\x12\x04\xaf\x01\x04\x1c\
    \x1a\x20\x20Battery\x20level\x20as\x20a\x20percentage.\n\n\x0f\n\x05\x04\
    \x05\x02\x05\x04\x12\x06\xaf\x01\x04\xac\x01'\n\r\n\x05\x04\x05\x02\x05\
    \x05\x12\x04\xaf\x01\x04\t\n\r\n\x05\x04\x05\x02\x05\x01\x12\x04\xaf\x01\
    \n\x17\n\r\n\x05\x04\x05\x02\x05\x03\x12\x04\xaf\x01\x1a\x1b\n\x0c\n\x02\
    \x04\x06\x12\x06\xb2\x01\0\xb8\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\
    \xb2\x01\x08\x20\n%\n\x04\x04\x06\x02\0\x12\x04\xb4\x01\x04\x16\x1a\x17\
    \x20Device\x20EUI\x20(8\x20bytes).\n\n\x0f\n\x05\x04\x06\x02\0\x04\x12\
    \x06\xb4\x01\x04\xb2\x01\"\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xb4\x01\
    \x04\t\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xb4\x01\n\x11\n\r\n\x05\x04\
    \x06\x02\0\x03\x12\x04\xb4\x01\x14\x15\n+\n\x04\x04\x06\x02\x01\x12\x04\
    \xb7\x01\x04!\x1a\x1d\x20The\x20location\x20of\x20the\x20device.\n\n\x0f\
    \n\x05\x04\x06\x02\x01\x04\x12\x06\xb7\x01\x04\xb4\x01\x16\n\r\n\x05\x04\
    \x06\x02\x01\x06\x12\x04\xb7\x01\x04\x13\n\r\n\x05\x04\x06\x02\x01\x01\
    \x12\x04\xb7\x01\x14\x1c\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\xb7\x01\
    \x1f\x20\n\x0c\n\x02\x04\x07\x12\x06\xba\x01\0\xd2\x01\x01\n\x0b\n\x03\
    \x04\x07\x01\x12\x04\xba\x01\x08!\n%\n\x04\x04\x07\x02\0\x12\x04\xbc\x01\
    \x04\x19\x1a\x17\x20Gateway\x20ID\x20(8\x20bytes).\n\n\x0f\n\x05\x04\x07\
    \x02\0\x04\x12\x06\xbc\x01\x04\xba\x01#\n\r\n\x05\x04\x07\x02\0\x05\x12\
    \x04\xbc\x01\x04\t\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xbc\x01\n\x14\n\r\
    \n\x05\x04\x07\x02\0\x03\x12\x04\xbc\x01\x17\x18\n\x20\n\x04\x04\x07\x02\
    \x01\x12\x04\xbf\x01\x04\x17\x1a\x12\x20Stats\x20ID\x20(UUID).\n\n\x0f\n\
    \x05\x04\x07\x02\x01\x04\x12\x06\xbf\x01\x04\xbc\x01\x19\n\r\n\x05\x04\
    \x07\x02\x01\x05\x12\x04\xbf\x01\x04\t\n\r\n\x05\x04\x07\x02\x01\x01\x12\
    \x04\xbf\x01\n\x12\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\xbf\x01\x15\x16\
    \n\x1a\n\x04\x04\x07\x02\x02\x12\x04\xc2\x01\x04'\x1a\x0c\x20Timestamp.\
    \n\n\x0f\n\x05\x04\x07\x02\x02\x04\x12\x06\xc2\x01\x04\xbf\x01\x17\n\r\n\
    \x05\x04\x07\x02\x02\x06\x12\x04\xc2\x01\x04\x1d\n\r\n\x05\x04\x07\x02\
    \x02\x01\x12\x04\xc2\x01\x1e\"\n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\xc2\
    \x01%&\n!\n\x04\x04\x07\x02\x03\x12\x04\xc5\x01\x04!\x1a\x13\x20Gateway\
    \x20location.\n\n\x0f\n\x05\x04\x07\x02\x03\x04\x12\x06\xc5\x01\x04\xc2\
    \x01'\n\r\n\x05\x04\x07\x02\x03\x06\x12\x04\xc5\x01\x04\x13\n\r\n\x05\
    \x04\x07\x02\x03\x01\x12\x04\xc5\x01\x14\x1c\n\r\n\x05\x04\x07\x02\x03\
    \x03\x12\x04\xc5\x01\x1f\x20\n'\n\x04\x04\x07\x02\x04\x12\x04\xc8\x01\
    \x04#\x1a\x19\x20Uplink\x20frames\x20received.\n\n\x0f\n\x05\x04\x07\x02\
    \x04\x04\x12\x06\xc8\x01\x04\xc5\x01!\n\r\n\x05\x04\x07\x02\x04\x05\x12\
    \x04\xc8\x01\x04\n\n\r\n\x05\x04\x07\x02\x04\x01\x12\x04\xc8\x01\x0b\x1e\
    \n\r\n\x05\x04\x07\x02\x04\x03\x12\x04\xc8\x01!\"\n*\n\x04\x04\x07\x02\
    \x05\x12\x04\xcb\x01\x04&\x1a\x1c\x20Uplink\x20frames\x20received\x20OK.\
    \n\n\x0f\n\x05\x04\x07\x02\x05\x04\x12\x06\xcb\x01\x04\xc8\x01#\n\r\n\
    \x05\x04\x07\x02\x05\x05\x12\x04\xcb\x01\x04\n\n\r\n\x05\x04\x07\x02\x05\
    \x01\x12\x04\xcb\x01\x0b!\n\r\n\x05\x04\x07\x02\x05\x03\x12\x04\xcb\x01$\
    %\n1\n\x04\x04\x07\x02\x06\x12\x04\xce\x01\x04#\x1a#\x20Downlink\x20tran\
    smissions\x20requested.\n\n\x0f\n\x05\x04\x07\x02\x06\x04\x12\x06\xce\
    \x01\x04\xcb\x01&\n\r\n\x05\x04\x07\x02\x06\x05\x12\x04\xce\x01\x04\n\n\
    \r\n\x05\x04\x07\x02\x06\x01\x12\x04\xce\x01\x0b\x1e\n\r\n\x05\x04\x07\
    \x02\x06\x03\x12\x04\xce\x01!\"\n!\n\x04\x04\x07\x02\x07\x12\x04\xd1\x01\
    \x04\"\x1a\x13\x20Downlink\x20emitted.\n\n\x0f\n\x05\x04\x07\x02\x07\x04\
    \x12\x06\xd1\x01\x04\xce\x01#\n\r\n\x05\x04\x07\x02\x07\x05\x12\x04\xd1\
    \x01\x04\n\n\r\n\x05\x04\x07\x02\x07\x01\x12\x04\xd1\x01\x0b\x1d\n\r\n\
    \x05\x04\x07\x02\x07\x03\x12\x04\xd1\x01\x20!\n\x0c\n\x02\x04\x08\x12\
    \x06\xd4\x01\0\xda\x01\x01\n\x0b\n\x03\x04\x08\x01\x12\x04\xd4\x01\x08\
    \x1a\n%\n\x04\x04\x08\x02\0\x12\x04\xd6\x01\x04\x16\x1a\x17\x20Device\
    \x20EUI\x20(8\x20bytes).\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xd6\x01\
    \x04\xd4\x01\x1c\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xd6\x01\x04\t\n\r\n\
    \x05\x04\x08\x02\0\x01\x12\x04\xd6\x01\n\x11\n\r\n\x05\x04\x08\x02\0\x03\
    \x12\x04\xd6\x01\x14\x15\n'\n\x04\x04\x08\x02\x01\x12\x04\xd9\x01\x04\
    \x15\x1a\x19\x20Downlink\x20frame-counter.\n\n\x0f\n\x05\x04\x08\x02\x01\
    \x04\x12\x06\xd9\x01\x04\xd6\x01\x16\n\r\n\x05\x04\x08\x02\x01\x05\x12\
    \x04\xd9\x01\x04\n\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xd9\x01\x0b\x10\
    \n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xd9\x01\x13\x14b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
