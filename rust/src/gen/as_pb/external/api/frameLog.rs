// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/frameLog.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct UplinkFrameLog {
    // message fields
    pub tx_info: ::protobuf::SingularPtrField<super::gw::UplinkTXInfo>,
    pub rx_info: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>,
    pub phy_payload_json: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UplinkFrameLog {
    fn default() -> &'a UplinkFrameLog {
        <UplinkFrameLog as ::protobuf::Message>::default_instance()
    }
}

impl UplinkFrameLog {
    pub fn new() -> UplinkFrameLog {
        ::std::default::Default::default()
    }

    // .gw.UplinkTXInfo tx_info = 1;


    pub fn get_tx_info(&self) -> &super::gw::UplinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::UplinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::UplinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::UplinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::UplinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::UplinkTXInfo::new())
    }

    // repeated .gw.UplinkRXInfo rx_info = 2;


    pub fn get_rx_info(&self) -> &[super::gw::UplinkRXInfo] {
        &self.rx_info
    }
    pub fn clear_rx_info(&mut self) {
        self.rx_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_rx_info(&mut self, v: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>) {
        self.rx_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rx_info(&mut self) -> &mut ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        &mut self.rx_info
    }

    // Take field
    pub fn take_rx_info(&mut self) -> ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        ::std::mem::replace(&mut self.rx_info, ::protobuf::RepeatedField::new())
    }

    // string phy_payload_json = 3;


    pub fn get_phy_payload_json(&self) -> &str {
        &self.phy_payload_json
    }
    pub fn clear_phy_payload_json(&mut self) {
        self.phy_payload_json.clear();
    }

    // Param is passed by value, moved
    pub fn set_phy_payload_json(&mut self, v: ::std::string::String) {
        self.phy_payload_json = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phy_payload_json(&mut self) -> &mut ::std::string::String {
        &mut self.phy_payload_json
    }

    // Take field
    pub fn take_phy_payload_json(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.phy_payload_json, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UplinkFrameLog {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rx_info)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.phy_payload_json)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rx_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.phy_payload_json.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.phy_payload_json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rx_info {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.phy_payload_json.is_empty() {
            os.write_string(3, &self.phy_payload_json)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UplinkFrameLog {
        UplinkFrameLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkTXInfo>>(
                    "tx_info",
                    |m: &UplinkFrameLog| { &m.tx_info },
                    |m: &mut UplinkFrameLog| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkRXInfo>>(
                    "rx_info",
                    |m: &UplinkFrameLog| { &m.rx_info },
                    |m: &mut UplinkFrameLog| { &mut m.rx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "phy_payload_json",
                    |m: &UplinkFrameLog| { &m.phy_payload_json },
                    |m: &mut UplinkFrameLog| { &mut m.phy_payload_json },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UplinkFrameLog>(
                    "UplinkFrameLog",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UplinkFrameLog {
        static mut instance: ::protobuf::lazy::Lazy<UplinkFrameLog> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UplinkFrameLog,
        };
        unsafe {
            instance.get(UplinkFrameLog::new)
        }
    }
}

impl ::protobuf::Clear for UplinkFrameLog {
    fn clear(&mut self) {
        self.tx_info.clear();
        self.rx_info.clear();
        self.phy_payload_json.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UplinkFrameLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UplinkFrameLog {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DownlinkFrameLog {
    // message fields
    pub tx_info: ::protobuf::SingularPtrField<super::gw::DownlinkTXInfo>,
    pub phy_payload_json: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DownlinkFrameLog {
    fn default() -> &'a DownlinkFrameLog {
        <DownlinkFrameLog as ::protobuf::Message>::default_instance()
    }
}

impl DownlinkFrameLog {
    pub fn new() -> DownlinkFrameLog {
        ::std::default::Default::default()
    }

    // .gw.DownlinkTXInfo tx_info = 1;


    pub fn get_tx_info(&self) -> &super::gw::DownlinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::DownlinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::DownlinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::DownlinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::DownlinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::DownlinkTXInfo::new())
    }

    // string phy_payload_json = 2;


    pub fn get_phy_payload_json(&self) -> &str {
        &self.phy_payload_json
    }
    pub fn clear_phy_payload_json(&mut self) {
        self.phy_payload_json.clear();
    }

    // Param is passed by value, moved
    pub fn set_phy_payload_json(&mut self, v: ::std::string::String) {
        self.phy_payload_json = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_phy_payload_json(&mut self) -> &mut ::std::string::String {
        &mut self.phy_payload_json
    }

    // Take field
    pub fn take_phy_payload_json(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.phy_payload_json, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DownlinkFrameLog {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.phy_payload_json)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.phy_payload_json.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.phy_payload_json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.phy_payload_json.is_empty() {
            os.write_string(2, &self.phy_payload_json)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DownlinkFrameLog {
        DownlinkFrameLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::DownlinkTXInfo>>(
                    "tx_info",
                    |m: &DownlinkFrameLog| { &m.tx_info },
                    |m: &mut DownlinkFrameLog| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "phy_payload_json",
                    |m: &DownlinkFrameLog| { &m.phy_payload_json },
                    |m: &mut DownlinkFrameLog| { &mut m.phy_payload_json },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DownlinkFrameLog>(
                    "DownlinkFrameLog",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DownlinkFrameLog {
        static mut instance: ::protobuf::lazy::Lazy<DownlinkFrameLog> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DownlinkFrameLog,
        };
        unsafe {
            instance.get(DownlinkFrameLog::new)
        }
    }
}

impl ::protobuf::Clear for DownlinkFrameLog {
    fn clear(&mut self) {
        self.tx_info.clear();
        self.phy_payload_json.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DownlinkFrameLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownlinkFrameLog {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RXWindow {
    RX1 = 0,
    RX2 = 1,
}

impl ::protobuf::ProtobufEnum for RXWindow {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RXWindow> {
        match value {
            0 => ::std::option::Option::Some(RXWindow::RX1),
            1 => ::std::option::Option::Some(RXWindow::RX2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RXWindow] = &[
            RXWindow::RX1,
            RXWindow::RX2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RXWindow", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RXWindow {
}

impl ::std::default::Default for RXWindow {
    fn default() -> Self {
        RXWindow::RX1
    }
}

impl ::protobuf::reflect::ProtobufValue for RXWindow {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eas/external/api/frameLog.proto\x12\x03api\x1a\x1fgoogle/protobuf/t\
    imestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x13common/commo\
    n.proto\x1a\x0bgw/gw.proto\"\x90\x01\n\x0eUplinkFrameLog\x12)\n\x07tx_in\
    fo\x18\x01\x20\x01(\x0b2\x10.gw.UplinkTXInfoR\x06txInfo\x12)\n\x07rx_inf\
    o\x18\x02\x20\x03(\x0b2\x10.gw.UplinkRXInfoR\x06rxInfo\x12(\n\x10phy_pay\
    load_json\x18\x03\x20\x01(\tR\x0ephyPayloadJSON\"i\n\x10DownlinkFrameLog\
    \x12+\n\x07tx_info\x18\x01\x20\x01(\x0b2\x12.gw.DownlinkTXInfoR\x06txInf\
    o\x12(\n\x10phy_payload_json\x18\x02\x20\x01(\tR\x0ephyPayloadJSON*\x1c\
    \n\x08RXWindow\x12\x07\n\x03RX1\x10\0\x12\x07\n\x03RX2\x10\x01B9Z7github\
    .com/brocaar/chirpstack-api/go/v3/as/external/apiJ\x9f\x06\n\x06\x12\x04\
    \0\0\"\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\
    \x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\
    \n\t\n\x02\x03\0\x12\x03\x06\x07(\n\t\n\x02\x03\x01\x12\x03\x07\x07'\n\t\
    \n\x02\x03\x02\x12\x03\x08\x07\x1c\n\t\n\x02\x03\x03\x12\x03\t\x07\x14\n\
    \n\n\x02\x05\0\x12\x04\x0c\0\x0f\x01\n\n\n\x03\x05\0\x01\x12\x03\x0c\x05\
    \r\n\x0b\n\x04\x05\0\x02\0\x12\x03\r\x08\x10\n\x0c\n\x05\x05\0\x02\0\x01\
    \x12\x03\r\x08\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\r\x0e\x0f\n\x0b\n\
    \x04\x05\0\x02\x01\x12\x03\x0e\x08\x10\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\x0e\x08\x0b\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0e\x0e\x0f\n\n\n\
    \x02\x04\0\x12\x04\x11\0\x1a\x01\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\x16\
    \n,\n\x04\x04\0\x02\0\x12\x03\x13\x04\x20\x1a\x1f\x20TX\x20information\
    \x20of\x20the\x20uplink.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x13\x04\x11\
    \x18\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x13\x04\x13\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x13\x14\x1b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x13\
    \x1e\x1f\n,\n\x04\x04\0\x02\x01\x12\x03\x16\x04)\x1a\x1f\x20RX\x20inform\
    ation\x20of\x20the\x20uplink.\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\
    \x16\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x16\r\x1c\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x16\x1d$\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x16'(\n\"\n\x04\x04\0\x02\x02\x12\x03\x19\x04?\x1a\x15\x20LoRaWAN\
    \x20PHYPayload.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x19\x04\x16)\n\x0c\
    \n\x05\x04\0\x02\x02\x05\x12\x03\x19\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x19\x0b\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x19\x1e\x1f\n\
    \x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x19\x20>\n\x0c\n\x05\x04\0\x02\x02\
    \n\x12\x03\x19-=\n\n\n\x02\x04\x01\x12\x04\x1c\0\"\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x1c\x08\x18\n.\n\x04\x04\x01\x02\0\x12\x03\x1e\x04\"\x1a!\
    \x20TX\x20information\x20of\x20the\x20downlink.\n\n\r\n\x05\x04\x01\x02\
    \0\x04\x12\x04\x1e\x04\x1c\x1a\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1e\
    \x04\x15\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1e\x16\x1d\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x1e\x20!\n\"\n\x04\x04\x01\x02\x01\x12\x03!\
    \x04?\x1a\x15\x20LoRaWAN\x20PHYPayload.\n\n\r\n\x05\x04\x01\x02\x01\x04\
    \x12\x04!\x04\x1e\"\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03!\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03!\x0b\x1b\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03!\x1e\x1f\n\x0c\n\x05\x04\x01\x02\x01\x08\x12\x03!\x20>\n\
    \x0c\n\x05\x04\x01\x02\x01\n\x12\x03!-=b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
