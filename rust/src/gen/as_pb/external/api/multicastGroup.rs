// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/multicastGroup.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct MulticastGroup {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub mc_addr: ::std::string::String,
    pub mc_nwk_s_key: ::std::string::String,
    pub mc_app_s_key: ::std::string::String,
    pub f_cnt: u32,
    pub group_type: MulticastGroupType,
    pub dr: u32,
    pub frequency: u32,
    pub ping_slot_period: u32,
    pub service_profile_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulticastGroup {
    fn default() -> &'a MulticastGroup {
        <MulticastGroup as ::protobuf::Message>::default_instance()
    }
}

impl MulticastGroup {
    pub fn new() -> MulticastGroup {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string mc_addr = 3;


    pub fn get_mc_addr(&self) -> &str {
        &self.mc_addr
    }
    pub fn clear_mc_addr(&mut self) {
        self.mc_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_mc_addr(&mut self, v: ::std::string::String) {
        self.mc_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mc_addr(&mut self) -> &mut ::std::string::String {
        &mut self.mc_addr
    }

    // Take field
    pub fn take_mc_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mc_addr, ::std::string::String::new())
    }

    // string mc_nwk_s_key = 4;


    pub fn get_mc_nwk_s_key(&self) -> &str {
        &self.mc_nwk_s_key
    }
    pub fn clear_mc_nwk_s_key(&mut self) {
        self.mc_nwk_s_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_mc_nwk_s_key(&mut self, v: ::std::string::String) {
        self.mc_nwk_s_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mc_nwk_s_key(&mut self) -> &mut ::std::string::String {
        &mut self.mc_nwk_s_key
    }

    // Take field
    pub fn take_mc_nwk_s_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mc_nwk_s_key, ::std::string::String::new())
    }

    // string mc_app_s_key = 5;


    pub fn get_mc_app_s_key(&self) -> &str {
        &self.mc_app_s_key
    }
    pub fn clear_mc_app_s_key(&mut self) {
        self.mc_app_s_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_mc_app_s_key(&mut self, v: ::std::string::String) {
        self.mc_app_s_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mc_app_s_key(&mut self) -> &mut ::std::string::String {
        &mut self.mc_app_s_key
    }

    // Take field
    pub fn take_mc_app_s_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mc_app_s_key, ::std::string::String::new())
    }

    // uint32 f_cnt = 6;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // .api.MulticastGroupType group_type = 7;


    pub fn get_group_type(&self) -> MulticastGroupType {
        self.group_type
    }
    pub fn clear_group_type(&mut self) {
        self.group_type = MulticastGroupType::CLASS_C;
    }

    // Param is passed by value, moved
    pub fn set_group_type(&mut self, v: MulticastGroupType) {
        self.group_type = v;
    }

    // uint32 dr = 8;


    pub fn get_dr(&self) -> u32 {
        self.dr
    }
    pub fn clear_dr(&mut self) {
        self.dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr(&mut self, v: u32) {
        self.dr = v;
    }

    // uint32 frequency = 9;


    pub fn get_frequency(&self) -> u32 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: u32) {
        self.frequency = v;
    }

    // uint32 ping_slot_period = 10;


    pub fn get_ping_slot_period(&self) -> u32 {
        self.ping_slot_period
    }
    pub fn clear_ping_slot_period(&mut self) {
        self.ping_slot_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_slot_period(&mut self, v: u32) {
        self.ping_slot_period = v;
    }

    // string service_profile_id = 11;


    pub fn get_service_profile_id(&self) -> &str {
        &self.service_profile_id
    }
    pub fn clear_service_profile_id(&mut self) {
        self.service_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_profile_id(&mut self, v: ::std::string::String) {
        self.service_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_profile_id
    }

    // Take field
    pub fn take_service_profile_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_profile_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MulticastGroup {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mc_addr)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mc_nwk_s_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mc_app_s_key)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.group_type, 7, &mut self.unknown_fields)?
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dr = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frequency = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ping_slot_period = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_profile_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.mc_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.mc_addr);
        }
        if !self.mc_nwk_s_key.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.mc_nwk_s_key);
        }
        if !self.mc_app_s_key.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.mc_app_s_key);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(6, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.group_type != MulticastGroupType::CLASS_C {
            my_size += ::protobuf::rt::enum_size(7, self.group_type);
        }
        if self.dr != 0 {
            my_size += ::protobuf::rt::value_size(8, self.dr, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(9, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ping_slot_period != 0 {
            my_size += ::protobuf::rt::value_size(10, self.ping_slot_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.service_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.service_profile_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.mc_addr.is_empty() {
            os.write_string(3, &self.mc_addr)?;
        }
        if !self.mc_nwk_s_key.is_empty() {
            os.write_string(4, &self.mc_nwk_s_key)?;
        }
        if !self.mc_app_s_key.is_empty() {
            os.write_string(5, &self.mc_app_s_key)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(6, self.f_cnt)?;
        }
        if self.group_type != MulticastGroupType::CLASS_C {
            os.write_enum(7, self.group_type.value())?;
        }
        if self.dr != 0 {
            os.write_uint32(8, self.dr)?;
        }
        if self.frequency != 0 {
            os.write_uint32(9, self.frequency)?;
        }
        if self.ping_slot_period != 0 {
            os.write_uint32(10, self.ping_slot_period)?;
        }
        if !self.service_profile_id.is_empty() {
            os.write_string(11, &self.service_profile_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulticastGroup {
        MulticastGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &MulticastGroup| { &m.id },
                    |m: &mut MulticastGroup| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &MulticastGroup| { &m.name },
                    |m: &mut MulticastGroup| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mc_addr",
                    |m: &MulticastGroup| { &m.mc_addr },
                    |m: &mut MulticastGroup| { &mut m.mc_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mc_nwk_s_key",
                    |m: &MulticastGroup| { &m.mc_nwk_s_key },
                    |m: &mut MulticastGroup| { &mut m.mc_nwk_s_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mc_app_s_key",
                    |m: &MulticastGroup| { &m.mc_app_s_key },
                    |m: &mut MulticastGroup| { &mut m.mc_app_s_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &MulticastGroup| { &m.f_cnt },
                    |m: &mut MulticastGroup| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MulticastGroupType>>(
                    "group_type",
                    |m: &MulticastGroup| { &m.group_type },
                    |m: &mut MulticastGroup| { &mut m.group_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dr",
                    |m: &MulticastGroup| { &m.dr },
                    |m: &mut MulticastGroup| { &mut m.dr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frequency",
                    |m: &MulticastGroup| { &m.frequency },
                    |m: &mut MulticastGroup| { &mut m.frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "ping_slot_period",
                    |m: &MulticastGroup| { &m.ping_slot_period },
                    |m: &mut MulticastGroup| { &mut m.ping_slot_period },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "service_profile_id",
                    |m: &MulticastGroup| { &m.service_profile_id },
                    |m: &mut MulticastGroup| { &mut m.service_profile_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MulticastGroup>(
                    "MulticastGroup",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MulticastGroup {
        static mut instance: ::protobuf::lazy::Lazy<MulticastGroup> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MulticastGroup,
        };
        unsafe {
            instance.get(MulticastGroup::new)
        }
    }
}

impl ::protobuf::Clear for MulticastGroup {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.mc_addr.clear();
        self.mc_nwk_s_key.clear();
        self.mc_app_s_key.clear();
        self.f_cnt = 0;
        self.group_type = MulticastGroupType::CLASS_C;
        self.dr = 0;
        self.frequency = 0;
        self.ping_slot_period = 0;
        self.service_profile_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulticastGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MulticastGroupListItem {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub service_profile_id: ::std::string::String,
    pub service_profile_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulticastGroupListItem {
    fn default() -> &'a MulticastGroupListItem {
        <MulticastGroupListItem as ::protobuf::Message>::default_instance()
    }
}

impl MulticastGroupListItem {
    pub fn new() -> MulticastGroupListItem {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string service_profile_id = 3;


    pub fn get_service_profile_id(&self) -> &str {
        &self.service_profile_id
    }
    pub fn clear_service_profile_id(&mut self) {
        self.service_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_profile_id(&mut self, v: ::std::string::String) {
        self.service_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_profile_id
    }

    // Take field
    pub fn take_service_profile_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_profile_id, ::std::string::String::new())
    }

    // string service_profile_name = 4;


    pub fn get_service_profile_name(&self) -> &str {
        &self.service_profile_name
    }
    pub fn clear_service_profile_name(&mut self) {
        self.service_profile_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_profile_name(&mut self, v: ::std::string::String) {
        self.service_profile_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile_name(&mut self) -> &mut ::std::string::String {
        &mut self.service_profile_name
    }

    // Take field
    pub fn take_service_profile_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_profile_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MulticastGroupListItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_profile_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_profile_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.service_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.service_profile_id);
        }
        if !self.service_profile_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.service_profile_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.service_profile_id.is_empty() {
            os.write_string(3, &self.service_profile_id)?;
        }
        if !self.service_profile_name.is_empty() {
            os.write_string(4, &self.service_profile_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulticastGroupListItem {
        MulticastGroupListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &MulticastGroupListItem| { &m.id },
                    |m: &mut MulticastGroupListItem| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &MulticastGroupListItem| { &m.name },
                    |m: &mut MulticastGroupListItem| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "service_profile_id",
                    |m: &MulticastGroupListItem| { &m.service_profile_id },
                    |m: &mut MulticastGroupListItem| { &mut m.service_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "service_profile_name",
                    |m: &MulticastGroupListItem| { &m.service_profile_name },
                    |m: &mut MulticastGroupListItem| { &mut m.service_profile_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MulticastGroupListItem>(
                    "MulticastGroupListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MulticastGroupListItem {
        static mut instance: ::protobuf::lazy::Lazy<MulticastGroupListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MulticastGroupListItem,
        };
        unsafe {
            instance.get(MulticastGroupListItem::new)
        }
    }
}

impl ::protobuf::Clear for MulticastGroupListItem {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.service_profile_id.clear();
        self.service_profile_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulticastGroupListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastGroupListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateMulticastGroupRequest {
    // message fields
    pub multicast_group: ::protobuf::SingularPtrField<MulticastGroup>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateMulticastGroupRequest {
    fn default() -> &'a CreateMulticastGroupRequest {
        <CreateMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateMulticastGroupRequest {
    pub fn new() -> CreateMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // .api.MulticastGroup multicast_group = 1;


    pub fn get_multicast_group(&self) -> &MulticastGroup {
        self.multicast_group.as_ref().unwrap_or_else(|| MulticastGroup::default_instance())
    }
    pub fn clear_multicast_group(&mut self) {
        self.multicast_group.clear();
    }

    pub fn has_multicast_group(&self) -> bool {
        self.multicast_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_group(&mut self, v: MulticastGroup) {
        self.multicast_group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group(&mut self) -> &mut MulticastGroup {
        if self.multicast_group.is_none() {
            self.multicast_group.set_default();
        }
        self.multicast_group.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_group(&mut self) -> MulticastGroup {
        self.multicast_group.take().unwrap_or_else(|| MulticastGroup::new())
    }
}

impl ::protobuf::Message for CreateMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_group {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_group)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_group.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateMulticastGroupRequest {
        CreateMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastGroup>>(
                    "multicast_group",
                    |m: &CreateMulticastGroupRequest| { &m.multicast_group },
                    |m: &mut CreateMulticastGroupRequest| { &mut m.multicast_group },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateMulticastGroupRequest>(
                    "CreateMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateMulticastGroupRequest,
        };
        unsafe {
            instance.get(CreateMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateMulticastGroupResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateMulticastGroupResponse {
    fn default() -> &'a CreateMulticastGroupResponse {
        <CreateMulticastGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateMulticastGroupResponse {
    pub fn new() -> CreateMulticastGroupResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateMulticastGroupResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateMulticastGroupResponse {
        CreateMulticastGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CreateMulticastGroupResponse| { &m.id },
                    |m: &mut CreateMulticastGroupResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateMulticastGroupResponse>(
                    "CreateMulticastGroupResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateMulticastGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateMulticastGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateMulticastGroupResponse,
        };
        unsafe {
            instance.get(CreateMulticastGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateMulticastGroupResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateMulticastGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateMulticastGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMulticastGroupRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMulticastGroupRequest {
    fn default() -> &'a GetMulticastGroupRequest {
        <GetMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMulticastGroupRequest {
    pub fn new() -> GetMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMulticastGroupRequest {
        GetMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GetMulticastGroupRequest| { &m.id },
                    |m: &mut GetMulticastGroupRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetMulticastGroupRequest>(
                    "GetMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMulticastGroupRequest,
        };
        unsafe {
            instance.get(GetMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetMulticastGroupRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMulticastGroupResponse {
    // message fields
    pub multicast_group: ::protobuf::SingularPtrField<MulticastGroup>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMulticastGroupResponse {
    fn default() -> &'a GetMulticastGroupResponse {
        <GetMulticastGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMulticastGroupResponse {
    pub fn new() -> GetMulticastGroupResponse {
        ::std::default::Default::default()
    }

    // .api.MulticastGroup multicast_group = 1;


    pub fn get_multicast_group(&self) -> &MulticastGroup {
        self.multicast_group.as_ref().unwrap_or_else(|| MulticastGroup::default_instance())
    }
    pub fn clear_multicast_group(&mut self) {
        self.multicast_group.clear();
    }

    pub fn has_multicast_group(&self) -> bool {
        self.multicast_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_group(&mut self, v: MulticastGroup) {
        self.multicast_group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group(&mut self) -> &mut MulticastGroup {
        if self.multicast_group.is_none() {
            self.multicast_group.set_default();
        }
        self.multicast_group.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_group(&mut self) -> MulticastGroup {
        self.multicast_group.take().unwrap_or_else(|| MulticastGroup::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetMulticastGroupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_group {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_group)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_group.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMulticastGroupResponse {
        GetMulticastGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastGroup>>(
                    "multicast_group",
                    |m: &GetMulticastGroupResponse| { &m.multicast_group },
                    |m: &mut GetMulticastGroupResponse| { &mut m.multicast_group },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetMulticastGroupResponse| { &m.created_at },
                    |m: &mut GetMulticastGroupResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetMulticastGroupResponse| { &m.updated_at },
                    |m: &mut GetMulticastGroupResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetMulticastGroupResponse>(
                    "GetMulticastGroupResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMulticastGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetMulticastGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMulticastGroupResponse,
        };
        unsafe {
            instance.get(GetMulticastGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetMulticastGroupResponse {
    fn clear(&mut self) {
        self.multicast_group.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMulticastGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMulticastGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateMulticastGroupRequest {
    // message fields
    pub multicast_group: ::protobuf::SingularPtrField<MulticastGroup>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateMulticastGroupRequest {
    fn default() -> &'a UpdateMulticastGroupRequest {
        <UpdateMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateMulticastGroupRequest {
    pub fn new() -> UpdateMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // .api.MulticastGroup multicast_group = 1;


    pub fn get_multicast_group(&self) -> &MulticastGroup {
        self.multicast_group.as_ref().unwrap_or_else(|| MulticastGroup::default_instance())
    }
    pub fn clear_multicast_group(&mut self) {
        self.multicast_group.clear();
    }

    pub fn has_multicast_group(&self) -> bool {
        self.multicast_group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_group(&mut self, v: MulticastGroup) {
        self.multicast_group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group(&mut self) -> &mut MulticastGroup {
        if self.multicast_group.is_none() {
            self.multicast_group.set_default();
        }
        self.multicast_group.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_group(&mut self) -> MulticastGroup {
        self.multicast_group.take().unwrap_or_else(|| MulticastGroup::new())
    }
}

impl ::protobuf::Message for UpdateMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_group {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_group)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_group.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateMulticastGroupRequest {
        UpdateMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastGroup>>(
                    "multicast_group",
                    |m: &UpdateMulticastGroupRequest| { &m.multicast_group },
                    |m: &mut UpdateMulticastGroupRequest| { &mut m.multicast_group },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateMulticastGroupRequest>(
                    "UpdateMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateMulticastGroupRequest,
        };
        unsafe {
            instance.get(UpdateMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteMulticastGroupRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteMulticastGroupRequest {
    fn default() -> &'a DeleteMulticastGroupRequest {
        <DeleteMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMulticastGroupRequest {
    pub fn new() -> DeleteMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteMulticastGroupRequest {
        DeleteMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &DeleteMulticastGroupRequest| { &m.id },
                    |m: &mut DeleteMulticastGroupRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteMulticastGroupRequest>(
                    "DeleteMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteMulticastGroupRequest,
        };
        unsafe {
            instance.get(DeleteMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteMulticastGroupRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddDeviceToMulticastGroupRequest {
    // message fields
    pub multicast_group_id: ::std::string::String,
    pub dev_eui: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddDeviceToMulticastGroupRequest {
    fn default() -> &'a AddDeviceToMulticastGroupRequest {
        <AddDeviceToMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddDeviceToMulticastGroupRequest {
    pub fn new() -> AddDeviceToMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // string multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &str {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::string::String) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::string::String::new())
    }

    // string dev_eui = 2;


    pub fn get_dev_eui(&self) -> &str {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::string::String) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::string::String {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dev_eui, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AddDeviceToMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multicast_group_id);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_string(1, &self.multicast_group_id)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_string(2, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddDeviceToMulticastGroupRequest {
        AddDeviceToMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "multicast_group_id",
                    |m: &AddDeviceToMulticastGroupRequest| { &m.multicast_group_id },
                    |m: &mut AddDeviceToMulticastGroupRequest| { &mut m.multicast_group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dev_eui",
                    |m: &AddDeviceToMulticastGroupRequest| { &m.dev_eui },
                    |m: &mut AddDeviceToMulticastGroupRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddDeviceToMulticastGroupRequest>(
                    "AddDeviceToMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddDeviceToMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<AddDeviceToMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddDeviceToMulticastGroupRequest,
        };
        unsafe {
            instance.get(AddDeviceToMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for AddDeviceToMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddDeviceToMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddDeviceToMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoveDeviceFromMulticastGroupRequest {
    // message fields
    pub multicast_group_id: ::std::string::String,
    pub dev_eui: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoveDeviceFromMulticastGroupRequest {
    fn default() -> &'a RemoveDeviceFromMulticastGroupRequest {
        <RemoveDeviceFromMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoveDeviceFromMulticastGroupRequest {
    pub fn new() -> RemoveDeviceFromMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // string multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &str {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::string::String) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::string::String::new())
    }

    // string dev_eui = 2;


    pub fn get_dev_eui(&self) -> &str {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::string::String) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::string::String {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dev_eui, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RemoveDeviceFromMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multicast_group_id);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_string(1, &self.multicast_group_id)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_string(2, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoveDeviceFromMulticastGroupRequest {
        RemoveDeviceFromMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "multicast_group_id",
                    |m: &RemoveDeviceFromMulticastGroupRequest| { &m.multicast_group_id },
                    |m: &mut RemoveDeviceFromMulticastGroupRequest| { &mut m.multicast_group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dev_eui",
                    |m: &RemoveDeviceFromMulticastGroupRequest| { &m.dev_eui },
                    |m: &mut RemoveDeviceFromMulticastGroupRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoveDeviceFromMulticastGroupRequest>(
                    "RemoveDeviceFromMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoveDeviceFromMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<RemoveDeviceFromMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoveDeviceFromMulticastGroupRequest,
        };
        unsafe {
            instance.get(RemoveDeviceFromMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for RemoveDeviceFromMulticastGroupRequest {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoveDeviceFromMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoveDeviceFromMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListMulticastGroupRequest {
    // message fields
    pub limit: i64,
    pub offset: i64,
    pub organization_id: i64,
    pub dev_eui: ::std::string::String,
    pub service_profile_id: ::std::string::String,
    pub search: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMulticastGroupRequest {
    fn default() -> &'a ListMulticastGroupRequest {
        <ListMulticastGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListMulticastGroupRequest {
    pub fn new() -> ListMulticastGroupRequest {
        ::std::default::Default::default()
    }

    // int64 limit = 1;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // int64 offset = 2;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // int64 organization_id = 3;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // string dev_eui = 4;


    pub fn get_dev_eui(&self) -> &str {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::string::String) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::string::String {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dev_eui, ::std::string::String::new())
    }

    // string service_profile_id = 5;


    pub fn get_service_profile_id(&self) -> &str {
        &self.service_profile_id
    }
    pub fn clear_service_profile_id(&mut self) {
        self.service_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_profile_id(&mut self, v: ::std::string::String) {
        self.service_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile_id(&mut self) -> &mut ::std::string::String {
        &mut self.service_profile_id
    }

    // Take field
    pub fn take_service_profile_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_profile_id, ::std::string::String::new())
    }

    // string search = 6;


    pub fn get_search(&self) -> &str {
        &self.search
    }
    pub fn clear_search(&mut self) {
        self.search.clear();
    }

    // Param is passed by value, moved
    pub fn set_search(&mut self, v: ::std::string::String) {
        self.search = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search(&mut self) -> &mut ::std::string::String {
        &mut self.search
    }

    // Take field
    pub fn take_search(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.search, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListMulticastGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dev_eui)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_profile_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.search)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.dev_eui);
        }
        if !self.service_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.service_profile_id);
        }
        if !self.search.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.search);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit != 0 {
            os.write_int64(1, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int64(2, self.offset)?;
        }
        if self.organization_id != 0 {
            os.write_int64(3, self.organization_id)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_string(4, &self.dev_eui)?;
        }
        if !self.service_profile_id.is_empty() {
            os.write_string(5, &self.service_profile_id)?;
        }
        if !self.search.is_empty() {
            os.write_string(6, &self.search)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMulticastGroupRequest {
        ListMulticastGroupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &ListMulticastGroupRequest| { &m.limit },
                    |m: &mut ListMulticastGroupRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offset",
                    |m: &ListMulticastGroupRequest| { &m.offset },
                    |m: &mut ListMulticastGroupRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &ListMulticastGroupRequest| { &m.organization_id },
                    |m: &mut ListMulticastGroupRequest| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dev_eui",
                    |m: &ListMulticastGroupRequest| { &m.dev_eui },
                    |m: &mut ListMulticastGroupRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "service_profile_id",
                    |m: &ListMulticastGroupRequest| { &m.service_profile_id },
                    |m: &mut ListMulticastGroupRequest| { &mut m.service_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "search",
                    |m: &ListMulticastGroupRequest| { &m.search },
                    |m: &mut ListMulticastGroupRequest| { &mut m.search },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListMulticastGroupRequest>(
                    "ListMulticastGroupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListMulticastGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListMulticastGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListMulticastGroupRequest,
        };
        unsafe {
            instance.get(ListMulticastGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListMulticastGroupRequest {
    fn clear(&mut self) {
        self.limit = 0;
        self.offset = 0;
        self.organization_id = 0;
        self.dev_eui.clear();
        self.service_profile_id.clear();
        self.search.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMulticastGroupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMulticastGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListMulticastGroupResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<MulticastGroupListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMulticastGroupResponse {
    fn default() -> &'a ListMulticastGroupResponse {
        <ListMulticastGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListMulticastGroupResponse {
    pub fn new() -> ListMulticastGroupResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.MulticastGroupListItem result = 2;


    pub fn get_result(&self) -> &[MulticastGroupListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<MulticastGroupListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<MulticastGroupListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<MulticastGroupListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListMulticastGroupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMulticastGroupResponse {
        ListMulticastGroupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListMulticastGroupResponse| { &m.total_count },
                    |m: &mut ListMulticastGroupResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastGroupListItem>>(
                    "result",
                    |m: &ListMulticastGroupResponse| { &m.result },
                    |m: &mut ListMulticastGroupResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListMulticastGroupResponse>(
                    "ListMulticastGroupResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListMulticastGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListMulticastGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListMulticastGroupResponse,
        };
        unsafe {
            instance.get(ListMulticastGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListMulticastGroupResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMulticastGroupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMulticastGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MulticastQueueItem {
    // message fields
    pub multicast_group_id: ::std::string::String,
    pub f_cnt: u32,
    pub f_port: u32,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MulticastQueueItem {
    fn default() -> &'a MulticastQueueItem {
        <MulticastQueueItem as ::protobuf::Message>::default_instance()
    }
}

impl MulticastQueueItem {
    pub fn new() -> MulticastQueueItem {
        ::std::default::Default::default()
    }

    // string multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &str {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::string::String) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::string::String::new())
    }

    // uint32 f_cnt = 2;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // uint32 f_port = 3;


    pub fn get_f_port(&self) -> u32 {
        self.f_port
    }
    pub fn clear_f_port(&mut self) {
        self.f_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_port(&mut self, v: u32) {
        self.f_port = v;
    }

    // bytes data = 4;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MulticastQueueItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_port = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multicast_group_id);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(2, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.f_port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.f_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_string(1, &self.multicast_group_id)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(2, self.f_cnt)?;
        }
        if self.f_port != 0 {
            os.write_uint32(3, self.f_port)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MulticastQueueItem {
        MulticastQueueItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "multicast_group_id",
                    |m: &MulticastQueueItem| { &m.multicast_group_id },
                    |m: &mut MulticastQueueItem| { &mut m.multicast_group_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &MulticastQueueItem| { &m.f_cnt },
                    |m: &mut MulticastQueueItem| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_port",
                    |m: &MulticastQueueItem| { &m.f_port },
                    |m: &mut MulticastQueueItem| { &mut m.f_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &MulticastQueueItem| { &m.data },
                    |m: &mut MulticastQueueItem| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MulticastQueueItem>(
                    "MulticastQueueItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MulticastQueueItem {
        static mut instance: ::protobuf::lazy::Lazy<MulticastQueueItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MulticastQueueItem,
        };
        unsafe {
            instance.get(MulticastQueueItem::new)
        }
    }
}

impl ::protobuf::Clear for MulticastQueueItem {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.f_cnt = 0;
        self.f_port = 0;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MulticastQueueItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastQueueItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnqueueMulticastQueueItemRequest {
    // message fields
    pub multicast_queue_item: ::protobuf::SingularPtrField<MulticastQueueItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnqueueMulticastQueueItemRequest {
    fn default() -> &'a EnqueueMulticastQueueItemRequest {
        <EnqueueMulticastQueueItemRequest as ::protobuf::Message>::default_instance()
    }
}

impl EnqueueMulticastQueueItemRequest {
    pub fn new() -> EnqueueMulticastQueueItemRequest {
        ::std::default::Default::default()
    }

    // .api.MulticastQueueItem multicast_queue_item = 1;


    pub fn get_multicast_queue_item(&self) -> &MulticastQueueItem {
        self.multicast_queue_item.as_ref().unwrap_or_else(|| MulticastQueueItem::default_instance())
    }
    pub fn clear_multicast_queue_item(&mut self) {
        self.multicast_queue_item.clear();
    }

    pub fn has_multicast_queue_item(&self) -> bool {
        self.multicast_queue_item.is_some()
    }

    // Param is passed by value, moved
    pub fn set_multicast_queue_item(&mut self, v: MulticastQueueItem) {
        self.multicast_queue_item = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_queue_item(&mut self) -> &mut MulticastQueueItem {
        if self.multicast_queue_item.is_none() {
            self.multicast_queue_item.set_default();
        }
        self.multicast_queue_item.as_mut().unwrap()
    }

    // Take field
    pub fn take_multicast_queue_item(&mut self) -> MulticastQueueItem {
        self.multicast_queue_item.take().unwrap_or_else(|| MulticastQueueItem::new())
    }
}

impl ::protobuf::Message for EnqueueMulticastQueueItemRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_queue_item {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.multicast_queue_item)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.multicast_queue_item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.multicast_queue_item.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnqueueMulticastQueueItemRequest {
        EnqueueMulticastQueueItemRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastQueueItem>>(
                    "multicast_queue_item",
                    |m: &EnqueueMulticastQueueItemRequest| { &m.multicast_queue_item },
                    |m: &mut EnqueueMulticastQueueItemRequest| { &mut m.multicast_queue_item },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnqueueMulticastQueueItemRequest>(
                    "EnqueueMulticastQueueItemRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnqueueMulticastQueueItemRequest {
        static mut instance: ::protobuf::lazy::Lazy<EnqueueMulticastQueueItemRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnqueueMulticastQueueItemRequest,
        };
        unsafe {
            instance.get(EnqueueMulticastQueueItemRequest::new)
        }
    }
}

impl ::protobuf::Clear for EnqueueMulticastQueueItemRequest {
    fn clear(&mut self) {
        self.multicast_queue_item.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnqueueMulticastQueueItemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnqueueMulticastQueueItemRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnqueueMulticastQueueItemResponse {
    // message fields
    pub f_cnt: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnqueueMulticastQueueItemResponse {
    fn default() -> &'a EnqueueMulticastQueueItemResponse {
        <EnqueueMulticastQueueItemResponse as ::protobuf::Message>::default_instance()
    }
}

impl EnqueueMulticastQueueItemResponse {
    pub fn new() -> EnqueueMulticastQueueItemResponse {
        ::std::default::Default::default()
    }

    // uint32 f_cnt = 1;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }
}

impl ::protobuf::Message for EnqueueMulticastQueueItemResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(1, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.f_cnt != 0 {
            os.write_uint32(1, self.f_cnt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnqueueMulticastQueueItemResponse {
        EnqueueMulticastQueueItemResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &EnqueueMulticastQueueItemResponse| { &m.f_cnt },
                    |m: &mut EnqueueMulticastQueueItemResponse| { &mut m.f_cnt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnqueueMulticastQueueItemResponse>(
                    "EnqueueMulticastQueueItemResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnqueueMulticastQueueItemResponse {
        static mut instance: ::protobuf::lazy::Lazy<EnqueueMulticastQueueItemResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnqueueMulticastQueueItemResponse,
        };
        unsafe {
            instance.get(EnqueueMulticastQueueItemResponse::new)
        }
    }
}

impl ::protobuf::Clear for EnqueueMulticastQueueItemResponse {
    fn clear(&mut self) {
        self.f_cnt = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnqueueMulticastQueueItemResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnqueueMulticastQueueItemResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FlushMulticastGroupQueueItemsRequest {
    // message fields
    pub multicast_group_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FlushMulticastGroupQueueItemsRequest {
    fn default() -> &'a FlushMulticastGroupQueueItemsRequest {
        <FlushMulticastGroupQueueItemsRequest as ::protobuf::Message>::default_instance()
    }
}

impl FlushMulticastGroupQueueItemsRequest {
    pub fn new() -> FlushMulticastGroupQueueItemsRequest {
        ::std::default::Default::default()
    }

    // string multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &str {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::string::String) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FlushMulticastGroupQueueItemsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multicast_group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_string(1, &self.multicast_group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FlushMulticastGroupQueueItemsRequest {
        FlushMulticastGroupQueueItemsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "multicast_group_id",
                    |m: &FlushMulticastGroupQueueItemsRequest| { &m.multicast_group_id },
                    |m: &mut FlushMulticastGroupQueueItemsRequest| { &mut m.multicast_group_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FlushMulticastGroupQueueItemsRequest>(
                    "FlushMulticastGroupQueueItemsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FlushMulticastGroupQueueItemsRequest {
        static mut instance: ::protobuf::lazy::Lazy<FlushMulticastGroupQueueItemsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FlushMulticastGroupQueueItemsRequest,
        };
        unsafe {
            instance.get(FlushMulticastGroupQueueItemsRequest::new)
        }
    }
}

impl ::protobuf::Clear for FlushMulticastGroupQueueItemsRequest {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FlushMulticastGroupQueueItemsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FlushMulticastGroupQueueItemsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListMulticastGroupQueueItemsRequest {
    // message fields
    pub multicast_group_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMulticastGroupQueueItemsRequest {
    fn default() -> &'a ListMulticastGroupQueueItemsRequest {
        <ListMulticastGroupQueueItemsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListMulticastGroupQueueItemsRequest {
    pub fn new() -> ListMulticastGroupQueueItemsRequest {
        ::std::default::Default::default()
    }

    // string multicast_group_id = 1;


    pub fn get_multicast_group_id(&self) -> &str {
        &self.multicast_group_id
    }
    pub fn clear_multicast_group_id(&mut self) {
        self.multicast_group_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_group_id(&mut self, v: ::std::string::String) {
        self.multicast_group_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_multicast_group_id(&mut self) -> &mut ::std::string::String {
        &mut self.multicast_group_id
    }

    // Take field
    pub fn take_multicast_group_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.multicast_group_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListMulticastGroupQueueItemsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.multicast_group_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.multicast_group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.multicast_group_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.multicast_group_id.is_empty() {
            os.write_string(1, &self.multicast_group_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMulticastGroupQueueItemsRequest {
        ListMulticastGroupQueueItemsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "multicast_group_id",
                    |m: &ListMulticastGroupQueueItemsRequest| { &m.multicast_group_id },
                    |m: &mut ListMulticastGroupQueueItemsRequest| { &mut m.multicast_group_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListMulticastGroupQueueItemsRequest>(
                    "ListMulticastGroupQueueItemsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListMulticastGroupQueueItemsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListMulticastGroupQueueItemsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListMulticastGroupQueueItemsRequest,
        };
        unsafe {
            instance.get(ListMulticastGroupQueueItemsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListMulticastGroupQueueItemsRequest {
    fn clear(&mut self) {
        self.multicast_group_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMulticastGroupQueueItemsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMulticastGroupQueueItemsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListMulticastGroupQueueItemsResponse {
    // message fields
    pub multicast_queue_items: ::protobuf::RepeatedField<MulticastQueueItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMulticastGroupQueueItemsResponse {
    fn default() -> &'a ListMulticastGroupQueueItemsResponse {
        <ListMulticastGroupQueueItemsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListMulticastGroupQueueItemsResponse {
    pub fn new() -> ListMulticastGroupQueueItemsResponse {
        ::std::default::Default::default()
    }

    // repeated .api.MulticastQueueItem multicast_queue_items = 1;


    pub fn get_multicast_queue_items(&self) -> &[MulticastQueueItem] {
        &self.multicast_queue_items
    }
    pub fn clear_multicast_queue_items(&mut self) {
        self.multicast_queue_items.clear();
    }

    // Param is passed by value, moved
    pub fn set_multicast_queue_items(&mut self, v: ::protobuf::RepeatedField<MulticastQueueItem>) {
        self.multicast_queue_items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_multicast_queue_items(&mut self) -> &mut ::protobuf::RepeatedField<MulticastQueueItem> {
        &mut self.multicast_queue_items
    }

    // Take field
    pub fn take_multicast_queue_items(&mut self) -> ::protobuf::RepeatedField<MulticastQueueItem> {
        ::std::mem::replace(&mut self.multicast_queue_items, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListMulticastGroupQueueItemsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.multicast_queue_items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.multicast_queue_items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.multicast_queue_items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.multicast_queue_items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMulticastGroupQueueItemsResponse {
        ListMulticastGroupQueueItemsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MulticastQueueItem>>(
                    "multicast_queue_items",
                    |m: &ListMulticastGroupQueueItemsResponse| { &m.multicast_queue_items },
                    |m: &mut ListMulticastGroupQueueItemsResponse| { &mut m.multicast_queue_items },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListMulticastGroupQueueItemsResponse>(
                    "ListMulticastGroupQueueItemsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListMulticastGroupQueueItemsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListMulticastGroupQueueItemsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListMulticastGroupQueueItemsResponse,
        };
        unsafe {
            instance.get(ListMulticastGroupQueueItemsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListMulticastGroupQueueItemsResponse {
    fn clear(&mut self) {
        self.multicast_queue_items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMulticastGroupQueueItemsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMulticastGroupQueueItemsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MulticastGroupType {
    CLASS_C = 0,
    CLASS_B = 1,
}

impl ::protobuf::ProtobufEnum for MulticastGroupType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MulticastGroupType> {
        match value {
            0 => ::std::option::Option::Some(MulticastGroupType::CLASS_C),
            1 => ::std::option::Option::Some(MulticastGroupType::CLASS_B),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MulticastGroupType] = &[
            MulticastGroupType::CLASS_C,
            MulticastGroupType::CLASS_B,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MulticastGroupType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MulticastGroupType {
}

impl ::std::default::Default for MulticastGroupType {
    fn default() -> Self {
        MulticastGroupType::CLASS_C
    }
}

impl ::protobuf::reflect::ProtobufValue for MulticastGroupType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$as/external/api/multicastGroup.proto\x12\x03api\x1a\x1cgoogle/api/ann\
    otations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/prot\
    obuf/empty.proto\"\xe2\x02\n\x0eMulticastGroup\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x17\
    \n\x07mc_addr\x18\x03\x20\x01(\tR\x06mcAddr\x12\x1f\n\x0cmc_nwk_s_key\
    \x18\x04\x20\x01(\tR\tmcNwkSKey\x12\x1f\n\x0cmc_app_s_key\x18\x05\x20\
    \x01(\tR\tmcAppSKey\x12\x13\n\x05f_cnt\x18\x06\x20\x01(\rR\x04fCnt\x126\
    \n\ngroup_type\x18\x07\x20\x01(\x0e2\x17.api.MulticastGroupTypeR\tgroupT\
    ype\x12\x0e\n\x02dr\x18\x08\x20\x01(\rR\x02dr\x12\x1c\n\tfrequency\x18\t\
    \x20\x01(\rR\tfrequency\x12(\n\x10ping_slot_period\x18\n\x20\x01(\rR\x0e\
    pingSlotPeriod\x12,\n\x12service_profile_id\x18\x0b\x20\x01(\tR\x10servi\
    ceProfileID\"\x9c\x01\n\x16MulticastGroupListItem\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\
    ,\n\x12service_profile_id\x18\x03\x20\x01(\tR\x10serviceProfileID\x120\n\
    \x14service_profile_name\x18\x04\x20\x01(\tR\x12serviceProfileName\"[\n\
    \x1bCreateMulticastGroupRequest\x12<\n\x0fmulticast_group\x18\x01\x20\
    \x01(\x0b2\x13.api.MulticastGroupR\x0emulticastGroup\".\n\x1cCreateMulti\
    castGroupResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"*\n\x18GetM\
    ulticastGroupRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\xcf\x01\
    \n\x19GetMulticastGroupResponse\x12<\n\x0fmulticast_group\x18\x01\x20\
    \x01(\x0b2\x13.api.MulticastGroupR\x0emulticastGroup\x129\n\ncreated_at\
    \x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n\
    \nupdated_at\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tupdat\
    edAt\"[\n\x1bUpdateMulticastGroupRequest\x12<\n\x0fmulticast_group\x18\
    \x01\x20\x01(\x0b2\x13.api.MulticastGroupR\x0emulticastGroup\"-\n\x1bDel\
    eteMulticastGroupRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"i\n\
    \x20AddDeviceToMulticastGroupRequest\x12,\n\x12multicast_group_id\x18\
    \x01\x20\x01(\tR\x10multicastGroupID\x12\x17\n\x07dev_eui\x18\x02\x20\
    \x01(\tR\x06devEUI\"n\n%RemoveDeviceFromMulticastGroupRequest\x12,\n\x12\
    multicast_group_id\x18\x01\x20\x01(\tR\x10multicastGroupID\x12\x17\n\x07\
    dev_eui\x18\x02\x20\x01(\tR\x06devEUI\"\xd1\x01\n\x19ListMulticastGroupR\
    equest\x12\x14\n\x05limit\x18\x01\x20\x01(\x03R\x05limit\x12\x16\n\x06of\
    fset\x18\x02\x20\x01(\x03R\x06offset\x12'\n\x0forganization_id\x18\x03\
    \x20\x01(\x03R\x0eorganizationID\x12\x17\n\x07dev_eui\x18\x04\x20\x01(\t\
    R\x06devEUI\x12,\n\x12service_profile_id\x18\x05\x20\x01(\tR\x10serviceP\
    rofileID\x12\x16\n\x06search\x18\x06\x20\x01(\tR\x06search\"r\n\x1aListM\
    ulticastGroupResponse\x12\x1f\n\x0btotal_count\x18\x01\x20\x01(\x03R\nto\
    talCount\x123\n\x06result\x18\x02\x20\x03(\x0b2\x1b.api.MulticastGroupLi\
    stItemR\x06result\"\x82\x01\n\x12MulticastQueueItem\x12,\n\x12multicast_\
    group_id\x18\x01\x20\x01(\tR\x10multicastGroupID\x12\x13\n\x05f_cnt\x18\
    \x02\x20\x01(\rR\x04fCnt\x12\x15\n\x06f_port\x18\x03\x20\x01(\rR\x05fPor\
    t\x12\x12\n\x04data\x18\x04\x20\x01(\x0cR\x04data\"m\n\x20EnqueueMultica\
    stQueueItemRequest\x12I\n\x14multicast_queue_item\x18\x01\x20\x01(\x0b2\
    \x17.api.MulticastQueueItemR\x12multicastQueueItem\"8\n!EnqueueMulticast\
    QueueItemResponse\x12\x13\n\x05f_cnt\x18\x01\x20\x01(\rR\x04fCnt\"T\n$Fl\
    ushMulticastGroupQueueItemsRequest\x12,\n\x12multicast_group_id\x18\x01\
    \x20\x01(\tR\x10multicastGroupID\"S\n#ListMulticastGroupQueueItemsReques\
    t\x12,\n\x12multicast_group_id\x18\x01\x20\x01(\tR\x10multicastGroupID\"\
    s\n$ListMulticastGroupQueueItemsResponse\x12K\n\x15multicast_queue_items\
    \x18\x01\x20\x03(\x0b2\x17.api.MulticastQueueItemR\x13multicastQueueItem\
    s*.\n\x12MulticastGroupType\x12\x0b\n\x07CLASS_C\x10\0\x12\x0b\n\x07CLAS\
    S_B\x10\x012\xba\n\n\x15MulticastGroupService\x12o\n\x06Create\x12\x20.a\
    pi.CreateMulticastGroupRequest\x1a!.api.CreateMulticastGroupResponse\"\
    \x20\x82\xd3\xe4\x93\x02\x1a\"\x15/api/multicast-groups:\x01*\x12h\n\x03\
    Get\x12\x1d.api.GetMulticastGroupRequest\x1a\x1e.api.GetMulticastGroupRe\
    sponse\"\"\x82\xd3\xe4\x93\x02\x1c\x12\x1a/api/multicast-groups/{id}\x12\
    y\n\x06Update\x12\x20.api.UpdateMulticastGroupRequest\x1a\x16.google.pro\
    tobuf.Empty\"5\x82\xd3\xe4\x93\x02/\x1a*/api/multicast-groups/{multicast\
    _group.id}:\x01*\x12f\n\x06Delete\x12\x20.api.DeleteMulticastGroupReques\
    t\x1a\x16.google.protobuf.Empty\"\"\x82\xd3\xe4\x93\x02\x1c*\x1a/api/mul\
    ticast-groups/{id}\x12f\n\x04List\x12\x1e.api.ListMulticastGroupRequest\
    \x1a\x1f.api.ListMulticastGroupResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\
    \x12\x15/api/multicast-groups\x12\x89\x01\n\tAddDevice\x12%.api.AddDevic\
    eToMulticastGroupRequest\x1a\x16.google.protobuf.Empty\"=\x82\xd3\xe4\
    \x93\x027\"2/api/multicast-groups/{multicast_group_id}/devices:\x01*\x12\
    \x98\x01\n\x0cRemoveDevice\x12*.api.RemoveDeviceFromMulticastGroupReques\
    t\x1a\x16.google.protobuf.Empty\"D\x82\xd3\xe4\x93\x02>*</api/multicast-\
    groups/{multicast_group_id}/devices/{dev_eui}\x12\xaa\x01\n\x07Enqueue\
    \x12%.api.EnqueueMulticastQueueItemRequest\x1a&.api.EnqueueMulticastQueu\
    eItemResponse\"P\x82\xd3\xe4\x93\x02J\"E/api/multicast-groups/{multicast\
    _queue_item.multicast_group_id}/queue:\x01*\x12\x89\x01\n\nFlushQueue\
    \x12).api.FlushMulticastGroupQueueItemsRequest\x1a\x16.google.protobuf.E\
    mpty\"8\x82\xd3\xe4\x93\x022*0/api/multicast-groups/{multicast_group_id}\
    /queue\x12\x9a\x01\n\tListQueue\x12(.api.ListMulticastGroupQueueItemsReq\
    uest\x1a).api.ListMulticastGroupQueueItemsResponse\"8\x82\xd3\xe4\x93\
    \x022\x120/api/multicast-groups/{multicast_group_id}/queueB9Z7github.com\
    /brocaar/chirpstack-api/go/v3/as/external/apiJ\xb5;\n\x07\x12\x05\0\0\
    \x8a\x02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\
    \x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\
    \n\t\n\x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\x03\x01\x12\x03\x07\x07(\n\t\
    \n\x02\x03\x02\x12\x03\x08\x07$\nM\n\x02\x06\0\x12\x04\x0c\0V\x01\x1aA\
    \x20MulticastGroupService\x20is\x20the\x20service\x20managing\x20multica\
    st-groups.\n\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\x1d\n9\n\x04\x06\0\x02\
    \0\x12\x04\x0e\x04\x13\x05\x1a+\x20Create\x20creates\x20the\x20given\x20\
    multicast-group.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0e\x08\x0e\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x0e\x0f*\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x0e5Q\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x0f\x08\x12\n\n\x11\n\t\x06\
    \0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x0f\x08\x12\n\n:\n\x04\x06\0\x02\x01\
    \x12\x04\x16\x04\x1a\x05\x1a,\x20Get\x20returns\x20a\x20multicast-group\
    \x20given\x20an\x20ID.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x16\x08\
    \x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x16\x0c$\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x16/H\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\x17\x08\
    \x19\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04\x17\x08\x19\n\n\
    9\n\x04\x06\0\x02\x02\x12\x04\x1d\x04\"\x05\x1a+\x20Update\x20updates\
    \x20the\x20given\x20multicast-group.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03\x1d\x08\x0e\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1d\x0f*\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x1d5J\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\
    \x1e\x08!\n\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04\x1e\x08!\n\
    \n=\n\x04\x06\0\x02\x03\x12\x04%\x04)\x05\x1a/\x20Delete\x20deletes\x20a\
    \x20multicast-group\x20given\x20an\x20ID.\n\n\x0c\n\x05\x06\0\x02\x03\
    \x01\x12\x03%\x08\x0e\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03%\x0f*\n\x0c\
    \n\x05\x06\0\x02\x03\x03\x12\x03%5J\n\r\n\x05\x06\0\x02\x03\x04\x12\x04&\
    \x08(\n\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04&\x08(\n\n:\n\
    \x04\x06\0\x02\x04\x12\x04,\x040\x05\x1a,\x20List\x20lists\x20the\x20ava\
    ilable\x20multicast-groups.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03,\x08\
    \x0c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03,\r&\n\x0c\n\x05\x06\0\x02\x04\
    \x03\x12\x03,1K\n\r\n\x05\x06\0\x02\x04\x04\x12\x04-\x08/\n\n\x11\n\t\
    \x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04-\x08/\n\nG\n\x04\x06\0\x02\x05\
    \x12\x043\x048\x05\x1a9\x20AddDevice\x20adds\x20the\x20given\x20device\
    \x20to\x20the\x20multicast-group.\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\
    \x033\x08\x11\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x033\x122\n\x0c\n\x05\
    \x06\0\x02\x05\x03\x12\x033=R\n\r\n\x05\x06\0\x02\x05\x04\x12\x044\x087\
    \n\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x044\x087\n\nO\n\x04\
    \x06\0\x02\x06\x12\x04;\x04?\x05\x1aA\x20RemoveDevice\x20removes\x20the\
    \x20given\x20device\x20from\x20the\x20multicast-group.\n\n\x0c\n\x05\x06\
    \0\x02\x06\x01\x12\x03;\x08\x14\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03;\
    \x15:\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03;EZ\n\r\n\x05\x06\0\x02\x06\
    \x04\x12\x04<\x08>\n\n\x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x04<\
    \x08>\n\nC\n\x04\x06\0\x02\x07\x12\x04B\x04G\x05\x1a5\x20Enqueue\x20adds\
    \x20the\x20given\x20item\x20to\x20the\x20multicast-queue.\n\n\x0c\n\x05\
    \x06\0\x02\x07\x01\x12\x03B\x08\x0f\n\x0c\n\x05\x06\0\x02\x07\x02\x12\
    \x03B\x100\n\x0c\n\x05\x06\0\x02\x07\x03\x12\x03B;\\\n\r\n\x05\x06\0\x02\
    \x07\x04\x12\x04C\x08F\n\n\x11\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\
    \x04C\x08F\n\n=\n\x04\x06\0\x02\x08\x12\x04J\x04N\x05\x1a/\x20FlushQueue\
    \x20flushes\x20the\x20multicast-group\x20queue.\n\n\x0c\n\x05\x06\0\x02\
    \x08\x01\x12\x03J\x08\x12\n\x0c\n\x05\x06\0\x02\x08\x02\x12\x03J\x137\n\
    \x0c\n\x05\x06\0\x02\x08\x03\x12\x03JBW\n\r\n\x05\x06\0\x02\x08\x04\x12\
    \x04K\x08M\n\n\x11\n\t\x06\0\x02\x08\x04\xb0\xca\xbc\"\x12\x04K\x08M\n\n\
    G\n\x04\x06\0\x02\t\x12\x04Q\x04U\x05\x1a9\x20ListQueue\x20lists\x20the\
    \x20items\x20in\x20the\x20multicast-group\x20queue.\n\n\x0c\n\x05\x06\0\
    \x02\t\x01\x12\x03Q\x08\x11\n\x0c\n\x05\x06\0\x02\t\x02\x12\x03Q\x125\n\
    \x0c\n\x05\x06\0\x02\t\x03\x12\x03Q@d\n\r\n\x05\x06\0\x02\t\x04\x12\x04R\
    \x08T\n\n\x11\n\t\x06\0\x02\t\x04\xb0\xca\xbc\"\x12\x04R\x08T\n\n\n\n\
    \x02\x05\0\x12\x04X\0^\x01\n\n\n\x03\x05\0\x01\x12\x03X\x05\x17\n\x17\n\
    \x04\x05\0\x02\0\x12\x03Z\x04\x10\x1a\n\x20Class-C.\n\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03Z\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03Z\x0e\x0f\
    \n\x17\n\x04\x05\0\x02\x01\x12\x03]\x04\x10\x1a\n\x20Class-B.\n\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03]\x04\x0b\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03]\x0e\x0f\n\x0b\n\x02\x04\0\x12\x05`\0\x84\x01\x01\n\n\n\x03\x04\
    \0\x01\x12\x03`\x08\x16\n[\n\x04\x04\0\x02\0\x12\x03c\x04\x12\x1aN\x20ID\
    \x20(string\x20formatted\x20UUID).\n\x20This\x20will\x20be\x20generated\
    \x20automatically\x20on\x20create.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04c\
    \x04`\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03c\x04\n\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03c\x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03c\x10\x11\n\
    $\n\x04\x04\0\x02\x01\x12\x03f\x04\x14\x1a\x17\x20Multicast-group\x20nam\
    e.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04f\x04c\x12\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03f\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03f\x0b\x0f\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03f\x12\x13\n7\n\x04\x04\0\x02\x02\x12\
    \x03i\x04\x17\x1a*\x20Multicast\x20address\x20(HEX\x20encoded\x20DevAddr\
    ).\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04i\x04f\x14\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03i\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03i\x0b\x12\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03i\x15\x16\nF\n\x04\x04\0\x02\x03\x12\
    \x03l\x04\x1c\x1a9\x20Multicast\x20network\x20session\x20key\x20(HEX\x20\
    encoded\x20AES128\x20key).\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04l\x04i\
    \x17\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03l\x04\n\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03l\x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03l\x1a\x1b\
    \nJ\n\x04\x04\0\x02\x04\x12\x03o\x04\x1c\x1a=\x20Multicast\x20applicatio\
    n\x20session\x20key\x20(HEX\x20encoded\x20AES128\x20key).\n\n\r\n\x05\
    \x04\0\x02\x04\x04\x12\x04o\x04l\x1c\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03o\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03o\x0b\x17\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03o\x1a\x1b\n\x1d\n\x04\x04\0\x02\x05\x12\x03r\
    \x04\x15\x1a\x10\x20Frame-counter.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\
    r\x04o\x1c\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03r\x04\n\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03r\x0b\x10\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03r\
    \x13\x14\n\x1e\n\x04\x04\0\x02\x06\x12\x03u\x04&\x1a\x11\x20Multicast\
    \x20type.\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04u\x04r\x15\n\x0c\n\x05\
    \x04\0\x02\x06\x06\x12\x03u\x04\x16\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03u\x17!\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03u$%\n\x19\n\x04\x04\0\
    \x02\x07\x12\x03x\x04\x12\x1a\x0c\x20Data-rate.\n\n\r\n\x05\x04\0\x02\
    \x07\x04\x12\x04x\x04u&\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03x\x04\n\n\
    \x0c\n\x05\x04\0\x02\x07\x01\x12\x03x\x0b\r\n\x0c\n\x05\x04\0\x02\x07\
    \x03\x12\x03x\x10\x11\n\x1e\n\x04\x04\0\x02\x08\x12\x03{\x04\x19\x1a\x11\
    \x20Frequency\x20(Hz).\n\n\r\n\x05\x04\0\x02\x08\x04\x12\x04{\x04x\x12\n\
    \x0c\n\x05\x04\0\x02\x08\x05\x12\x03{\x04\n\n\x0c\n\x05\x04\0\x02\x08\
    \x01\x12\x03{\x0b\x14\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03{\x17\x18\nI\
    \n\x04\x04\0\x02\t\x12\x03\x7f\x04!\x1a<\x20Ping-slot\x20period.\n\x20Ma\
    ndatory\x20for\x20Class-B\x20multicast\x20groups.\n\n\r\n\x05\x04\0\x02\
    \t\x04\x12\x04\x7f\x04{\x19\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x7f\x04\
    \n\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x7f\x0b\x1b\n\x0c\n\x05\x04\0\x02\
    \t\x03\x12\x03\x7f\x1e\x20\nM\n\x04\x04\0\x02\n\x12\x04\x83\x01\x04D\x1a\
    ?\x20Service-profile\x20ID.\n\x20After\x20creation,\x20this\x20can\x20no\
    t\x20be\x20updated.\n\n\x0e\n\x05\x04\0\x02\n\x04\x12\x05\x83\x01\x04\
    \x7f!\n\r\n\x05\x04\0\x02\n\x05\x12\x04\x83\x01\x04\n\n\r\n\x05\x04\0\
    \x02\n\x01\x12\x04\x83\x01\x0b\x1d\n\r\n\x05\x04\0\x02\n\x03\x12\x04\x83\
    \x01\x20\"\n\r\n\x05\x04\0\x02\n\x08\x12\x04\x83\x01#C\n\r\n\x05\x04\0\
    \x02\n\n\x12\x04\x83\x010B\n\x0c\n\x02\x04\x01\x12\x06\x86\x01\0\x92\x01\
    \x01\n\x0b\n\x03\x04\x01\x01\x12\x04\x86\x01\x08\x1e\n+\n\x04\x04\x01\
    \x02\0\x12\x04\x88\x01\x04\x12\x1a\x1d\x20ID\x20(string\x20formatted\x20\
    UUID).\n\n\x0f\n\x05\x04\x01\x02\0\x04\x12\x06\x88\x01\x04\x86\x01\x20\n\
    \r\n\x05\x04\x01\x02\0\x05\x12\x04\x88\x01\x04\n\n\r\n\x05\x04\x01\x02\0\
    \x01\x12\x04\x88\x01\x0b\r\n\r\n\x05\x04\x01\x02\0\x03\x12\x04\x88\x01\
    \x10\x11\n%\n\x04\x04\x01\x02\x01\x12\x04\x8b\x01\x04\x14\x1a\x17\x20Mul\
    ticast-group\x20name.\n\n\x0f\n\x05\x04\x01\x02\x01\x04\x12\x06\x8b\x01\
    \x04\x88\x01\x12\n\r\n\x05\x04\x01\x02\x01\x05\x12\x04\x8b\x01\x04\n\n\r\
    \n\x05\x04\x01\x02\x01\x01\x12\x04\x8b\x01\x0b\x0f\n\r\n\x05\x04\x01\x02\
    \x01\x03\x12\x04\x8b\x01\x12\x13\n;\n\x04\x04\x01\x02\x02\x12\x04\x8e\
    \x01\x04C\x1a-\x20Service-profile\x20ID\x20(string\x20formatted\x20UUID)\
    .\n\n\x0f\n\x05\x04\x01\x02\x02\x04\x12\x06\x8e\x01\x04\x8b\x01\x14\n\r\
    \n\x05\x04\x01\x02\x02\x05\x12\x04\x8e\x01\x04\n\n\r\n\x05\x04\x01\x02\
    \x02\x01\x12\x04\x8e\x01\x0b\x1d\n\r\n\x05\x04\x01\x02\x02\x03\x12\x04\
    \x8e\x01\x20!\n\r\n\x05\x04\x01\x02\x02\x08\x12\x04\x8e\x01\"B\n\r\n\x05\
    \x04\x01\x02\x02\n\x12\x04\x8e\x01/A\n%\n\x04\x04\x01\x02\x03\x12\x04\
    \x91\x01\x04$\x1a\x17\x20Service-profile\x20name.\n\n\x0f\n\x05\x04\x01\
    \x02\x03\x04\x12\x06\x91\x01\x04\x8e\x01C\n\r\n\x05\x04\x01\x02\x03\x05\
    \x12\x04\x91\x01\x04\n\n\r\n\x05\x04\x01\x02\x03\x01\x12\x04\x91\x01\x0b\
    \x1f\n\r\n\x05\x04\x01\x02\x03\x03\x12\x04\x91\x01\"#\n\x0c\n\x02\x04\
    \x02\x12\x06\x94\x01\0\x97\x01\x01\n\x0b\n\x03\x04\x02\x01\x12\x04\x94\
    \x01\x08#\n1\n\x04\x04\x02\x02\0\x12\x04\x96\x01\x04'\x1a#\x20Multicast-\
    group\x20object\x20to\x20create.\n\n\x0f\n\x05\x04\x02\x02\0\x04\x12\x06\
    \x96\x01\x04\x94\x01%\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\x96\x01\x04\
    \x12\n\r\n\x05\x04\x02\x02\0\x01\x12\x04\x96\x01\x13\"\n\r\n\x05\x04\x02\
    \x02\0\x03\x12\x04\x96\x01%&\n\x0c\n\x02\x04\x03\x12\x06\x99\x01\0\x9c\
    \x01\x01\n\x0b\n\x03\x04\x03\x01\x12\x04\x99\x01\x08$\n<\n\x04\x04\x03\
    \x02\0\x12\x04\x9b\x01\x04\x12\x1a.\x20ID\x20of\x20created\x20group\x20(\
    string\x20formatted\x20UUID).\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\
    \x9b\x01\x04\x99\x01&\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\x9b\x01\x04\n\
    \n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x9b\x01\x0b\r\n\r\n\x05\x04\x03\x02\
    \0\x03\x12\x04\x9b\x01\x10\x11\n\x0c\n\x02\x04\x04\x12\x06\x9e\x01\0\xa1\
    \x01\x01\n\x0b\n\x03\x04\x04\x01\x12\x04\x9e\x01\x08\x20\n+\n\x04\x04\
    \x04\x02\0\x12\x04\xa0\x01\x04\x12\x1a\x1d\x20ID\x20(string\x20formatted\
    \x20UUID).\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\xa0\x01\x04\x9e\x01\"\
    \n\r\n\x05\x04\x04\x02\0\x05\x12\x04\xa0\x01\x04\n\n\r\n\x05\x04\x04\x02\
    \0\x01\x12\x04\xa0\x01\x0b\r\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\xa0\x01\
    \x10\x11\n\x0c\n\x02\x04\x05\x12\x06\xa3\x01\0\xac\x01\x01\n\x0b\n\x03\
    \x04\x05\x01\x12\x04\xa3\x01\x08!\n'\n\x04\x04\x05\x02\0\x12\x04\xa5\x01\
    \x04'\x1a\x19\x20Multicast-group\x20object.\n\n\x0f\n\x05\x04\x05\x02\0\
    \x04\x12\x06\xa5\x01\x04\xa3\x01#\n\r\n\x05\x04\x05\x02\0\x06\x12\x04\
    \xa5\x01\x04\x12\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xa5\x01\x13\"\n\r\n\
    \x05\x04\x05\x02\0\x03\x12\x04\xa5\x01%&\n%\n\x04\x04\x05\x02\x01\x12\
    \x04\xa8\x01\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0f\n\x05\
    \x04\x05\x02\x01\x04\x12\x06\xa8\x01\x04\xa5\x01'\n\r\n\x05\x04\x05\x02\
    \x01\x06\x12\x04\xa8\x01\x04\x1d\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\
    \xa8\x01\x1e(\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\xa8\x01+,\n&\n\x04\
    \x04\x05\x02\x02\x12\x04\xab\x01\x04-\x1a\x18\x20Last\x20update\x20times\
    tamp.\n\n\x0f\n\x05\x04\x05\x02\x02\x04\x12\x06\xab\x01\x04\xa8\x01-\n\r\
    \n\x05\x04\x05\x02\x02\x06\x12\x04\xab\x01\x04\x1d\n\r\n\x05\x04\x05\x02\
    \x02\x01\x12\x04\xab\x01\x1e(\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xab\
    \x01+,\n\x0c\n\x02\x04\x06\x12\x06\xae\x01\0\xb1\x01\x01\n\x0b\n\x03\x04\
    \x06\x01\x12\x04\xae\x01\x08#\n1\n\x04\x04\x06\x02\0\x12\x04\xb0\x01\x04\
    '\x1a#\x20Multicast-group\x20object\x20to\x20update.\n\n\x0f\n\x05\x04\
    \x06\x02\0\x04\x12\x06\xb0\x01\x04\xae\x01%\n\r\n\x05\x04\x06\x02\0\x06\
    \x12\x04\xb0\x01\x04\x12\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xb0\x01\x13\
    \"\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xb0\x01%&\n\x0c\n\x02\x04\x07\x12\
    \x06\xb3\x01\0\xb6\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\xb3\x01\x08#\
    \n+\n\x04\x04\x07\x02\0\x12\x04\xb5\x01\x04\x12\x1a\x1d\x20ID\x20(string\
    \x20formatted\x20UUID).\n\n\x0f\n\x05\x04\x07\x02\0\x04\x12\x06\xb5\x01\
    \x04\xb3\x01%\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\xb5\x01\x04\n\n\r\n\
    \x05\x04\x07\x02\0\x01\x12\x04\xb5\x01\x0b\r\n\r\n\x05\x04\x07\x02\0\x03\
    \x12\x04\xb5\x01\x10\x11\n\x0c\n\x02\x04\x08\x12\x06\xb8\x01\0\xc0\x01\
    \x01\n\x0b\n\x03\x04\x08\x01\x12\x04\xb8\x01\x08(\n;\n\x04\x04\x08\x02\0\
    \x12\x04\xba\x01\x04C\x1a-\x20Multicast-group\x20ID\x20(string\x20format\
    ted\x20UUID).\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xba\x01\x04\xb8\
    \x01*\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xba\x01\x04\n\n\r\n\x05\x04\
    \x08\x02\0\x01\x12\x04\xba\x01\x0b\x1d\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xba\x01\x20!\n\r\n\x05\x04\x08\x02\0\x08\x12\x04\xba\x01\"B\n\r\n\
    \x05\x04\x08\x02\0\n\x12\x04\xba\x01/A\n\x86\x01\n\x04\x04\x08\x02\x01\
    \x12\x04\xbf\x01\x04.\x1ax\x20Device\x20EUI\x20(HEX\x20encoded\x20string\
    ).\n\x20Note\x20that\x20the\x20device\x20must\x20be\x20under\x20the\x20s\
    ame\x20service-profile\x20as\x20the\n\x20multicast-group.\n\n\x0f\n\x05\
    \x04\x08\x02\x01\x04\x12\x06\xbf\x01\x04\xba\x01C\n\r\n\x05\x04\x08\x02\
    \x01\x05\x12\x04\xbf\x01\x04\n\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xbf\
    \x01\x0b\x12\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xbf\x01\x15\x16\n\r\n\
    \x05\x04\x08\x02\x01\x08\x12\x04\xbf\x01\x17-\n\r\n\x05\x04\x08\x02\x01\
    \n\x12\x04\xbf\x01$,\n\x0c\n\x02\x04\t\x12\x06\xc2\x01\0\xc8\x01\x01\n\
    \x0b\n\x03\x04\t\x01\x12\x04\xc2\x01\x08-\n;\n\x04\x04\t\x02\0\x12\x04\
    \xc4\x01\x04C\x1a-\x20Multicast-group\x20ID\x20(string\x20formatted\x20U\
    UID).\n\n\x0f\n\x05\x04\t\x02\0\x04\x12\x06\xc4\x01\x04\xc2\x01/\n\r\n\
    \x05\x04\t\x02\0\x05\x12\x04\xc4\x01\x04\n\n\r\n\x05\x04\t\x02\0\x01\x12\
    \x04\xc4\x01\x0b\x1d\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xc4\x01\x20!\n\r\
    \n\x05\x04\t\x02\0\x08\x12\x04\xc4\x01\"B\n\r\n\x05\x04\t\x02\0\n\x12\
    \x04\xc4\x01/A\n0\n\x04\x04\t\x02\x01\x12\x04\xc7\x01\x04.\x1a\"\x20Devi\
    ce\x20EUI\x20(HEX\x20encoded\x20string).\n\n\x0f\n\x05\x04\t\x02\x01\x04\
    \x12\x06\xc7\x01\x04\xc4\x01C\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\xc7\
    \x01\x04\n\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xc7\x01\x0b\x12\n\r\n\x05\
    \x04\t\x02\x01\x03\x12\x04\xc7\x01\x15\x16\n\r\n\x05\x04\t\x02\x01\x08\
    \x12\x04\xc7\x01\x17-\n\r\n\x05\x04\t\x02\x01\n\x12\x04\xc7\x01$,\n\x0c\
    \n\x02\x04\n\x12\x06\xca\x01\0\xdc\x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\
    \xca\x01\x08!\n.\n\x04\x04\n\x02\0\x12\x04\xcc\x01\x04\x14\x1a\x20\x20Ma\
    x\x20number\x20of\x20items\x20to\x20return.\n\n\x0f\n\x05\x04\n\x02\0\
    \x04\x12\x06\xcc\x01\x04\xca\x01#\n\r\n\x05\x04\n\x02\0\x05\x12\x04\xcc\
    \x01\x04\t\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xcc\x01\n\x0f\n\r\n\x05\x04\
    \n\x02\0\x03\x12\x04\xcc\x01\x12\x13\n:\n\x04\x04\n\x02\x01\x12\x04\xcf\
    \x01\x04\x15\x1a,\x20Offset\x20in\x20the\x20result-set\x20(for\x20pagina\
    tion).\n\n\x0f\n\x05\x04\n\x02\x01\x04\x12\x06\xcf\x01\x04\xcc\x01\x14\n\
    \r\n\x05\x04\n\x02\x01\x05\x12\x04\xcf\x01\x04\t\n\r\n\x05\x04\n\x02\x01\
    \x01\x12\x04\xcf\x01\n\x10\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xcf\x01\
    \x13\x14\n-\n\x04\x04\n\x02\x02\x12\x04\xd2\x01\x04=\x1a\x1f\x20Organiza\
    tion\x20id\x20to\x20filter\x20on.\n\n\x0f\n\x05\x04\n\x02\x02\x04\x12\
    \x06\xd2\x01\x04\xcf\x01\x15\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\xd2\x01\
    \x04\t\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\xd2\x01\n\x19\n\r\n\x05\x04\n\
    \x02\x02\x03\x12\x04\xd2\x01\x1c\x1d\n\r\n\x05\x04\n\x02\x02\x08\x12\x04\
    \xd2\x01\x1e<\n\r\n\x05\x04\n\x02\x02\n\x12\x04\xd2\x01+;\n=\n\x04\x04\n\
    \x02\x03\x12\x04\xd5\x01\x04.\x1a/\x20Device\x20EUI\x20(HEX\x20encoded\
    \x20string)\x20to\x20filter\x20on.\n\n\x0f\n\x05\x04\n\x02\x03\x04\x12\
    \x06\xd5\x01\x04\xd2\x01=\n\r\n\x05\x04\n\x02\x03\x05\x12\x04\xd5\x01\
    \x04\n\n\r\n\x05\x04\n\x02\x03\x01\x12\x04\xd5\x01\x0b\x12\n\r\n\x05\x04\
    \n\x02\x03\x03\x12\x04\xd5\x01\x15\x16\n\r\n\x05\x04\n\x02\x03\x08\x12\
    \x04\xd5\x01\x17-\n\r\n\x05\x04\n\x02\x03\n\x12\x04\xd5\x01$,\n0\n\x04\
    \x04\n\x02\x04\x12\x04\xd8\x01\x04C\x1a\"\x20Service-profile\x20ID\x20to\
    \x20filter\x20on.\n\n\x0f\n\x05\x04\n\x02\x04\x04\x12\x06\xd8\x01\x04\
    \xd5\x01.\n\r\n\x05\x04\n\x02\x04\x05\x12\x04\xd8\x01\x04\n\n\r\n\x05\
    \x04\n\x02\x04\x01\x12\x04\xd8\x01\x0b\x1d\n\r\n\x05\x04\n\x02\x04\x03\
    \x12\x04\xd8\x01\x20!\n\r\n\x05\x04\n\x02\x04\x08\x12\x04\xd8\x01\"B\n\r\
    \n\x05\x04\n\x02\x04\n\x12\x04\xd8\x01/A\nI\n\x04\x04\n\x02\x05\x12\x04\
    \xdb\x01\x04\x16\x1a;\x20Search\x20can\x20be\x20used\x20to\x20search\x20\
    on\x20the\x20multicast-group\x20name.\n\n\x0f\n\x05\x04\n\x02\x05\x04\
    \x12\x06\xdb\x01\x04\xd8\x01C\n\r\n\x05\x04\n\x02\x05\x05\x12\x04\xdb\
    \x01\x04\n\n\r\n\x05\x04\n\x02\x05\x01\x12\x04\xdb\x01\x0b\x11\n\r\n\x05\
    \x04\n\x02\x05\x03\x12\x04\xdb\x01\x14\x15\n\x0c\n\x02\x04\x0b\x12\x06\
    \xde\x01\0\xe3\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\xde\x01\x08\"\n1\
    \n\x04\x04\x0b\x02\0\x12\x04\xe0\x01\x04\x1a\x1a#\x20Total\x20number\x20\
    of\x20multicast-groups.\n\n\x0f\n\x05\x04\x0b\x02\0\x04\x12\x06\xe0\x01\
    \x04\xde\x01$\n\r\n\x05\x04\x0b\x02\0\x05\x12\x04\xe0\x01\x04\t\n\r\n\
    \x05\x04\x0b\x02\0\x01\x12\x04\xe0\x01\n\x15\n\r\n\x05\x04\x0b\x02\0\x03\
    \x12\x04\xe0\x01\x18\x19\n\x0c\n\x04\x04\x0b\x02\x01\x12\x04\xe2\x01\x04\
    /\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04\xe2\x01\x04\x0c\n\r\n\x05\x04\
    \x0b\x02\x01\x06\x12\x04\xe2\x01\r#\n\r\n\x05\x04\x0b\x02\x01\x01\x12\
    \x04\xe2\x01$*\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xe2\x01-.\n\x0c\n\
    \x02\x04\x0c\x12\x06\xe5\x01\0\xf2\x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\
    \x04\xe5\x01\x08\x1a\n;\n\x04\x04\x0c\x02\0\x12\x04\xe7\x01\x04C\x1a-\
    \x20Multicast-group\x20ID\x20(string\x20formatted\x20UUID).\n\n\x0f\n\
    \x05\x04\x0c\x02\0\x04\x12\x06\xe7\x01\x04\xe5\x01\x1c\n\r\n\x05\x04\x0c\
    \x02\0\x05\x12\x04\xe7\x01\x04\n\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xe7\
    \x01\x0b\x1d\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xe7\x01\x20!\n\r\n\x05\
    \x04\x0c\x02\0\x08\x12\x04\xe7\x01\"B\n\r\n\x05\x04\x0c\x02\0\n\x12\x04\
    \xe7\x01/A\nS\n\x04\x04\x0c\x02\x01\x12\x04\xeb\x01\x04\x15\x1aE\x20Down\
    link\x20frame-counter.\n\x20This\x20will\x20be\x20automatically\x20set\
    \x20on\x20enqueue.\n\n\x0f\n\x05\x04\x0c\x02\x01\x04\x12\x06\xeb\x01\x04\
    \xe7\x01C\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xeb\x01\x04\n\n\r\n\x05\
    \x04\x0c\x02\x01\x01\x12\x04\xeb\x01\x0b\x10\n\r\n\x05\x04\x0c\x02\x01\
    \x03\x12\x04\xeb\x01\x13\x14\n)\n\x04\x04\x0c\x02\x02\x12\x04\xee\x01\
    \x04\x16\x1a\x1b\x20FPort\x20used\x20(must\x20be\x20>\x200).\n\n\x0f\n\
    \x05\x04\x0c\x02\x02\x04\x12\x06\xee\x01\x04\xeb\x01\x15\n\r\n\x05\x04\
    \x0c\x02\x02\x05\x12\x04\xee\x01\x04\n\n\r\n\x05\x04\x0c\x02\x02\x01\x12\
    \x04\xee\x01\x0b\x11\n\r\n\x05\x04\x0c\x02\x02\x03\x12\x04\xee\x01\x14\
    \x15\n$\n\x04\x04\x0c\x02\x03\x12\x04\xf1\x01\x04\x13\x1a\x16\x20Base64\
    \x20encoded\x20data.\n\n\x0f\n\x05\x04\x0c\x02\x03\x04\x12\x06\xf1\x01\
    \x04\xee\x01\x16\n\r\n\x05\x04\x0c\x02\x03\x05\x12\x04\xf1\x01\x04\t\n\r\
    \n\x05\x04\x0c\x02\x03\x01\x12\x04\xf1\x01\n\x0e\n\r\n\x05\x04\x0c\x02\
    \x03\x03\x12\x04\xf1\x01\x11\x12\n\x0c\n\x02\x04\r\x12\x06\xf4\x01\0\xf7\
    \x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\xf4\x01\x08(\n7\n\x04\x04\r\x02\0\
    \x12\x04\xf6\x01\x040\x1a)\x20Multicast\x20queue-item\x20object\x20to\
    \x20enqueue.\n\n\x0f\n\x05\x04\r\x02\0\x04\x12\x06\xf6\x01\x04\xf4\x01*\
    \n\r\n\x05\x04\r\x02\0\x06\x12\x04\xf6\x01\x04\x16\n\r\n\x05\x04\r\x02\0\
    \x01\x12\x04\xf6\x01\x17+\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xf6\x01./\n\
    \x0c\n\x02\x04\x0e\x12\x06\xf9\x01\0\xfc\x01\x01\n\x0b\n\x03\x04\x0e\x01\
    \x12\x04\xf9\x01\x08)\n7\n\x04\x04\x0e\x02\0\x12\x04\xfb\x01\x04\x15\x1a\
    )\x20Frame-counter\x20for\x20the\x20enqueued\x20payload.\n\n\x0f\n\x05\
    \x04\x0e\x02\0\x04\x12\x06\xfb\x01\x04\xf9\x01+\n\r\n\x05\x04\x0e\x02\0\
    \x05\x12\x04\xfb\x01\x04\n\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xfb\x01\
    \x0b\x10\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xfb\x01\x13\x14\n\x0c\n\x02\
    \x04\x0f\x12\x06\xfe\x01\0\x81\x02\x01\n\x0b\n\x03\x04\x0f\x01\x12\x04\
    \xfe\x01\x08,\n;\n\x04\x04\x0f\x02\0\x12\x04\x80\x02\x04C\x1a-\x20Multic\
    ast-group\x20ID\x20(string\x20formatted\x20UUID).\n\n\x0f\n\x05\x04\x0f\
    \x02\0\x04\x12\x06\x80\x02\x04\xfe\x01.\n\r\n\x05\x04\x0f\x02\0\x05\x12\
    \x04\x80\x02\x04\n\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\x80\x02\x0b\x1d\n\
    \r\n\x05\x04\x0f\x02\0\x03\x12\x04\x80\x02\x20!\n\r\n\x05\x04\x0f\x02\0\
    \x08\x12\x04\x80\x02\"B\n\r\n\x05\x04\x0f\x02\0\n\x12\x04\x80\x02/A\n\
    \x0c\n\x02\x04\x10\x12\x06\x83\x02\0\x86\x02\x01\n\x0b\n\x03\x04\x10\x01\
    \x12\x04\x83\x02\x08+\n;\n\x04\x04\x10\x02\0\x12\x04\x85\x02\x04C\x1a-\
    \x20Multicast-group\x20ID\x20(string\x20formatted\x20UUID).\n\n\x0f\n\
    \x05\x04\x10\x02\0\x04\x12\x06\x85\x02\x04\x83\x02-\n\r\n\x05\x04\x10\
    \x02\0\x05\x12\x04\x85\x02\x04\n\n\r\n\x05\x04\x10\x02\0\x01\x12\x04\x85\
    \x02\x0b\x1d\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\x85\x02\x20!\n\r\n\x05\
    \x04\x10\x02\0\x08\x12\x04\x85\x02\"B\n\r\n\x05\x04\x10\x02\0\n\x12\x04\
    \x85\x02/A\n\x0c\n\x02\x04\x11\x12\x06\x88\x02\0\x8a\x02\x01\n\x0b\n\x03\
    \x04\x11\x01\x12\x04\x88\x02\x08,\n\x0c\n\x04\x04\x11\x02\0\x12\x04\x89\
    \x02\x04:\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\x89\x02\x04\x0c\n\r\n\x05\
    \x04\x11\x02\0\x06\x12\x04\x89\x02\r\x1f\n\r\n\x05\x04\x11\x02\0\x01\x12\
    \x04\x89\x02\x205\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\x89\x0289b\x06prot\
    o3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
