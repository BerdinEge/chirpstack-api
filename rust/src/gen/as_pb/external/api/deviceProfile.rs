// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/deviceProfile.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct CreateDeviceProfileRequest {
    // message fields
    pub device_profile: ::protobuf::SingularPtrField<super::profiles::DeviceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDeviceProfileRequest {
    fn default() -> &'a CreateDeviceProfileRequest {
        <CreateDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceProfileRequest {
    pub fn new() -> CreateDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // .api.DeviceProfile device_profile = 1;


    pub fn get_device_profile(&self) -> &super::profiles::DeviceProfile {
        self.device_profile.as_ref().unwrap_or_else(|| super::profiles::DeviceProfile::default_instance())
    }
    pub fn clear_device_profile(&mut self) {
        self.device_profile.clear();
    }

    pub fn has_device_profile(&self) -> bool {
        self.device_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_profile(&mut self, v: super::profiles::DeviceProfile) {
        self.device_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_profile(&mut self) -> &mut super::profiles::DeviceProfile {
        if self.device_profile.is_none() {
            self.device_profile.set_default();
        }
        self.device_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_profile(&mut self) -> super::profiles::DeviceProfile {
        self.device_profile.take().unwrap_or_else(|| super::profiles::DeviceProfile::new())
    }
}

impl ::protobuf::Message for CreateDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDeviceProfileRequest {
        CreateDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::DeviceProfile>>(
                    "device_profile",
                    |m: &CreateDeviceProfileRequest| { &m.device_profile },
                    |m: &mut CreateDeviceProfileRequest| { &mut m.device_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateDeviceProfileRequest>(
                    "CreateDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateDeviceProfileRequest,
        };
        unsafe {
            instance.get(CreateDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateDeviceProfileRequest {
    fn clear(&mut self) {
        self.device_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDeviceProfileResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDeviceProfileResponse {
    fn default() -> &'a CreateDeviceProfileResponse {
        <CreateDeviceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateDeviceProfileResponse {
    pub fn new() -> CreateDeviceProfileResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateDeviceProfileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDeviceProfileResponse {
        CreateDeviceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CreateDeviceProfileResponse| { &m.id },
                    |m: &mut CreateDeviceProfileResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateDeviceProfileResponse>(
                    "CreateDeviceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateDeviceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateDeviceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateDeviceProfileResponse,
        };
        unsafe {
            instance.get(CreateDeviceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateDeviceProfileResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDeviceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDeviceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceProfileRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceProfileRequest {
    fn default() -> &'a GetDeviceProfileRequest {
        <GetDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceProfileRequest {
    pub fn new() -> GetDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceProfileRequest {
        GetDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GetDeviceProfileRequest| { &m.id },
                    |m: &mut GetDeviceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceProfileRequest>(
                    "GetDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceProfileRequest,
        };
        unsafe {
            instance.get(GetDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDeviceProfileResponse {
    // message fields
    pub device_profile: ::protobuf::SingularPtrField<super::profiles::DeviceProfile>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDeviceProfileResponse {
    fn default() -> &'a GetDeviceProfileResponse {
        <GetDeviceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDeviceProfileResponse {
    pub fn new() -> GetDeviceProfileResponse {
        ::std::default::Default::default()
    }

    // .api.DeviceProfile device_profile = 1;


    pub fn get_device_profile(&self) -> &super::profiles::DeviceProfile {
        self.device_profile.as_ref().unwrap_or_else(|| super::profiles::DeviceProfile::default_instance())
    }
    pub fn clear_device_profile(&mut self) {
        self.device_profile.clear();
    }

    pub fn has_device_profile(&self) -> bool {
        self.device_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_profile(&mut self, v: super::profiles::DeviceProfile) {
        self.device_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_profile(&mut self) -> &mut super::profiles::DeviceProfile {
        if self.device_profile.is_none() {
            self.device_profile.set_default();
        }
        self.device_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_profile(&mut self) -> super::profiles::DeviceProfile {
        self.device_profile.take().unwrap_or_else(|| super::profiles::DeviceProfile::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetDeviceProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.device_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDeviceProfileResponse {
        GetDeviceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::DeviceProfile>>(
                    "device_profile",
                    |m: &GetDeviceProfileResponse| { &m.device_profile },
                    |m: &mut GetDeviceProfileResponse| { &mut m.device_profile },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetDeviceProfileResponse| { &m.created_at },
                    |m: &mut GetDeviceProfileResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetDeviceProfileResponse| { &m.updated_at },
                    |m: &mut GetDeviceProfileResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetDeviceProfileResponse>(
                    "GetDeviceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetDeviceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetDeviceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetDeviceProfileResponse,
        };
        unsafe {
            instance.get(GetDeviceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetDeviceProfileResponse {
    fn clear(&mut self) {
        self.device_profile.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDeviceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDeviceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateDeviceProfileRequest {
    // message fields
    pub device_profile: ::protobuf::SingularPtrField<super::profiles::DeviceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateDeviceProfileRequest {
    fn default() -> &'a UpdateDeviceProfileRequest {
        <UpdateDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateDeviceProfileRequest {
    pub fn new() -> UpdateDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // .api.DeviceProfile device_profile = 1;


    pub fn get_device_profile(&self) -> &super::profiles::DeviceProfile {
        self.device_profile.as_ref().unwrap_or_else(|| super::profiles::DeviceProfile::default_instance())
    }
    pub fn clear_device_profile(&mut self) {
        self.device_profile.clear();
    }

    pub fn has_device_profile(&self) -> bool {
        self.device_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_profile(&mut self, v: super::profiles::DeviceProfile) {
        self.device_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_profile(&mut self) -> &mut super::profiles::DeviceProfile {
        if self.device_profile.is_none() {
            self.device_profile.set_default();
        }
        self.device_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_profile(&mut self) -> super::profiles::DeviceProfile {
        self.device_profile.take().unwrap_or_else(|| super::profiles::DeviceProfile::new())
    }
}

impl ::protobuf::Message for UpdateDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateDeviceProfileRequest {
        UpdateDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::DeviceProfile>>(
                    "device_profile",
                    |m: &UpdateDeviceProfileRequest| { &m.device_profile },
                    |m: &mut UpdateDeviceProfileRequest| { &mut m.device_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateDeviceProfileRequest>(
                    "UpdateDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateDeviceProfileRequest,
        };
        unsafe {
            instance.get(UpdateDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateDeviceProfileRequest {
    fn clear(&mut self) {
        self.device_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteDeviceProfileRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteDeviceProfileRequest {
    fn default() -> &'a DeleteDeviceProfileRequest {
        <DeleteDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteDeviceProfileRequest {
    pub fn new() -> DeleteDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteDeviceProfileRequest {
        DeleteDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &DeleteDeviceProfileRequest| { &m.id },
                    |m: &mut DeleteDeviceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteDeviceProfileRequest>(
                    "DeleteDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteDeviceProfileRequest,
        };
        unsafe {
            instance.get(DeleteDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteDeviceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceProfileListItem {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub organization_id: i64,
    pub network_server_id: i64,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceProfileListItem {
    fn default() -> &'a DeviceProfileListItem {
        <DeviceProfileListItem as ::protobuf::Message>::default_instance()
    }
}

impl DeviceProfileListItem {
    pub fn new() -> DeviceProfileListItem {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int64 organization_id = 3;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int64 network_server_id = 4;


    pub fn get_network_server_id(&self) -> i64 {
        self.network_server_id
    }
    pub fn clear_network_server_id(&mut self) {
        self.network_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_server_id(&mut self, v: i64) {
        self.network_server_id = v;
    }

    // .google.protobuf.Timestamp created_at = 5;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 6;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for DeviceProfileListItem {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_server_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_server_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.network_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.organization_id != 0 {
            os.write_int64(3, self.organization_id)?;
        }
        if self.network_server_id != 0 {
            os.write_int64(4, self.network_server_id)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceProfileListItem {
        DeviceProfileListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &DeviceProfileListItem| { &m.id },
                    |m: &mut DeviceProfileListItem| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DeviceProfileListItem| { &m.name },
                    |m: &mut DeviceProfileListItem| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &DeviceProfileListItem| { &m.organization_id },
                    |m: &mut DeviceProfileListItem| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "network_server_id",
                    |m: &DeviceProfileListItem| { &m.network_server_id },
                    |m: &mut DeviceProfileListItem| { &mut m.network_server_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &DeviceProfileListItem| { &m.created_at },
                    |m: &mut DeviceProfileListItem| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &DeviceProfileListItem| { &m.updated_at },
                    |m: &mut DeviceProfileListItem| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceProfileListItem>(
                    "DeviceProfileListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeviceProfileListItem {
        static mut instance: ::protobuf::lazy::Lazy<DeviceProfileListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeviceProfileListItem,
        };
        unsafe {
            instance.get(DeviceProfileListItem::new)
        }
    }
}

impl ::protobuf::Clear for DeviceProfileListItem {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.organization_id = 0;
        self.network_server_id = 0;
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceProfileListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceProfileListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListDeviceProfileRequest {
    // message fields
    pub limit: i64,
    pub offset: i64,
    pub organization_id: i64,
    pub application_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListDeviceProfileRequest {
    fn default() -> &'a ListDeviceProfileRequest {
        <ListDeviceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListDeviceProfileRequest {
    pub fn new() -> ListDeviceProfileRequest {
        ::std::default::Default::default()
    }

    // int64 limit = 1;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // int64 offset = 2;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // int64 organization_id = 3;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int64 application_id = 4;


    pub fn get_application_id(&self) -> i64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: i64) {
        self.application_id = v;
    }
}

impl ::protobuf::Message for ListDeviceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.application_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit != 0 {
            os.write_int64(1, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int64(2, self.offset)?;
        }
        if self.organization_id != 0 {
            os.write_int64(3, self.organization_id)?;
        }
        if self.application_id != 0 {
            os.write_int64(4, self.application_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListDeviceProfileRequest {
        ListDeviceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &ListDeviceProfileRequest| { &m.limit },
                    |m: &mut ListDeviceProfileRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offset",
                    |m: &ListDeviceProfileRequest| { &m.offset },
                    |m: &mut ListDeviceProfileRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &ListDeviceProfileRequest| { &m.organization_id },
                    |m: &mut ListDeviceProfileRequest| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "application_id",
                    |m: &ListDeviceProfileRequest| { &m.application_id },
                    |m: &mut ListDeviceProfileRequest| { &mut m.application_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListDeviceProfileRequest>(
                    "ListDeviceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListDeviceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListDeviceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListDeviceProfileRequest,
        };
        unsafe {
            instance.get(ListDeviceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListDeviceProfileRequest {
    fn clear(&mut self) {
        self.limit = 0;
        self.offset = 0;
        self.organization_id = 0;
        self.application_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListDeviceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDeviceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListDeviceProfileResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<DeviceProfileListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListDeviceProfileResponse {
    fn default() -> &'a ListDeviceProfileResponse {
        <ListDeviceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListDeviceProfileResponse {
    pub fn new() -> ListDeviceProfileResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.DeviceProfileListItem result = 2;


    pub fn get_result(&self) -> &[DeviceProfileListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<DeviceProfileListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<DeviceProfileListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<DeviceProfileListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListDeviceProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListDeviceProfileResponse {
        ListDeviceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListDeviceProfileResponse| { &m.total_count },
                    |m: &mut ListDeviceProfileResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceProfileListItem>>(
                    "result",
                    |m: &ListDeviceProfileResponse| { &m.result },
                    |m: &mut ListDeviceProfileResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListDeviceProfileResponse>(
                    "ListDeviceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListDeviceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListDeviceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListDeviceProfileResponse,
        };
        unsafe {
            instance.get(ListDeviceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListDeviceProfileResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListDeviceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDeviceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#as/external/api/deviceProfile.proto\x12\x03api\x1a\x1cgoogle/api/anno\
    tations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/proto\
    buf/empty.proto\x1a\x1eas/external/api/profiles.proto\"W\n\x1aCreateDevi\
    ceProfileRequest\x129\n\x0edevice_profile\x18\x01\x20\x01(\x0b2\x12.api.\
    DeviceProfileR\rdeviceProfile\"-\n\x1bCreateDeviceProfileResponse\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\")\n\x17GetDeviceProfileRequest\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\xcb\x01\n\x18GetDeviceProfi\
    leResponse\x129\n\x0edevice_profile\x18\x01\x20\x01(\x0b2\x12.api.Device\
    ProfileR\rdeviceProfile\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.goo\
    gle.protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\tupdatedAt\"W\n\x1aUpdateDeviceProf\
    ileRequest\x129\n\x0edevice_profile\x18\x01\x20\x01(\x0b2\x12.api.Device\
    ProfileR\rdeviceProfile\",\n\x1aDeleteDeviceProfileRequest\x12\x0e\n\x02\
    id\x18\x01\x20\x01(\tR\x02id\"\x86\x02\n\x15DeviceProfileListItem\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01\
    (\tR\x04name\x12'\n\x0forganization_id\x18\x03\x20\x01(\x03R\x0eorganiza\
    tionID\x12*\n\x11network_server_id\x18\x04\x20\x01(\x03R\x0fnetworkServe\
    rID\x129\n\ncreated_at\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.Timesta\
    mpR\tcreatedAt\x129\n\nupdated_at\x18\x06\x20\x01(\x0b2\x1a.google.proto\
    buf.TimestampR\tupdatedAt\"\x98\x01\n\x18ListDeviceProfileRequest\x12\
    \x14\n\x05limit\x18\x01\x20\x01(\x03R\x05limit\x12\x16\n\x06offset\x18\
    \x02\x20\x01(\x03R\x06offset\x12'\n\x0forganization_id\x18\x03\x20\x01(\
    \x03R\x0eorganizationID\x12%\n\x0eapplication_id\x18\x04\x20\x01(\x03R\r\
    applicationID\"p\n\x19ListDeviceProfileResponse\x12\x1f\n\x0btotal_count\
    \x18\x01\x20\x01(\x03R\ntotalCount\x122\n\x06result\x18\x02\x20\x03(\x0b\
    2\x1a.api.DeviceProfileListItemR\x06result2\xae\x04\n\x14DeviceProfileSe\
    rvice\x12l\n\x06Create\x12\x1f.api.CreateDeviceProfileRequest\x1a\x20.ap\
    i.CreateDeviceProfileResponse\"\x1f\x82\xd3\xe4\x93\x02\x19\"\x14/api/de\
    vice-profiles:\x01*\x12e\n\x03Get\x12\x1c.api.GetDeviceProfileRequest\
    \x1a\x1d.api.GetDeviceProfileResponse\"!\x82\xd3\xe4\x93\x02\x1b\x12\x19\
    /api/device-profiles/{id}\x12v\n\x06Update\x12\x1f.api.UpdateDeviceProfi\
    leRequest\x1a\x16.google.protobuf.Empty\"3\x82\xd3\xe4\x93\x02-\x1a(/api\
    /device-profiles/{device_profile.id}:\x01*\x12d\n\x06Delete\x12\x1f.api.\
    DeleteDeviceProfileRequest\x1a\x16.google.protobuf.Empty\"!\x82\xd3\xe4\
    \x93\x02\x1b*\x19/api/device-profiles/{id}\x12c\n\x04List\x12\x1d.api.Li\
    stDeviceProfileRequest\x1a\x1e.api.ListDeviceProfileResponse\"\x1c\x82\
    \xd3\xe4\x93\x02\x16\x12\x14/api/device-profilesB9Z7github.com/brocaar/c\
    hirpstack-api/go/v3/as/external/apiJ\x80\x19\n\x06\x12\x04\0\0\x7f\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0b\n\x08\
    \n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\n\t\n\x02\x03\
    \0\x12\x03\x06\x07%\n\t\n\x02\x03\x01\x12\x03\x07\x07(\n\t\n\x02\x03\x02\
    \x12\x03\x08\x07$\n\t\n\x02\x03\x03\x12\x03\t\x07'\nK\n\x02\x06\0\x12\
    \x04\r\02\x01\x1a?\x20DeviceProfileService\x20is\x20the\x20service\x20ma\
    naging\x20device-profiles.\n\n\n\n\x03\x06\0\x01\x12\x03\r\x08\x1c\n8\n\
    \x04\x06\0\x02\0\x12\x04\x0f\x04\x14\x05\x1a*\x20Create\x20creates\x20th\
    e\x20given\x20device-profile.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\
    \x08\x0e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0f\x0f)\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x0f4O\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x10\x08\x13\n\
    \n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x10\x08\x13\n\nE\n\x04\
    \x06\0\x02\x01\x12\x04\x17\x04\x1b\x05\x1a7\x20Get\x20returns\x20the\x20\
    device-profile\x20matching\x20the\x20given\x20id.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x17\x08\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x17\x0c#\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x17.F\n\r\n\x05\x06\0\
    \x02\x01\x04\x12\x04\x18\x08\x1a\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\
    \xbc\"\x12\x04\x18\x08\x1a\n\n8\n\x04\x06\0\x02\x02\x12\x04\x1e\x04#\x05\
    \x1a*\x20Update\x20updates\x20the\x20given\x20device-profile.\n\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03\x1e\x08\x0e\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03\x1e\x0f)\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1e4I\n\r\n\x05\
    \x06\0\x02\x02\x04\x12\x04\x1f\x08\"\n\n\x11\n\t\x06\0\x02\x02\x04\xb0\
    \xca\xbc\"\x12\x04\x1f\x08\"\n\nH\n\x04\x06\0\x02\x03\x12\x04&\x04*\x05\
    \x1a:\x20Delete\x20deletes\x20the\x20device-profile\x20matching\x20the\
    \x20given\x20id.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03&\x08\x0e\n\x0c\
    \n\x05\x06\0\x02\x03\x02\x12\x03&\x0f)\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03&4I\n\r\n\x05\x06\0\x02\x03\x04\x12\x04'\x08)\n\n\x11\n\t\x06\0\x02\
    \x03\x04\xb0\xca\xbc\"\x12\x04'\x08)\n\n9\n\x04\x06\0\x02\x04\x12\x04-\
    \x041\x05\x1a+\x20List\x20lists\x20the\x20available\x20device-profiles.\
    \n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03-\x08\x0c\n\x0c\n\x05\x06\0\x02\
    \x04\x02\x12\x03-\r%\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03-0I\n\r\n\x05\
    \x06\0\x02\x04\x04\x12\x04.\x080\n\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\
    \xbc\"\x12\x04.\x080\n\n\n\n\x02\x04\0\x12\x044\07\x01\n\n\n\x03\x04\0\
    \x01\x12\x034\x08\"\n/\n\x04\x04\0\x02\0\x12\x036\x04%\x1a\"\x20Device-p\
    rofile\x20object\x20to\x20create.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x046\
    \x044$\n\x0c\n\x05\x04\0\x02\0\x06\x12\x036\x04\x11\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x036\x12\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x036#$\n\n\n\
    \x02\x04\x01\x12\x049\0<\x01\n\n\n\x03\x04\x01\x01\x12\x039\x08#\n/\n\
    \x04\x04\x01\x02\0\x12\x03;\x04\x12\x1a\"\x20Device-profile\x20ID\x20(UU\
    ID\x20string).\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04;\x049%\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03;\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03;\
    \x0b\r\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03;\x10\x11\n\n\n\x02\x04\x02\
    \x12\x04>\0A\x01\n\n\n\x03\x04\x02\x01\x12\x03>\x08\x1f\n/\n\x04\x04\x02\
    \x02\0\x12\x03@\x04\x12\x1a\"\x20Device-profile\x20ID\x20(UUID\x20string\
    ).\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04@\x04>!\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03@\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03@\x0b\r\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03@\x10\x11\n\n\n\x02\x04\x03\x12\x04C\0L\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03C\x08\x20\n%\n\x04\x04\x03\x02\0\x12\
    \x03E\x04%\x1a\x18\x20Device-profile\x20object.\n\n\r\n\x05\x04\x03\x02\
    \0\x04\x12\x04E\x04C\"\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03E\x04\x11\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03E\x12\x20\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03E#$\n$\n\x04\x04\x03\x02\x01\x12\x03H\x04-\x1a\x17\x20Create\
    d\x20at\x20timestamp.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04H\x04E%\n\
    \x0c\n\x05\x04\x03\x02\x01\x06\x12\x03H\x04\x1d\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03H\x1e(\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03H+,\n%\n\
    \x04\x04\x03\x02\x02\x12\x03K\x04-\x1a\x18\x20Last\x20update\x20timestam\
    p.\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04K\x04H-\n\x0c\n\x05\x04\x03\
    \x02\x02\x06\x12\x03K\x04\x1d\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03K\
    \x1e(\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03K+,\n\n\n\x02\x04\x04\x12\
    \x04N\0Q\x01\n\n\n\x03\x04\x04\x01\x12\x03N\x08\"\n/\n\x04\x04\x04\x02\0\
    \x12\x03P\x04%\x1a\"\x20Device-profile\x20object\x20to\x20update.\n\n\r\
    \n\x05\x04\x04\x02\0\x04\x12\x04P\x04N$\n\x0c\n\x05\x04\x04\x02\0\x06\
    \x12\x03P\x04\x11\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03P\x12\x20\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03P#$\n\n\n\x02\x04\x05\x12\x04S\0V\x01\n\n\
    \n\x03\x04\x05\x01\x12\x03S\x08\"\n/\n\x04\x04\x05\x02\0\x12\x03U\x04\
    \x12\x1a\"\x20Device-profile\x20ID\x20(UUID\x20string).\n\n\r\n\x05\x04\
    \x05\x02\0\x04\x12\x04U\x04S$\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03U\x04\
    \n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03U\x0b\r\n\x0c\n\x05\x04\x05\x02\
    \0\x03\x12\x03U\x10\x11\n\n\n\x02\x04\x06\x12\x04X\0j\x01\n\n\n\x03\x04\
    \x06\x01\x12\x03X\x08\x1d\n/\n\x04\x04\x06\x02\0\x12\x03Z\x04\x12\x1a\"\
    \x20Device-profile\x20ID\x20(UUID\x20string).\n\n\r\n\x05\x04\x06\x02\0\
    \x04\x12\x04Z\x04X\x1f\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03Z\x04\n\n\
    \x0c\n\x05\x04\x06\x02\0\x01\x12\x03Z\x0b\r\n\x0c\n\x05\x04\x06\x02\0\
    \x03\x12\x03Z\x10\x11\n#\n\x04\x04\x06\x02\x01\x12\x03]\x04\x14\x1a\x16\
    \x20Device-profile\x20name.\n\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04]\x04\
    Z\x12\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03]\x04\n\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x03]\x0b\x0f\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03]\
    \x12\x13\n\x1f\n\x04\x04\x06\x02\x02\x12\x03`\x04=\x1a\x12\x20Organizati\
    on\x20ID.\n\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04`\x04]\x14\n\x0c\n\x05\
    \x04\x06\x02\x02\x05\x12\x03`\x04\t\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\
    \x03`\n\x19\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03`\x1c\x1d\n\x0c\n\x05\
    \x04\x06\x02\x02\x08\x12\x03`\x1e<\n\x0c\n\x05\x04\x06\x02\x02\n\x12\x03\
    `+;\n!\n\x04\x04\x06\x02\x03\x12\x03c\x04@\x1a\x14\x20Network-server\x20\
    ID.\n\n\r\n\x05\x04\x06\x02\x03\x04\x12\x04c\x04`=\n\x0c\n\x05\x04\x06\
    \x02\x03\x05\x12\x03c\x04\t\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03c\n\
    \x1b\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03c\x1e\x1f\n\x0c\n\x05\x04\
    \x06\x02\x03\x08\x12\x03c\x20?\n\x0c\n\x05\x04\x06\x02\x03\n\x12\x03c->\
    \n$\n\x04\x04\x06\x02\x04\x12\x03f\x04-\x1a\x17\x20Created\x20at\x20time\
    stamp.\n\n\r\n\x05\x04\x06\x02\x04\x04\x12\x04f\x04c@\n\x0c\n\x05\x04\
    \x06\x02\x04\x06\x12\x03f\x04\x1d\n\x0c\n\x05\x04\x06\x02\x04\x01\x12\
    \x03f\x1e(\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03f+,\n%\n\x04\x04\x06\
    \x02\x05\x12\x03i\x04-\x1a\x18\x20Last\x20update\x20timestamp.\n\n\r\n\
    \x05\x04\x06\x02\x05\x04\x12\x04i\x04f-\n\x0c\n\x05\x04\x06\x02\x05\x06\
    \x12\x03i\x04\x1d\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03i\x1e(\n\x0c\n\
    \x05\x04\x06\x02\x05\x03\x12\x03i+,\n\n\n\x02\x04\x07\x12\x04l\0x\x01\n\
    \n\n\x03\x04\x07\x01\x12\x03l\x08\x20\n-\n\x04\x04\x07\x02\0\x12\x03n\
    \x04\x14\x1a\x20\x20Max\x20number\x20of\x20items\x20to\x20return.\n\n\r\
    \n\x05\x04\x07\x02\0\x04\x12\x04n\x04l\"\n\x0c\n\x05\x04\x07\x02\0\x05\
    \x12\x03n\x04\t\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03n\n\x0f\n\x0c\n\x05\
    \x04\x07\x02\0\x03\x12\x03n\x12\x13\n9\n\x04\x04\x07\x02\x01\x12\x03q\
    \x04\x15\x1a,\x20Offset\x20in\x20the\x20result-set\x20(for\x20pagination\
    ).\n\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04q\x04n\x14\n\x0c\n\x05\x04\x07\
    \x02\x01\x05\x12\x03q\x04\t\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03q\n\
    \x10\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03q\x13\x14\n,\n\x04\x04\x07\
    \x02\x02\x12\x03t\x04=\x1a\x1f\x20Organization\x20id\x20to\x20filter\x20\
    on.\n\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04t\x04q\x15\n\x0c\n\x05\x04\
    \x07\x02\x02\x05\x12\x03t\x04\t\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03t\
    \n\x19\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03t\x1c\x1d\n\x0c\n\x05\x04\
    \x07\x02\x02\x08\x12\x03t\x1e<\n\x0c\n\x05\x04\x07\x02\x02\n\x12\x03t+;\
    \n+\n\x04\x04\x07\x02\x03\x12\x03w\x04;\x1a\x1e\x20Application\x20id\x20\
    to\x20filter\x20on.\n\n\r\n\x05\x04\x07\x02\x03\x04\x12\x04w\x04t=\n\x0c\
    \n\x05\x04\x07\x02\x03\x05\x12\x03w\x04\t\n\x0c\n\x05\x04\x07\x02\x03\
    \x01\x12\x03w\n\x18\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\x03w\x1b\x1c\n\
    \x0c\n\x05\x04\x07\x02\x03\x08\x12\x03w\x1d:\n\x0c\n\x05\x04\x07\x02\x03\
    \n\x12\x03w*9\n\n\n\x02\x04\x08\x12\x04z\0\x7f\x01\n\n\n\x03\x04\x08\x01\
    \x12\x03z\x08!\n/\n\x04\x04\x08\x02\0\x12\x03|\x04\x1a\x1a\"\x20Total\
    \x20number\x20of\x20device-profiles.\n\n\r\n\x05\x04\x08\x02\0\x04\x12\
    \x04|\x04z#\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03|\x04\t\n\x0c\n\x05\x04\
    \x08\x02\0\x01\x12\x03|\n\x15\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03|\x18\
    \x19\n\x0b\n\x04\x04\x08\x02\x01\x12\x03~\x04.\n\x0c\n\x05\x04\x08\x02\
    \x01\x04\x12\x03~\x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03~\r\"\n\
    \x0c\n\x05\x04\x08\x02\x01\x01\x12\x03~#)\n\x0c\n\x05\x04\x08\x02\x01\
    \x03\x12\x03~,-b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
