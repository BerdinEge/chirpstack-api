// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/serviceProfile.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct CreateServiceProfileRequest {
    // message fields
    pub service_profile: ::protobuf::SingularPtrField<super::profiles::ServiceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateServiceProfileRequest {
    fn default() -> &'a CreateServiceProfileRequest {
        <CreateServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateServiceProfileRequest {
    pub fn new() -> CreateServiceProfileRequest {
        ::std::default::Default::default()
    }

    // .api.ServiceProfile service_profile = 1;


    pub fn get_service_profile(&self) -> &super::profiles::ServiceProfile {
        self.service_profile.as_ref().unwrap_or_else(|| super::profiles::ServiceProfile::default_instance())
    }
    pub fn clear_service_profile(&mut self) {
        self.service_profile.clear();
    }

    pub fn has_service_profile(&self) -> bool {
        self.service_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_profile(&mut self, v: super::profiles::ServiceProfile) {
        self.service_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile(&mut self) -> &mut super::profiles::ServiceProfile {
        if self.service_profile.is_none() {
            self.service_profile.set_default();
        }
        self.service_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_profile(&mut self) -> super::profiles::ServiceProfile {
        self.service_profile.take().unwrap_or_else(|| super::profiles::ServiceProfile::new())
    }
}

impl ::protobuf::Message for CreateServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateServiceProfileRequest {
        CreateServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::ServiceProfile>>(
                    "service_profile",
                    |m: &CreateServiceProfileRequest| { &m.service_profile },
                    |m: &mut CreateServiceProfileRequest| { &mut m.service_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateServiceProfileRequest>(
                    "CreateServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateServiceProfileRequest,
        };
        unsafe {
            instance.get(CreateServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateServiceProfileRequest {
    fn clear(&mut self) {
        self.service_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateServiceProfileResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateServiceProfileResponse {
    fn default() -> &'a CreateServiceProfileResponse {
        <CreateServiceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateServiceProfileResponse {
    pub fn new() -> CreateServiceProfileResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateServiceProfileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateServiceProfileResponse {
        CreateServiceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CreateServiceProfileResponse| { &m.id },
                    |m: &mut CreateServiceProfileResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateServiceProfileResponse>(
                    "CreateServiceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateServiceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateServiceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateServiceProfileResponse,
        };
        unsafe {
            instance.get(CreateServiceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateServiceProfileResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateServiceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateServiceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceProfileRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceProfileRequest {
    fn default() -> &'a GetServiceProfileRequest {
        <GetServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceProfileRequest {
    pub fn new() -> GetServiceProfileRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceProfileRequest {
        GetServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GetServiceProfileRequest| { &m.id },
                    |m: &mut GetServiceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetServiceProfileRequest>(
                    "GetServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetServiceProfileRequest,
        };
        unsafe {
            instance.get(GetServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetServiceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetServiceProfileResponse {
    // message fields
    pub service_profile: ::protobuf::SingularPtrField<super::profiles::ServiceProfile>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetServiceProfileResponse {
    fn default() -> &'a GetServiceProfileResponse {
        <GetServiceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetServiceProfileResponse {
    pub fn new() -> GetServiceProfileResponse {
        ::std::default::Default::default()
    }

    // .api.ServiceProfile service_profile = 1;


    pub fn get_service_profile(&self) -> &super::profiles::ServiceProfile {
        self.service_profile.as_ref().unwrap_or_else(|| super::profiles::ServiceProfile::default_instance())
    }
    pub fn clear_service_profile(&mut self) {
        self.service_profile.clear();
    }

    pub fn has_service_profile(&self) -> bool {
        self.service_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_profile(&mut self, v: super::profiles::ServiceProfile) {
        self.service_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile(&mut self) -> &mut super::profiles::ServiceProfile {
        if self.service_profile.is_none() {
            self.service_profile.set_default();
        }
        self.service_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_profile(&mut self) -> super::profiles::ServiceProfile {
        self.service_profile.take().unwrap_or_else(|| super::profiles::ServiceProfile::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetServiceProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.service_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetServiceProfileResponse {
        GetServiceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::ServiceProfile>>(
                    "service_profile",
                    |m: &GetServiceProfileResponse| { &m.service_profile },
                    |m: &mut GetServiceProfileResponse| { &mut m.service_profile },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetServiceProfileResponse| { &m.created_at },
                    |m: &mut GetServiceProfileResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetServiceProfileResponse| { &m.updated_at },
                    |m: &mut GetServiceProfileResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetServiceProfileResponse>(
                    "GetServiceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetServiceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetServiceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetServiceProfileResponse,
        };
        unsafe {
            instance.get(GetServiceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetServiceProfileResponse {
    fn clear(&mut self) {
        self.service_profile.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetServiceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetServiceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateServiceProfileRequest {
    // message fields
    pub service_profile: ::protobuf::SingularPtrField<super::profiles::ServiceProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateServiceProfileRequest {
    fn default() -> &'a UpdateServiceProfileRequest {
        <UpdateServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateServiceProfileRequest {
    pub fn new() -> UpdateServiceProfileRequest {
        ::std::default::Default::default()
    }

    // .api.ServiceProfile service_profile = 1;


    pub fn get_service_profile(&self) -> &super::profiles::ServiceProfile {
        self.service_profile.as_ref().unwrap_or_else(|| super::profiles::ServiceProfile::default_instance())
    }
    pub fn clear_service_profile(&mut self) {
        self.service_profile.clear();
    }

    pub fn has_service_profile(&self) -> bool {
        self.service_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_profile(&mut self, v: super::profiles::ServiceProfile) {
        self.service_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_profile(&mut self) -> &mut super::profiles::ServiceProfile {
        if self.service_profile.is_none() {
            self.service_profile.set_default();
        }
        self.service_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_profile(&mut self) -> super::profiles::ServiceProfile {
        self.service_profile.take().unwrap_or_else(|| super::profiles::ServiceProfile::new())
    }
}

impl ::protobuf::Message for UpdateServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.service_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.service_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.service_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateServiceProfileRequest {
        UpdateServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::profiles::ServiceProfile>>(
                    "service_profile",
                    |m: &UpdateServiceProfileRequest| { &m.service_profile },
                    |m: &mut UpdateServiceProfileRequest| { &mut m.service_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateServiceProfileRequest>(
                    "UpdateServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateServiceProfileRequest,
        };
        unsafe {
            instance.get(UpdateServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateServiceProfileRequest {
    fn clear(&mut self) {
        self.service_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteServiceProfileRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteServiceProfileRequest {
    fn default() -> &'a DeleteServiceProfileRequest {
        <DeleteServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteServiceProfileRequest {
    pub fn new() -> DeleteServiceProfileRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteServiceProfileRequest {
        DeleteServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &DeleteServiceProfileRequest| { &m.id },
                    |m: &mut DeleteServiceProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteServiceProfileRequest>(
                    "DeleteServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteServiceProfileRequest,
        };
        unsafe {
            instance.get(DeleteServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteServiceProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListServiceProfileRequest {
    // message fields
    pub limit: i64,
    pub offset: i64,
    pub organization_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListServiceProfileRequest {
    fn default() -> &'a ListServiceProfileRequest {
        <ListServiceProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListServiceProfileRequest {
    pub fn new() -> ListServiceProfileRequest {
        ::std::default::Default::default()
    }

    // int64 limit = 1;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // int64 offset = 2;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // int64 organization_id = 3;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }
}

impl ::protobuf::Message for ListServiceProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit != 0 {
            os.write_int64(1, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int64(2, self.offset)?;
        }
        if self.organization_id != 0 {
            os.write_int64(3, self.organization_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListServiceProfileRequest {
        ListServiceProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &ListServiceProfileRequest| { &m.limit },
                    |m: &mut ListServiceProfileRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offset",
                    |m: &ListServiceProfileRequest| { &m.offset },
                    |m: &mut ListServiceProfileRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &ListServiceProfileRequest| { &m.organization_id },
                    |m: &mut ListServiceProfileRequest| { &mut m.organization_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListServiceProfileRequest>(
                    "ListServiceProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListServiceProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListServiceProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListServiceProfileRequest,
        };
        unsafe {
            instance.get(ListServiceProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListServiceProfileRequest {
    fn clear(&mut self) {
        self.limit = 0;
        self.offset = 0;
        self.organization_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListServiceProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListServiceProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServiceProfileListItem {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub organization_id: i64,
    pub network_server_id: i64,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceProfileListItem {
    fn default() -> &'a ServiceProfileListItem {
        <ServiceProfileListItem as ::protobuf::Message>::default_instance()
    }
}

impl ServiceProfileListItem {
    pub fn new() -> ServiceProfileListItem {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int64 organization_id = 3;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int64 network_server_id = 4;


    pub fn get_network_server_id(&self) -> i64 {
        self.network_server_id
    }
    pub fn clear_network_server_id(&mut self) {
        self.network_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_server_id(&mut self, v: i64) {
        self.network_server_id = v;
    }

    // .google.protobuf.Timestamp created_at = 5;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 6;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for ServiceProfileListItem {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_server_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_server_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.network_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.organization_id != 0 {
            os.write_int64(3, self.organization_id)?;
        }
        if self.network_server_id != 0 {
            os.write_int64(4, self.network_server_id)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServiceProfileListItem {
        ServiceProfileListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &ServiceProfileListItem| { &m.id },
                    |m: &mut ServiceProfileListItem| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ServiceProfileListItem| { &m.name },
                    |m: &mut ServiceProfileListItem| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &ServiceProfileListItem| { &m.organization_id },
                    |m: &mut ServiceProfileListItem| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "network_server_id",
                    |m: &ServiceProfileListItem| { &m.network_server_id },
                    |m: &mut ServiceProfileListItem| { &mut m.network_server_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &ServiceProfileListItem| { &m.created_at },
                    |m: &mut ServiceProfileListItem| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &ServiceProfileListItem| { &m.updated_at },
                    |m: &mut ServiceProfileListItem| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServiceProfileListItem>(
                    "ServiceProfileListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServiceProfileListItem {
        static mut instance: ::protobuf::lazy::Lazy<ServiceProfileListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServiceProfileListItem,
        };
        unsafe {
            instance.get(ServiceProfileListItem::new)
        }
    }
}

impl ::protobuf::Clear for ServiceProfileListItem {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.organization_id = 0;
        self.network_server_id = 0;
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServiceProfileListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceProfileListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListServiceProfileResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<ServiceProfileListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListServiceProfileResponse {
    fn default() -> &'a ListServiceProfileResponse {
        <ListServiceProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListServiceProfileResponse {
    pub fn new() -> ListServiceProfileResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.ServiceProfileListItem result = 2;


    pub fn get_result(&self) -> &[ServiceProfileListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<ServiceProfileListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<ServiceProfileListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<ServiceProfileListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListServiceProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListServiceProfileResponse {
        ListServiceProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListServiceProfileResponse| { &m.total_count },
                    |m: &mut ListServiceProfileResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServiceProfileListItem>>(
                    "result",
                    |m: &ListServiceProfileResponse| { &m.result },
                    |m: &mut ListServiceProfileResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListServiceProfileResponse>(
                    "ListServiceProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListServiceProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListServiceProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListServiceProfileResponse,
        };
        unsafe {
            instance.get(ListServiceProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListServiceProfileResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListServiceProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListServiceProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$as/external/api/serviceProfile.proto\x12\x03api\x1a\x1cgoogle/api/ann\
    otations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/prot\
    obuf/empty.proto\x1a\x1eas/external/api/profiles.proto\"[\n\x1bCreateSer\
    viceProfileRequest\x12<\n\x0fservice_profile\x18\x01\x20\x01(\x0b2\x13.a\
    pi.ServiceProfileR\x0eserviceProfile\".\n\x1cCreateServiceProfileRespons\
    e\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"*\n\x18GetServiceProfileReq\
    uest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\xcf\x01\n\x19GetService\
    ProfileResponse\x12<\n\x0fservice_profile\x18\x01\x20\x01(\x0b2\x13.api.\
    ServiceProfileR\x0eserviceProfile\x129\n\ncreated_at\x18\x02\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\
    \x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tupdatedAt\"[\n\x1bUpd\
    ateServiceProfileRequest\x12<\n\x0fservice_profile\x18\x01\x20\x01(\x0b2\
    \x13.api.ServiceProfileR\x0eserviceProfile\"-\n\x1bDeleteServiceProfileR\
    equest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"r\n\x19ListServiceProf\
    ileRequest\x12\x14\n\x05limit\x18\x01\x20\x01(\x03R\x05limit\x12\x16\n\
    \x06offset\x18\x02\x20\x01(\x03R\x06offset\x12'\n\x0forganization_id\x18\
    \x03\x20\x01(\x03R\x0eorganizationID\"\x87\x02\n\x16ServiceProfileListIt\
    em\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x12'\n\x0forganization_id\x18\x03\x20\x01(\x03R\x0e\
    organizationID\x12*\n\x11network_server_id\x18\x04\x20\x01(\x03R\x0fnetw\
    orkServerID\x129\n\ncreated_at\x18\x05\x20\x01(\x0b2\x1a.google.protobuf\
    .TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x06\x20\x01(\x0b2\x1a.goog\
    le.protobuf.TimestampR\tupdatedAt\"r\n\x1aListServiceProfileResponse\x12\
    \x1f\n\x0btotal_count\x18\x01\x20\x01(\x03R\ntotalCount\x123\n\x06result\
    \x18\x02\x20\x03(\x0b2\x1b.api.ServiceProfileListItemR\x06result2\xbd\
    \x04\n\x15ServiceProfileService\x12o\n\x06Create\x12\x20.api.CreateServi\
    ceProfileRequest\x1a!.api.CreateServiceProfileResponse\"\x20\x82\xd3\xe4\
    \x93\x02\x1a\"\x15/api/service-profiles:\x01*\x12h\n\x03Get\x12\x1d.api.\
    GetServiceProfileRequest\x1a\x1e.api.GetServiceProfileResponse\"\"\x82\
    \xd3\xe4\x93\x02\x1c\x12\x1a/api/service-profiles/{id}\x12y\n\x06Update\
    \x12\x20.api.UpdateServiceProfileRequest\x1a\x16.google.protobuf.Empty\"\
    5\x82\xd3\xe4\x93\x02/\x1a*/api/service-profiles/{service_profile.id}:\
    \x01*\x12f\n\x06Delete\x12\x20.api.DeleteServiceProfileRequest\x1a\x16.g\
    oogle.protobuf.Empty\"\"\x82\xd3\xe4\x93\x02\x1c*\x1a/api/service-profil\
    es/{id}\x12f\n\x04List\x12\x1e.api.ListServiceProfileRequest\x1a\x1f.api\
    .ListServiceProfileResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\x12\x15/api/se\
    rvice-profilesB9Z7github.com/brocaar/chirpstack-api/go/v3/as/external/ap\
    iJ\xbb\x18\n\x06\x12\x04\0\0|\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\
    \x08\x0b\x12\x03\x04\0N\n\t\n\x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\x03\
    \x01\x12\x03\x07\x07(\n\t\n\x02\x03\x02\x12\x03\x08\x07$\n\t\n\x02\x03\
    \x03\x12\x03\t\x07'\nM\n\x02\x06\0\x12\x04\r\02\x01\x1aA\x20ServiceProfi\
    leService\x20is\x20the\x20service\x20managing\x20service-profiles.\n\n\n\
    \n\x03\x06\0\x01\x12\x03\r\x08\x1d\n9\n\x04\x06\0\x02\0\x12\x04\x0f\x04\
    \x14\x05\x1a+\x20Create\x20creates\x20the\x20given\x20service-profile.\n\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x0f\x0f*\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0f5Q\n\r\n\
    \x05\x06\0\x02\0\x04\x12\x04\x10\x08\x13\n\n\x11\n\t\x06\0\x02\0\x04\xb0\
    \xca\xbc\"\x12\x04\x10\x08\x13\n\nF\n\x04\x06\0\x02\x01\x12\x04\x17\x04\
    \x1b\x05\x1a8\x20Get\x20returns\x20the\x20service-profile\x20matching\
    \x20the\x20given\x20id.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x17\x08\
    \x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x17\x0c$\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x17/H\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\x18\x08\
    \x1a\n\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\x04\x18\x08\x1a\n\n\
    8\n\x04\x06\0\x02\x02\x12\x04\x1e\x04#\x05\x1a*\x20Update\x20updates\x20\
    the\x20given\x20serviceprofile.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \x1e\x08\x0e\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1e\x0f*\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03\x1e5J\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\x1f\
    \x08\"\n\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04\x1f\x08\"\n\n\
    I\n\x04\x06\0\x02\x03\x12\x04&\x04*\x05\x1a;\x20Delete\x20deletes\x20the\
    \x20service-profile\x20matching\x20the\x20given\x20id.\n\n\x0c\n\x05\x06\
    \0\x02\x03\x01\x12\x03&\x08\x0e\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03&\
    \x0f*\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03&5J\n\r\n\x05\x06\0\x02\x03\
    \x04\x12\x04'\x08)\n\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04'\
    \x08)\n\n:\n\x04\x06\0\x02\x04\x12\x04-\x041\x05\x1a,\x20List\x20lists\
    \x20the\x20available\x20service-profiles.\n\n\x0c\n\x05\x06\0\x02\x04\
    \x01\x12\x03-\x08\x0c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03-\r&\n\x0c\n\
    \x05\x06\0\x02\x04\x03\x12\x03-1K\n\r\n\x05\x06\0\x02\x04\x04\x12\x04.\
    \x080\n\n\x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04.\x080\n\n\n\n\
    \x02\x04\0\x12\x044\07\x01\n\n\n\x03\x04\0\x01\x12\x034\x08#\n0\n\x04\
    \x04\0\x02\0\x12\x036\x04'\x1a#\x20Service-profile\x20object\x20to\x20cr\
    eate.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x046\x044%\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x036\x04\x12\n\x0c\n\x05\x04\0\x02\0\x01\x12\x036\x13\"\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x036%&\n\n\n\x02\x04\x01\x12\x049\0<\x01\n\n\n\
    \x03\x04\x01\x01\x12\x039\x08$\n0\n\x04\x04\x01\x02\0\x12\x03;\x04\x12\
    \x1a#\x20Service-profile\x20ID\x20(UUID\x20string).\n\n\r\n\x05\x04\x01\
    \x02\0\x04\x12\x04;\x049%\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03;\x04\n\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03;\x0b\r\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03;\x10\x11\n\n\n\x02\x04\x02\x12\x04>\0A\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03>\x08\x20\n0\n\x04\x04\x02\x02\0\x12\x03@\x04\x12\x1a#\
    \x20Service-profile\x20ID\x20(UUID\x20string).\n\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04@\x04>!\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03@\x04\n\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03@\x0b\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03@\x10\x11\n\n\n\x02\x04\x03\x12\x04C\0L\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03C\x08!\n&\n\x04\x04\x03\x02\0\x12\x03E\x04'\x1a\x19\x20Service-p\
    rofile\x20object.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04E\x04C\"\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03E\x04\x12\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03E\x13\"\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03E%&\n$\n\x04\x04\
    \x03\x02\x01\x12\x03H\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\r\
    \n\x05\x04\x03\x02\x01\x04\x12\x04H\x04E'\n\x0c\n\x05\x04\x03\x02\x01\
    \x06\x12\x03H\x04\x1d\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03H\x1e(\n\
    \x0c\n\x05\x04\x03\x02\x01\x03\x12\x03H+,\n%\n\x04\x04\x03\x02\x02\x12\
    \x03K\x04-\x1a\x18\x20Last\x20update\x20timestamp.\n\n\r\n\x05\x04\x03\
    \x02\x02\x04\x12\x04K\x04H-\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03K\x04\
    \x1d\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03K\x1e(\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03K+,\n\n\n\x02\x04\x04\x12\x04N\0Q\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03N\x08#\n0\n\x04\x04\x04\x02\0\x12\x03P\x04'\x1a#\x20Serv\
    ice-profile\x20object\x20to\x20update.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\
    \x04P\x04N$\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03P\x04\x12\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03P\x13\"\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03P\
    %&\n\n\n\x02\x04\x05\x12\x04S\0V\x01\n\n\n\x03\x04\x05\x01\x12\x03S\x08#\
    \n0\n\x04\x04\x05\x02\0\x12\x03U\x04\x12\x1a#\x20Service-profile\x20ID\
    \x20(UUID\x20string).\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04U\x04S$\n\x0c\
    \n\x05\x04\x05\x02\0\x05\x12\x03U\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\
    \x12\x03U\x0b\r\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03U\x10\x11\n\n\n\x02\
    \x04\x06\x12\x04X\0a\x01\n\n\n\x03\x04\x06\x01\x12\x03X\x08!\n-\n\x04\
    \x04\x06\x02\0\x12\x03Z\x04\x14\x1a\x20\x20Max\x20number\x20of\x20items\
    \x20to\x20return.\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04Z\x04X\"\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x03Z\x04\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x03Z\n\x0f\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03Z\x12\x13\n9\n\x04\x04\
    \x06\x02\x01\x12\x03]\x04\x15\x1a,\x20Offset\x20in\x20the\x20result-set\
    \x20(for\x20pagination).\n\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04]\x04Z\
    \x14\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03]\x04\t\n\x0c\n\x05\x04\x06\
    \x02\x01\x01\x12\x03]\n\x10\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03]\x13\
    \x14\n,\n\x04\x04\x06\x02\x02\x12\x03`\x04=\x1a\x1f\x20Organization\x20i\
    d\x20to\x20filter\x20on.\n\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04`\x04]\
    \x15\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03`\x04\t\n\x0c\n\x05\x04\x06\
    \x02\x02\x01\x12\x03`\n\x19\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03`\x1c\
    \x1d\n\x0c\n\x05\x04\x06\x02\x02\x08\x12\x03`\x1e<\n\x0c\n\x05\x04\x06\
    \x02\x02\n\x12\x03`+;\n\n\n\x02\x04\x07\x12\x04c\0u\x01\n\n\n\x03\x04\
    \x07\x01\x12\x03c\x08\x1e\n0\n\x04\x04\x07\x02\0\x12\x03e\x04\x12\x1a#\
    \x20Service-profile\x20ID\x20(UUID\x20string).\n\n\r\n\x05\x04\x07\x02\0\
    \x04\x12\x04e\x04c\x20\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03e\x04\n\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x03e\x0b\r\n\x0c\n\x05\x04\x07\x02\0\
    \x03\x12\x03e\x10\x11\n$\n\x04\x04\x07\x02\x01\x12\x03h\x04\x14\x1a\x17\
    \x20Service-profile\x20name.\n\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04h\
    \x04e\x12\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03h\x04\n\n\x0c\n\x05\x04\
    \x07\x02\x01\x01\x12\x03h\x0b\x0f\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\
    \x03h\x12\x13\n6\n\x04\x04\x07\x02\x02\x12\x03k\x04=\x1a)\x20Organizatio\
    n\x20ID\x20of\x20the\x20service-profile.\n\n\r\n\x05\x04\x07\x02\x02\x04\
    \x12\x04k\x04h\x14\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03k\x04\t\n\x0c\
    \n\x05\x04\x07\x02\x02\x01\x12\x03k\n\x19\n\x0c\n\x05\x04\x07\x02\x02\
    \x03\x12\x03k\x1c\x1d\n\x0c\n\x05\x04\x07\x02\x02\x08\x12\x03k\x1e<\n\
    \x0c\n\x05\x04\x07\x02\x02\n\x12\x03k+;\n8\n\x04\x04\x07\x02\x03\x12\x03\
    n\x04@\x1a+\x20Network-server\x20ID\x20of\x20the\x20service-profile.\n\n\
    \r\n\x05\x04\x07\x02\x03\x04\x12\x04n\x04k=\n\x0c\n\x05\x04\x07\x02\x03\
    \x05\x12\x03n\x04\t\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03n\n\x1b\n\x0c\
    \n\x05\x04\x07\x02\x03\x03\x12\x03n\x1e\x1f\n\x0c\n\x05\x04\x07\x02\x03\
    \x08\x12\x03n\x20?\n\x0c\n\x05\x04\x07\x02\x03\n\x12\x03n->\n$\n\x04\x04\
    \x07\x02\x04\x12\x03q\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\r\
    \n\x05\x04\x07\x02\x04\x04\x12\x04q\x04n@\n\x0c\n\x05\x04\x07\x02\x04\
    \x06\x12\x03q\x04\x1d\n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x03q\x1e(\n\
    \x0c\n\x05\x04\x07\x02\x04\x03\x12\x03q+,\n%\n\x04\x04\x07\x02\x05\x12\
    \x03t\x04-\x1a\x18\x20Last\x20update\x20timestamp.\n\n\r\n\x05\x04\x07\
    \x02\x05\x04\x12\x04t\x04q-\n\x0c\n\x05\x04\x07\x02\x05\x06\x12\x03t\x04\
    \x1d\n\x0c\n\x05\x04\x07\x02\x05\x01\x12\x03t\x1e(\n\x0c\n\x05\x04\x07\
    \x02\x05\x03\x12\x03t+,\n\n\n\x02\x04\x08\x12\x04w\0|\x01\n\n\n\x03\x04\
    \x08\x01\x12\x03w\x08\"\n0\n\x04\x04\x08\x02\0\x12\x03y\x04\x1a\x1a#\x20\
    Total\x20number\x20of\x20service-profiles.\n\n\r\n\x05\x04\x08\x02\0\x04\
    \x12\x04y\x04w#\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03y\x04\t\n\x0c\n\x05\
    \x04\x08\x02\0\x01\x12\x03y\n\x15\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03y\
    \x18\x19\n\x0b\n\x04\x04\x08\x02\x01\x12\x03{\x04/\n\x0c\n\x05\x04\x08\
    \x02\x01\x04\x12\x03{\x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03{\r\
    #\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03{$*\n\x0c\n\x05\x04\x08\x02\x01\
    \x03\x12\x03{-.b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
