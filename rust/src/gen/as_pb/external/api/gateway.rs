// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/gateway.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Gateway {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub location: ::protobuf::SingularPtrField<super::common::Location>,
    pub organization_id: i64,
    pub discovery_enabled: bool,
    pub network_server_id: i64,
    pub gateway_profile_id: ::std::string::String,
    pub boards: ::protobuf::RepeatedField<GatewayBoard>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gateway {
    fn default() -> &'a Gateway {
        <Gateway as ::protobuf::Message>::default_instance()
    }
}

impl Gateway {
    pub fn new() -> Gateway {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .common.Location location = 4;


    pub fn get_location(&self) -> &super::common::Location {
        self.location.as_ref().unwrap_or_else(|| super::common::Location::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: super::common::Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut super::common::Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> super::common::Location {
        self.location.take().unwrap_or_else(|| super::common::Location::new())
    }

    // int64 organization_id = 5;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // bool discovery_enabled = 6;


    pub fn get_discovery_enabled(&self) -> bool {
        self.discovery_enabled
    }
    pub fn clear_discovery_enabled(&mut self) {
        self.discovery_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_discovery_enabled(&mut self, v: bool) {
        self.discovery_enabled = v;
    }

    // int64 network_server_id = 7;


    pub fn get_network_server_id(&self) -> i64 {
        self.network_server_id
    }
    pub fn clear_network_server_id(&mut self) {
        self.network_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_server_id(&mut self, v: i64) {
        self.network_server_id = v;
    }

    // string gateway_profile_id = 8;


    pub fn get_gateway_profile_id(&self) -> &str {
        &self.gateway_profile_id
    }
    pub fn clear_gateway_profile_id(&mut self) {
        self.gateway_profile_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile_id(&mut self, v: ::std::string::String) {
        self.gateway_profile_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile_id(&mut self) -> &mut ::std::string::String {
        &mut self.gateway_profile_id
    }

    // Take field
    pub fn take_gateway_profile_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway_profile_id, ::std::string::String::new())
    }

    // repeated .api.GatewayBoard boards = 9;


    pub fn get_boards(&self) -> &[GatewayBoard] {
        &self.boards
    }
    pub fn clear_boards(&mut self) {
        self.boards.clear();
    }

    // Param is passed by value, moved
    pub fn set_boards(&mut self, v: ::protobuf::RepeatedField<GatewayBoard>) {
        self.boards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_boards(&mut self) -> &mut ::protobuf::RepeatedField<GatewayBoard> {
        &mut self.boards
    }

    // Take field
    pub fn take_boards(&mut self) -> ::protobuf::RepeatedField<GatewayBoard> {
        ::std::mem::replace(&mut self.boards, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Gateway {
    fn is_initialized(&self) -> bool {
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.boards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.discovery_enabled = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_server_id = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway_profile_id)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.boards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.discovery_enabled != false {
            my_size += 2;
        }
        if self.network_server_id != 0 {
            my_size += ::protobuf::rt::value_size(7, self.network_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gateway_profile_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gateway_profile_id);
        }
        for value in &self.boards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.organization_id != 0 {
            os.write_int64(5, self.organization_id)?;
        }
        if self.discovery_enabled != false {
            os.write_bool(6, self.discovery_enabled)?;
        }
        if self.network_server_id != 0 {
            os.write_int64(7, self.network_server_id)?;
        }
        if !self.gateway_profile_id.is_empty() {
            os.write_string(8, &self.gateway_profile_id)?;
        }
        for v in &self.boards {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gateway {
        Gateway::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &Gateway| { &m.id },
                    |m: &mut Gateway| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Gateway| { &m.name },
                    |m: &mut Gateway| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &Gateway| { &m.description },
                    |m: &mut Gateway| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Location>>(
                    "location",
                    |m: &Gateway| { &m.location },
                    |m: &mut Gateway| { &mut m.location },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &Gateway| { &m.organization_id },
                    |m: &mut Gateway| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "discovery_enabled",
                    |m: &Gateway| { &m.discovery_enabled },
                    |m: &mut Gateway| { &mut m.discovery_enabled },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "network_server_id",
                    |m: &Gateway| { &m.network_server_id },
                    |m: &mut Gateway| { &mut m.network_server_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gateway_profile_id",
                    |m: &Gateway| { &m.gateway_profile_id },
                    |m: &mut Gateway| { &mut m.gateway_profile_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayBoard>>(
                    "boards",
                    |m: &Gateway| { &m.boards },
                    |m: &mut Gateway| { &mut m.boards },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gateway>(
                    "Gateway",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gateway {
        static mut instance: ::protobuf::lazy::Lazy<Gateway> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gateway,
        };
        unsafe {
            instance.get(Gateway::new)
        }
    }
}

impl ::protobuf::Clear for Gateway {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.description.clear();
        self.location.clear();
        self.organization_id = 0;
        self.discovery_enabled = false;
        self.network_server_id = 0;
        self.gateway_profile_id.clear();
        self.boards.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gateway {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gateway {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayBoard {
    // message fields
    pub fpga_id: ::std::string::String,
    pub fine_timestamp_key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayBoard {
    fn default() -> &'a GatewayBoard {
        <GatewayBoard as ::protobuf::Message>::default_instance()
    }
}

impl GatewayBoard {
    pub fn new() -> GatewayBoard {
        ::std::default::Default::default()
    }

    // string fpga_id = 1;


    pub fn get_fpga_id(&self) -> &str {
        &self.fpga_id
    }
    pub fn clear_fpga_id(&mut self) {
        self.fpga_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_fpga_id(&mut self, v: ::std::string::String) {
        self.fpga_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fpga_id(&mut self) -> &mut ::std::string::String {
        &mut self.fpga_id
    }

    // Take field
    pub fn take_fpga_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fpga_id, ::std::string::String::new())
    }

    // string fine_timestamp_key = 2;


    pub fn get_fine_timestamp_key(&self) -> &str {
        &self.fine_timestamp_key
    }
    pub fn clear_fine_timestamp_key(&mut self) {
        self.fine_timestamp_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_fine_timestamp_key(&mut self, v: ::std::string::String) {
        self.fine_timestamp_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fine_timestamp_key(&mut self) -> &mut ::std::string::String {
        &mut self.fine_timestamp_key
    }

    // Take field
    pub fn take_fine_timestamp_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fine_timestamp_key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GatewayBoard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fpga_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fine_timestamp_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.fpga_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.fpga_id);
        }
        if !self.fine_timestamp_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.fine_timestamp_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.fpga_id.is_empty() {
            os.write_string(1, &self.fpga_id)?;
        }
        if !self.fine_timestamp_key.is_empty() {
            os.write_string(2, &self.fine_timestamp_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayBoard {
        GatewayBoard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fpga_id",
                    |m: &GatewayBoard| { &m.fpga_id },
                    |m: &mut GatewayBoard| { &mut m.fpga_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "fine_timestamp_key",
                    |m: &GatewayBoard| { &m.fine_timestamp_key },
                    |m: &mut GatewayBoard| { &mut m.fine_timestamp_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayBoard>(
                    "GatewayBoard",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayBoard {
        static mut instance: ::protobuf::lazy::Lazy<GatewayBoard> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayBoard,
        };
        unsafe {
            instance.get(GatewayBoard::new)
        }
    }
}

impl ::protobuf::Clear for GatewayBoard {
    fn clear(&mut self) {
        self.fpga_id.clear();
        self.fine_timestamp_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayBoard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayBoard {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateGatewayRequest {
    // message fields
    pub gateway: ::protobuf::SingularPtrField<Gateway>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateGatewayRequest {
    fn default() -> &'a CreateGatewayRequest {
        <CreateGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateGatewayRequest {
    pub fn new() -> CreateGatewayRequest {
        ::std::default::Default::default()
    }

    // .api.Gateway gateway = 1;


    pub fn get_gateway(&self) -> &Gateway {
        self.gateway.as_ref().unwrap_or_else(|| Gateway::default_instance())
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    pub fn has_gateway(&self) -> bool {
        self.gateway.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: Gateway) {
        self.gateway = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut Gateway {
        if self.gateway.is_none() {
            self.gateway.set_default();
        }
        self.gateway.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway(&mut self) -> Gateway {
        self.gateway.take().unwrap_or_else(|| Gateway::new())
    }
}

impl ::protobuf::Message for CreateGatewayRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateGatewayRequest {
        CreateGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gateway>>(
                    "gateway",
                    |m: &CreateGatewayRequest| { &m.gateway },
                    |m: &mut CreateGatewayRequest| { &mut m.gateway },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateGatewayRequest>(
                    "CreateGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateGatewayRequest,
        };
        unsafe {
            instance.get(CreateGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateGatewayRequest {
    fn clear(&mut self) {
        self.gateway.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayRequest {
    fn default() -> &'a GetGatewayRequest {
        <GetGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayRequest {
    pub fn new() -> GetGatewayRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetGatewayRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayRequest {
        GetGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GetGatewayRequest| { &m.id },
                    |m: &mut GetGatewayRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayRequest>(
                    "GetGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayRequest,
        };
        unsafe {
            instance.get(GetGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayResponse {
    // message fields
    pub gateway: ::protobuf::SingularPtrField<Gateway>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub first_seen_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub last_seen_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayResponse {
    fn default() -> &'a GetGatewayResponse {
        <GetGatewayResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayResponse {
    pub fn new() -> GetGatewayResponse {
        ::std::default::Default::default()
    }

    // .api.Gateway gateway = 1;


    pub fn get_gateway(&self) -> &Gateway {
        self.gateway.as_ref().unwrap_or_else(|| Gateway::default_instance())
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    pub fn has_gateway(&self) -> bool {
        self.gateway.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: Gateway) {
        self.gateway = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut Gateway {
        if self.gateway.is_none() {
            self.gateway.set_default();
        }
        self.gateway.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway(&mut self) -> Gateway {
        self.gateway.take().unwrap_or_else(|| Gateway::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp first_seen_at = 4;


    pub fn get_first_seen_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.first_seen_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_first_seen_at(&mut self) {
        self.first_seen_at.clear();
    }

    pub fn has_first_seen_at(&self) -> bool {
        self.first_seen_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_seen_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.first_seen_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_seen_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.first_seen_at.is_none() {
            self.first_seen_at.set_default();
        }
        self.first_seen_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_first_seen_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.first_seen_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp last_seen_at = 5;


    pub fn get_last_seen_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_seen_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_last_seen_at(&mut self) {
        self.last_seen_at.clear();
    }

    pub fn has_last_seen_at(&self) -> bool {
        self.last_seen_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_seen_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_seen_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_seen_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_seen_at.is_none() {
            self.last_seen_at.set_default();
        }
        self.last_seen_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_seen_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_seen_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetGatewayResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.first_seen_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_seen_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.first_seen_at)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_seen_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.first_seen_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_seen_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.first_seen_at.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_seen_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayResponse {
        GetGatewayResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gateway>>(
                    "gateway",
                    |m: &GetGatewayResponse| { &m.gateway },
                    |m: &mut GetGatewayResponse| { &mut m.gateway },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetGatewayResponse| { &m.created_at },
                    |m: &mut GetGatewayResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetGatewayResponse| { &m.updated_at },
                    |m: &mut GetGatewayResponse| { &mut m.updated_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "first_seen_at",
                    |m: &GetGatewayResponse| { &m.first_seen_at },
                    |m: &mut GetGatewayResponse| { &mut m.first_seen_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "last_seen_at",
                    |m: &GetGatewayResponse| { &m.last_seen_at },
                    |m: &mut GetGatewayResponse| { &mut m.last_seen_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayResponse>(
                    "GetGatewayResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayResponse,
        };
        unsafe {
            instance.get(GetGatewayResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayResponse {
    fn clear(&mut self) {
        self.gateway.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.first_seen_at.clear();
        self.last_seen_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteGatewayRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteGatewayRequest {
    fn default() -> &'a DeleteGatewayRequest {
        <DeleteGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGatewayRequest {
    pub fn new() -> DeleteGatewayRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteGatewayRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteGatewayRequest {
        DeleteGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &DeleteGatewayRequest| { &m.id },
                    |m: &mut DeleteGatewayRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteGatewayRequest>(
                    "DeleteGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteGatewayRequest,
        };
        unsafe {
            instance.get(DeleteGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteGatewayRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListGatewayRequest {
    // message fields
    pub limit: i32,
    pub offset: i32,
    pub organization_id: i64,
    pub search: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListGatewayRequest {
    fn default() -> &'a ListGatewayRequest {
        <ListGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListGatewayRequest {
    pub fn new() -> ListGatewayRequest {
        ::std::default::Default::default()
    }

    // int32 limit = 1;


    pub fn get_limit(&self) -> i32 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i32) {
        self.limit = v;
    }

    // int32 offset = 2;


    pub fn get_offset(&self) -> i32 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i32) {
        self.offset = v;
    }

    // int64 organization_id = 3;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // string search = 4;


    pub fn get_search(&self) -> &str {
        &self.search
    }
    pub fn clear_search(&mut self) {
        self.search.clear();
    }

    // Param is passed by value, moved
    pub fn set_search(&mut self, v: ::std::string::String) {
        self.search = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search(&mut self) -> &mut ::std::string::String {
        &mut self.search
    }

    // Take field
    pub fn take_search(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.search, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListGatewayRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.offset = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.search)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.search.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.search);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit != 0 {
            os.write_int32(1, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int32(2, self.offset)?;
        }
        if self.organization_id != 0 {
            os.write_int64(3, self.organization_id)?;
        }
        if !self.search.is_empty() {
            os.write_string(4, &self.search)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListGatewayRequest {
        ListGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "limit",
                    |m: &ListGatewayRequest| { &m.limit },
                    |m: &mut ListGatewayRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "offset",
                    |m: &ListGatewayRequest| { &m.offset },
                    |m: &mut ListGatewayRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &ListGatewayRequest| { &m.organization_id },
                    |m: &mut ListGatewayRequest| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "search",
                    |m: &ListGatewayRequest| { &m.search },
                    |m: &mut ListGatewayRequest| { &mut m.search },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListGatewayRequest>(
                    "ListGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListGatewayRequest,
        };
        unsafe {
            instance.get(ListGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListGatewayRequest {
    fn clear(&mut self) {
        self.limit = 0;
        self.offset = 0;
        self.organization_id = 0;
        self.search.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayListItem {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub first_seen_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub last_seen_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub organization_id: i64,
    pub network_server_id: i64,
    pub location: ::protobuf::SingularPtrField<super::common::Location>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayListItem {
    fn default() -> &'a GatewayListItem {
        <GatewayListItem as ::protobuf::Message>::default_instance()
    }
}

impl GatewayListItem {
    pub fn new() -> GatewayListItem {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp created_at = 4;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 5;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp first_seen_at = 8;


    pub fn get_first_seen_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.first_seen_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_first_seen_at(&mut self) {
        self.first_seen_at.clear();
    }

    pub fn has_first_seen_at(&self) -> bool {
        self.first_seen_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_seen_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.first_seen_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_first_seen_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.first_seen_at.is_none() {
            self.first_seen_at.set_default();
        }
        self.first_seen_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_first_seen_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.first_seen_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp last_seen_at = 9;


    pub fn get_last_seen_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.last_seen_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_last_seen_at(&mut self) {
        self.last_seen_at.clear();
    }

    pub fn has_last_seen_at(&self) -> bool {
        self.last_seen_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_seen_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.last_seen_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_seen_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.last_seen_at.is_none() {
            self.last_seen_at.set_default();
        }
        self.last_seen_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_seen_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.last_seen_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // int64 organization_id = 6;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int64 network_server_id = 7;


    pub fn get_network_server_id(&self) -> i64 {
        self.network_server_id
    }
    pub fn clear_network_server_id(&mut self) {
        self.network_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_server_id(&mut self, v: i64) {
        self.network_server_id = v;
    }

    // .common.Location location = 10;


    pub fn get_location(&self) -> &super::common::Location {
        self.location.as_ref().unwrap_or_else(|| super::common::Location::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: super::common::Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut super::common::Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> super::common::Location {
        self.location.take().unwrap_or_else(|| super::common::Location::new())
    }
}

impl ::protobuf::Message for GatewayListItem {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.first_seen_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_seen_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.first_seen_at)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_seen_at)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_server_id = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.first_seen_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_seen_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(6, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_server_id != 0 {
            my_size += ::protobuf::rt::value_size(7, self.network_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.first_seen_at.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_seen_at.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.organization_id != 0 {
            os.write_int64(6, self.organization_id)?;
        }
        if self.network_server_id != 0 {
            os.write_int64(7, self.network_server_id)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayListItem {
        GatewayListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GatewayListItem| { &m.id },
                    |m: &mut GatewayListItem| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GatewayListItem| { &m.name },
                    |m: &mut GatewayListItem| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &GatewayListItem| { &m.description },
                    |m: &mut GatewayListItem| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GatewayListItem| { &m.created_at },
                    |m: &mut GatewayListItem| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GatewayListItem| { &m.updated_at },
                    |m: &mut GatewayListItem| { &mut m.updated_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "first_seen_at",
                    |m: &GatewayListItem| { &m.first_seen_at },
                    |m: &mut GatewayListItem| { &mut m.first_seen_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "last_seen_at",
                    |m: &GatewayListItem| { &m.last_seen_at },
                    |m: &mut GatewayListItem| { &mut m.last_seen_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &GatewayListItem| { &m.organization_id },
                    |m: &mut GatewayListItem| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "network_server_id",
                    |m: &GatewayListItem| { &m.network_server_id },
                    |m: &mut GatewayListItem| { &mut m.network_server_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Location>>(
                    "location",
                    |m: &GatewayListItem| { &m.location },
                    |m: &mut GatewayListItem| { &mut m.location },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayListItem>(
                    "GatewayListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayListItem {
        static mut instance: ::protobuf::lazy::Lazy<GatewayListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayListItem,
        };
        unsafe {
            instance.get(GatewayListItem::new)
        }
    }
}

impl ::protobuf::Clear for GatewayListItem {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.description.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.first_seen_at.clear();
        self.last_seen_at.clear();
        self.organization_id = 0;
        self.network_server_id = 0;
        self.location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListGatewayResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<GatewayListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListGatewayResponse {
    fn default() -> &'a ListGatewayResponse {
        <ListGatewayResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListGatewayResponse {
    pub fn new() -> ListGatewayResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.GatewayListItem result = 2;


    pub fn get_result(&self) -> &[GatewayListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<GatewayListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<GatewayListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<GatewayListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListGatewayResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListGatewayResponse {
        ListGatewayResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListGatewayResponse| { &m.total_count },
                    |m: &mut ListGatewayResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayListItem>>(
                    "result",
                    |m: &ListGatewayResponse| { &m.result },
                    |m: &mut ListGatewayResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListGatewayResponse>(
                    "ListGatewayResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListGatewayResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListGatewayResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListGatewayResponse,
        };
        unsafe {
            instance.get(ListGatewayResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListGatewayResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListGatewayResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListGatewayResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateGatewayRequest {
    // message fields
    pub gateway: ::protobuf::SingularPtrField<Gateway>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateGatewayRequest {
    fn default() -> &'a UpdateGatewayRequest {
        <UpdateGatewayRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateGatewayRequest {
    pub fn new() -> UpdateGatewayRequest {
        ::std::default::Default::default()
    }

    // .api.Gateway gateway = 1;


    pub fn get_gateway(&self) -> &Gateway {
        self.gateway.as_ref().unwrap_or_else(|| Gateway::default_instance())
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    pub fn has_gateway(&self) -> bool {
        self.gateway.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: Gateway) {
        self.gateway = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut Gateway {
        if self.gateway.is_none() {
            self.gateway.set_default();
        }
        self.gateway.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway(&mut self) -> Gateway {
        self.gateway.take().unwrap_or_else(|| Gateway::new())
    }
}

impl ::protobuf::Message for UpdateGatewayRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateGatewayRequest {
        UpdateGatewayRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Gateway>>(
                    "gateway",
                    |m: &UpdateGatewayRequest| { &m.gateway },
                    |m: &mut UpdateGatewayRequest| { &mut m.gateway },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateGatewayRequest>(
                    "UpdateGatewayRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateGatewayRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateGatewayRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateGatewayRequest,
        };
        unsafe {
            instance.get(UpdateGatewayRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateGatewayRequest {
    fn clear(&mut self) {
        self.gateway.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateGatewayRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateGatewayRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayStats {
    // message fields
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub rx_packets_received: i32,
    pub rx_packets_received_ok: i32,
    pub tx_packets_received: i32,
    pub tx_packets_emitted: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayStats {
    fn default() -> &'a GatewayStats {
        <GatewayStats as ::protobuf::Message>::default_instance()
    }
}

impl GatewayStats {
    pub fn new() -> GatewayStats {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp timestamp = 1;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // int32 rx_packets_received = 2;


    pub fn get_rx_packets_received(&self) -> i32 {
        self.rx_packets_received
    }
    pub fn clear_rx_packets_received(&mut self) {
        self.rx_packets_received = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_packets_received(&mut self, v: i32) {
        self.rx_packets_received = v;
    }

    // int32 rx_packets_received_ok = 3;


    pub fn get_rx_packets_received_ok(&self) -> i32 {
        self.rx_packets_received_ok
    }
    pub fn clear_rx_packets_received_ok(&mut self) {
        self.rx_packets_received_ok = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_packets_received_ok(&mut self, v: i32) {
        self.rx_packets_received_ok = v;
    }

    // int32 tx_packets_received = 4;


    pub fn get_tx_packets_received(&self) -> i32 {
        self.tx_packets_received
    }
    pub fn clear_tx_packets_received(&mut self) {
        self.tx_packets_received = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_packets_received(&mut self, v: i32) {
        self.tx_packets_received = v;
    }

    // int32 tx_packets_emitted = 5;


    pub fn get_tx_packets_emitted(&self) -> i32 {
        self.tx_packets_emitted
    }
    pub fn clear_tx_packets_emitted(&mut self) {
        self.tx_packets_emitted = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_packets_emitted(&mut self, v: i32) {
        self.tx_packets_emitted = v;
    }
}

impl ::protobuf::Message for GatewayStats {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rx_packets_received = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rx_packets_received_ok = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.tx_packets_received = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.tx_packets_emitted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.rx_packets_received != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rx_packets_received, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rx_packets_received_ok != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rx_packets_received_ok, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_packets_received != 0 {
            my_size += ::protobuf::rt::value_size(4, self.tx_packets_received, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_packets_emitted != 0 {
            my_size += ::protobuf::rt::value_size(5, self.tx_packets_emitted, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.rx_packets_received != 0 {
            os.write_int32(2, self.rx_packets_received)?;
        }
        if self.rx_packets_received_ok != 0 {
            os.write_int32(3, self.rx_packets_received_ok)?;
        }
        if self.tx_packets_received != 0 {
            os.write_int32(4, self.tx_packets_received)?;
        }
        if self.tx_packets_emitted != 0 {
            os.write_int32(5, self.tx_packets_emitted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayStats {
        GatewayStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "timestamp",
                    |m: &GatewayStats| { &m.timestamp },
                    |m: &mut GatewayStats| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rx_packets_received",
                    |m: &GatewayStats| { &m.rx_packets_received },
                    |m: &mut GatewayStats| { &mut m.rx_packets_received },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rx_packets_received_ok",
                    |m: &GatewayStats| { &m.rx_packets_received_ok },
                    |m: &mut GatewayStats| { &mut m.rx_packets_received_ok },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "tx_packets_received",
                    |m: &GatewayStats| { &m.tx_packets_received },
                    |m: &mut GatewayStats| { &mut m.tx_packets_received },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "tx_packets_emitted",
                    |m: &GatewayStats| { &m.tx_packets_emitted },
                    |m: &mut GatewayStats| { &mut m.tx_packets_emitted },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayStats>(
                    "GatewayStats",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayStats {
        static mut instance: ::protobuf::lazy::Lazy<GatewayStats> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayStats,
        };
        unsafe {
            instance.get(GatewayStats::new)
        }
    }
}

impl ::protobuf::Clear for GatewayStats {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.rx_packets_received = 0;
        self.rx_packets_received_ok = 0;
        self.tx_packets_received = 0;
        self.tx_packets_emitted = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayStats {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayStatsRequest {
    // message fields
    pub gateway_id: ::std::string::String,
    pub interval: ::std::string::String,
    pub start_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub end_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayStatsRequest {
    fn default() -> &'a GetGatewayStatsRequest {
        <GetGatewayStatsRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayStatsRequest {
    pub fn new() -> GetGatewayStatsRequest {
        ::std::default::Default::default()
    }

    // string gateway_id = 1;


    pub fn get_gateway_id(&self) -> &str {
        &self.gateway_id
    }
    pub fn clear_gateway_id(&mut self) {
        self.gateway_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_id(&mut self, v: ::std::string::String) {
        self.gateway_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_id(&mut self) -> &mut ::std::string::String {
        &mut self.gateway_id
    }

    // Take field
    pub fn take_gateway_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway_id, ::std::string::String::new())
    }

    // string interval = 2;


    pub fn get_interval(&self) -> &str {
        &self.interval
    }
    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: ::std::string::String) {
        self.interval = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut ::std::string::String {
        &mut self.interval
    }

    // Take field
    pub fn take_interval(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interval, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp start_timestamp = 3;


    pub fn get_start_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_timestamp.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp.clear();
    }

    pub fn has_start_timestamp(&self) -> bool {
        self.start_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_timestamp.is_none() {
            self.start_timestamp.set_default();
        }
        self.start_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp end_timestamp = 4;


    pub fn get_end_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.end_timestamp.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_end_timestamp(&mut self) {
        self.end_timestamp.clear();
    }

    pub fn has_end_timestamp(&self) -> bool {
        self.end_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.end_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.end_timestamp.is_none() {
            self.end_timestamp.set_default();
        }
        self.end_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.end_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetGatewayStatsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.start_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interval)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_timestamp)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gateway_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gateway_id);
        }
        if !self.interval.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.interval);
        }
        if let Some(ref v) = self.start_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gateway_id.is_empty() {
            os.write_string(1, &self.gateway_id)?;
        }
        if !self.interval.is_empty() {
            os.write_string(2, &self.interval)?;
        }
        if let Some(ref v) = self.start_timestamp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end_timestamp.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayStatsRequest {
        GetGatewayStatsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gateway_id",
                    |m: &GetGatewayStatsRequest| { &m.gateway_id },
                    |m: &mut GetGatewayStatsRequest| { &mut m.gateway_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "interval",
                    |m: &GetGatewayStatsRequest| { &m.interval },
                    |m: &mut GetGatewayStatsRequest| { &mut m.interval },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "start_timestamp",
                    |m: &GetGatewayStatsRequest| { &m.start_timestamp },
                    |m: &mut GetGatewayStatsRequest| { &mut m.start_timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "end_timestamp",
                    |m: &GetGatewayStatsRequest| { &m.end_timestamp },
                    |m: &mut GetGatewayStatsRequest| { &mut m.end_timestamp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayStatsRequest>(
                    "GetGatewayStatsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayStatsRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayStatsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayStatsRequest,
        };
        unsafe {
            instance.get(GetGatewayStatsRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayStatsRequest {
    fn clear(&mut self) {
        self.gateway_id.clear();
        self.interval.clear();
        self.start_timestamp.clear();
        self.end_timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayStatsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayStatsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayStatsResponse {
    // message fields
    pub result: ::protobuf::RepeatedField<GatewayStats>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayStatsResponse {
    fn default() -> &'a GetGatewayStatsResponse {
        <GetGatewayStatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayStatsResponse {
    pub fn new() -> GetGatewayStatsResponse {
        ::std::default::Default::default()
    }

    // repeated .api.GatewayStats result = 1;


    pub fn get_result(&self) -> &[GatewayStats] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<GatewayStats>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<GatewayStats> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<GatewayStats> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetGatewayStatsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.result {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayStatsResponse {
        GetGatewayStatsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayStats>>(
                    "result",
                    |m: &GetGatewayStatsResponse| { &m.result },
                    |m: &mut GetGatewayStatsResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayStatsResponse>(
                    "GetGatewayStatsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayStatsResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayStatsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayStatsResponse,
        };
        unsafe {
            instance.get(GetGatewayStatsResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayStatsResponse {
    fn clear(&mut self) {
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayStatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayStatsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingRX {
    // message fields
    pub gateway_id: ::std::string::String,
    pub rssi: i32,
    pub lora_snr: f64,
    pub latitude: f64,
    pub longitude: f64,
    pub altitude: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PingRX {
    fn default() -> &'a PingRX {
        <PingRX as ::protobuf::Message>::default_instance()
    }
}

impl PingRX {
    pub fn new() -> PingRX {
        ::std::default::Default::default()
    }

    // string gateway_id = 1;


    pub fn get_gateway_id(&self) -> &str {
        &self.gateway_id
    }
    pub fn clear_gateway_id(&mut self) {
        self.gateway_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_id(&mut self, v: ::std::string::String) {
        self.gateway_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_id(&mut self) -> &mut ::std::string::String {
        &mut self.gateway_id
    }

    // Take field
    pub fn take_gateway_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway_id, ::std::string::String::new())
    }

    // int32 rssi = 2;


    pub fn get_rssi(&self) -> i32 {
        self.rssi
    }
    pub fn clear_rssi(&mut self) {
        self.rssi = 0;
    }

    // Param is passed by value, moved
    pub fn set_rssi(&mut self, v: i32) {
        self.rssi = v;
    }

    // double lora_snr = 3;


    pub fn get_lora_snr(&self) -> f64 {
        self.lora_snr
    }
    pub fn clear_lora_snr(&mut self) {
        self.lora_snr = 0.;
    }

    // Param is passed by value, moved
    pub fn set_lora_snr(&mut self, v: f64) {
        self.lora_snr = v;
    }

    // double latitude = 4;


    pub fn get_latitude(&self) -> f64 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f64) {
        self.latitude = v;
    }

    // double longitude = 5;


    pub fn get_longitude(&self) -> f64 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f64) {
        self.longitude = v;
    }

    // double altitude = 6;


    pub fn get_altitude(&self) -> f64 {
        self.altitude
    }
    pub fn clear_altitude(&mut self) {
        self.altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_altitude(&mut self, v: f64) {
        self.altitude = v;
    }
}

impl ::protobuf::Message for PingRX {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.rssi = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lora_snr = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.latitude = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.longitude = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.altitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gateway_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gateway_id);
        }
        if self.rssi != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rssi, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.lora_snr != 0. {
            my_size += 9;
        }
        if self.latitude != 0. {
            my_size += 9;
        }
        if self.longitude != 0. {
            my_size += 9;
        }
        if self.altitude != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gateway_id.is_empty() {
            os.write_string(1, &self.gateway_id)?;
        }
        if self.rssi != 0 {
            os.write_int32(2, self.rssi)?;
        }
        if self.lora_snr != 0. {
            os.write_double(3, self.lora_snr)?;
        }
        if self.latitude != 0. {
            os.write_double(4, self.latitude)?;
        }
        if self.longitude != 0. {
            os.write_double(5, self.longitude)?;
        }
        if self.altitude != 0. {
            os.write_double(6, self.altitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingRX {
        PingRX::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gateway_id",
                    |m: &PingRX| { &m.gateway_id },
                    |m: &mut PingRX| { &mut m.gateway_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "rssi",
                    |m: &PingRX| { &m.rssi },
                    |m: &mut PingRX| { &mut m.rssi },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "lora_snr",
                    |m: &PingRX| { &m.lora_snr },
                    |m: &mut PingRX| { &mut m.lora_snr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "latitude",
                    |m: &PingRX| { &m.latitude },
                    |m: &mut PingRX| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "longitude",
                    |m: &PingRX| { &m.longitude },
                    |m: &mut PingRX| { &mut m.longitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "altitude",
                    |m: &PingRX| { &m.altitude },
                    |m: &mut PingRX| { &mut m.altitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PingRX>(
                    "PingRX",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PingRX {
        static mut instance: ::protobuf::lazy::Lazy<PingRX> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingRX,
        };
        unsafe {
            instance.get(PingRX::new)
        }
    }
}

impl ::protobuf::Clear for PingRX {
    fn clear(&mut self) {
        self.gateway_id.clear();
        self.rssi = 0;
        self.lora_snr = 0.;
        self.latitude = 0.;
        self.longitude = 0.;
        self.altitude = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingRX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingRX {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetLastPingRequest {
    // message fields
    pub gateway_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetLastPingRequest {
    fn default() -> &'a GetLastPingRequest {
        <GetLastPingRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetLastPingRequest {
    pub fn new() -> GetLastPingRequest {
        ::std::default::Default::default()
    }

    // string gateway_id = 1;


    pub fn get_gateway_id(&self) -> &str {
        &self.gateway_id
    }
    pub fn clear_gateway_id(&mut self) {
        self.gateway_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_id(&mut self, v: ::std::string::String) {
        self.gateway_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_id(&mut self) -> &mut ::std::string::String {
        &mut self.gateway_id
    }

    // Take field
    pub fn take_gateway_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetLastPingRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gateway_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gateway_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gateway_id.is_empty() {
            os.write_string(1, &self.gateway_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetLastPingRequest {
        GetLastPingRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gateway_id",
                    |m: &GetLastPingRequest| { &m.gateway_id },
                    |m: &mut GetLastPingRequest| { &mut m.gateway_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetLastPingRequest>(
                    "GetLastPingRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetLastPingRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetLastPingRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetLastPingRequest,
        };
        unsafe {
            instance.get(GetLastPingRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetLastPingRequest {
    fn clear(&mut self) {
        self.gateway_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetLastPingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetLastPingRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetLastPingResponse {
    // message fields
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub frequency: u32,
    pub dr: u32,
    pub ping_rx: ::protobuf::RepeatedField<PingRX>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetLastPingResponse {
    fn default() -> &'a GetLastPingResponse {
        <GetLastPingResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetLastPingResponse {
    pub fn new() -> GetLastPingResponse {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp created_at = 1;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // uint32 frequency = 2;


    pub fn get_frequency(&self) -> u32 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: u32) {
        self.frequency = v;
    }

    // uint32 dr = 3;


    pub fn get_dr(&self) -> u32 {
        self.dr
    }
    pub fn clear_dr(&mut self) {
        self.dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr(&mut self, v: u32) {
        self.dr = v;
    }

    // repeated .api.PingRX ping_rx = 4;


    pub fn get_ping_rx(&self) -> &[PingRX] {
        &self.ping_rx
    }
    pub fn clear_ping_rx(&mut self) {
        self.ping_rx.clear();
    }

    // Param is passed by value, moved
    pub fn set_ping_rx(&mut self, v: ::protobuf::RepeatedField<PingRX>) {
        self.ping_rx = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ping_rx(&mut self) -> &mut ::protobuf::RepeatedField<PingRX> {
        &mut self.ping_rx
    }

    // Take field
    pub fn take_ping_rx(&mut self) -> ::protobuf::RepeatedField<PingRX> {
        ::std::mem::replace(&mut self.ping_rx, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetLastPingResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ping_rx {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frequency = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dr = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ping_rx)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(2, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dr != 0 {
            my_size += ::protobuf::rt::value_size(3, self.dr, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.ping_rx {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.frequency != 0 {
            os.write_uint32(2, self.frequency)?;
        }
        if self.dr != 0 {
            os.write_uint32(3, self.dr)?;
        }
        for v in &self.ping_rx {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetLastPingResponse {
        GetLastPingResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetLastPingResponse| { &m.created_at },
                    |m: &mut GetLastPingResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frequency",
                    |m: &GetLastPingResponse| { &m.frequency },
                    |m: &mut GetLastPingResponse| { &mut m.frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dr",
                    |m: &GetLastPingResponse| { &m.dr },
                    |m: &mut GetLastPingResponse| { &mut m.dr },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PingRX>>(
                    "ping_rx",
                    |m: &GetLastPingResponse| { &m.ping_rx },
                    |m: &mut GetLastPingResponse| { &mut m.ping_rx },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetLastPingResponse>(
                    "GetLastPingResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetLastPingResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetLastPingResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetLastPingResponse,
        };
        unsafe {
            instance.get(GetLastPingResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetLastPingResponse {
    fn clear(&mut self) {
        self.created_at.clear();
        self.frequency = 0;
        self.dr = 0;
        self.ping_rx.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetLastPingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetLastPingResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamGatewayFrameLogsRequest {
    // message fields
    pub gateway_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamGatewayFrameLogsRequest {
    fn default() -> &'a StreamGatewayFrameLogsRequest {
        <StreamGatewayFrameLogsRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamGatewayFrameLogsRequest {
    pub fn new() -> StreamGatewayFrameLogsRequest {
        ::std::default::Default::default()
    }

    // string gateway_id = 1;


    pub fn get_gateway_id(&self) -> &str {
        &self.gateway_id
    }
    pub fn clear_gateway_id(&mut self) {
        self.gateway_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_id(&mut self, v: ::std::string::String) {
        self.gateway_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_id(&mut self) -> &mut ::std::string::String {
        &mut self.gateway_id
    }

    // Take field
    pub fn take_gateway_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StreamGatewayFrameLogsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gateway_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gateway_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.gateway_id.is_empty() {
            os.write_string(1, &self.gateway_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamGatewayFrameLogsRequest {
        StreamGatewayFrameLogsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gateway_id",
                    |m: &StreamGatewayFrameLogsRequest| { &m.gateway_id },
                    |m: &mut StreamGatewayFrameLogsRequest| { &mut m.gateway_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StreamGatewayFrameLogsRequest>(
                    "StreamGatewayFrameLogsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StreamGatewayFrameLogsRequest {
        static mut instance: ::protobuf::lazy::Lazy<StreamGatewayFrameLogsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamGatewayFrameLogsRequest,
        };
        unsafe {
            instance.get(StreamGatewayFrameLogsRequest::new)
        }
    }
}

impl ::protobuf::Clear for StreamGatewayFrameLogsRequest {
    fn clear(&mut self) {
        self.gateway_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamGatewayFrameLogsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamGatewayFrameLogsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamGatewayFrameLogsResponse {
    // message oneof groups
    pub frame: ::std::option::Option<StreamGatewayFrameLogsResponse_oneof_frame>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamGatewayFrameLogsResponse {
    fn default() -> &'a StreamGatewayFrameLogsResponse {
        <StreamGatewayFrameLogsResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StreamGatewayFrameLogsResponse_oneof_frame {
    uplink_frame(super::frameLog::UplinkFrameLog),
    downlink_frame(super::frameLog::DownlinkFrameLog),
}

impl StreamGatewayFrameLogsResponse {
    pub fn new() -> StreamGatewayFrameLogsResponse {
        ::std::default::Default::default()
    }

    // .api.UplinkFrameLog uplink_frame = 1;


    pub fn get_uplink_frame(&self) -> &super::frameLog::UplinkFrameLog {
        match self.frame {
            ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(ref v)) => v,
            _ => super::frameLog::UplinkFrameLog::default_instance(),
        }
    }
    pub fn clear_uplink_frame(&mut self) {
        self.frame = ::std::option::Option::None;
    }

    pub fn has_uplink_frame(&self) -> bool {
        match self.frame {
            ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uplink_frame(&mut self, v: super::frameLog::UplinkFrameLog) {
        self.frame = ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uplink_frame(&mut self) -> &mut super::frameLog::UplinkFrameLog {
        if let ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(_)) = self.frame {
        } else {
            self.frame = ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(super::frameLog::UplinkFrameLog::new()));
        }
        match self.frame {
            ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uplink_frame(&mut self) -> super::frameLog::UplinkFrameLog {
        if self.has_uplink_frame() {
            match self.frame.take() {
                ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(v)) => v,
                _ => panic!(),
            }
        } else {
            super::frameLog::UplinkFrameLog::new()
        }
    }

    // .api.DownlinkFrameLog downlink_frame = 2;


    pub fn get_downlink_frame(&self) -> &super::frameLog::DownlinkFrameLog {
        match self.frame {
            ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(ref v)) => v,
            _ => super::frameLog::DownlinkFrameLog::default_instance(),
        }
    }
    pub fn clear_downlink_frame(&mut self) {
        self.frame = ::std::option::Option::None;
    }

    pub fn has_downlink_frame(&self) -> bool {
        match self.frame {
            ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_downlink_frame(&mut self, v: super::frameLog::DownlinkFrameLog) {
        self.frame = ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(v))
    }

    // Mutable pointer to the field.
    pub fn mut_downlink_frame(&mut self) -> &mut super::frameLog::DownlinkFrameLog {
        if let ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(_)) = self.frame {
        } else {
            self.frame = ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(super::frameLog::DownlinkFrameLog::new()));
        }
        match self.frame {
            ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_downlink_frame(&mut self) -> super::frameLog::DownlinkFrameLog {
        if self.has_downlink_frame() {
            match self.frame.take() {
                ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(v)) => v,
                _ => panic!(),
            }
        } else {
            super::frameLog::DownlinkFrameLog::new()
        }
    }
}

impl ::protobuf::Message for StreamGatewayFrameLogsResponse {
    fn is_initialized(&self) -> bool {
        if let Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(ref v)) = self.frame {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(ref v)) = self.frame {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.frame = ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.frame = ::std::option::Option::Some(StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.frame {
            match v {
                &StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.frame {
            match v {
                &StreamGatewayFrameLogsResponse_oneof_frame::uplink_frame(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StreamGatewayFrameLogsResponse_oneof_frame::downlink_frame(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamGatewayFrameLogsResponse {
        StreamGatewayFrameLogsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::frameLog::UplinkFrameLog>(
                    "uplink_frame",
                    StreamGatewayFrameLogsResponse::has_uplink_frame,
                    StreamGatewayFrameLogsResponse::get_uplink_frame,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::frameLog::DownlinkFrameLog>(
                    "downlink_frame",
                    StreamGatewayFrameLogsResponse::has_downlink_frame,
                    StreamGatewayFrameLogsResponse::get_downlink_frame,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StreamGatewayFrameLogsResponse>(
                    "StreamGatewayFrameLogsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StreamGatewayFrameLogsResponse {
        static mut instance: ::protobuf::lazy::Lazy<StreamGatewayFrameLogsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StreamGatewayFrameLogsResponse,
        };
        unsafe {
            instance.get(StreamGatewayFrameLogsResponse::new)
        }
    }
}

impl ::protobuf::Clear for StreamGatewayFrameLogsResponse {
    fn clear(&mut self) {
        self.frame = ::std::option::Option::None;
        self.frame = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamGatewayFrameLogsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamGatewayFrameLogsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1das/external/api/gateway.proto\x12\x03api\x1a\x1cgoogle/api/annotat\
    ions.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf\
    /empty.proto\x1a\x13common/common.proto\x1a\x1eas/external/api/frameLog.\
    proto\"\xd8\x02\n\x07Gateway\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\
    \x18\x03\x20\x01(\tR\x0bdescription\x12,\n\x08location\x18\x04\x20\x01(\
    \x0b2\x10.common.LocationR\x08location\x12'\n\x0forganization_id\x18\x05\
    \x20\x01(\x03R\x0eorganizationID\x12+\n\x11discovery_enabled\x18\x06\x20\
    \x01(\x08R\x10discoveryEnabled\x12*\n\x11network_server_id\x18\x07\x20\
    \x01(\x03R\x0fnetworkServerID\x12,\n\x12gateway_profile_id\x18\x08\x20\
    \x01(\tR\x10gatewayProfileID\x12)\n\x06boards\x18\t\x20\x03(\x0b2\x11.ap\
    i.GatewayBoardR\x06boards\"U\n\x0cGatewayBoard\x12\x17\n\x07fpga_id\x18\
    \x01\x20\x01(\tR\x06fpgaID\x12,\n\x12fine_timestamp_key\x18\x02\x20\x01(\
    \tR\x10fineTimestampKey\">\n\x14CreateGatewayRequest\x12&\n\x07gateway\
    \x18\x01\x20\x01(\x0b2\x0c.api.GatewayR\x07gateway\"#\n\x11GetGatewayReq\
    uest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\xb0\x02\n\x12GetGateway\
    Response\x12&\n\x07gateway\x18\x01\x20\x01(\x0b2\x0c.api.GatewayR\x07gat\
    eway\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Timest\
    ampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\x1a.google.prot\
    obuf.TimestampR\tupdatedAt\x12>\n\rfirst_seen_at\x18\x04\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x0bfirstSeenAt\x12<\n\x0clast_seen_at\
    \x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nlastSeenAt\"&\n\
    \x14DeleteGatewayRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\x83\
    \x01\n\x12ListGatewayRequest\x12\x14\n\x05limit\x18\x01\x20\x01(\x05R\
    \x05limit\x12\x16\n\x06offset\x18\x02\x20\x01(\x05R\x06offset\x12'\n\x0f\
    organization_id\x18\x03\x20\x01(\x03R\x0eorganizationID\x12\x16\n\x06sea\
    rch\x18\x04\x20\x01(\tR\x06search\"\xce\x03\n\x0fGatewayListItem\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\
    \x04name\x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x12\
    9\n\ncreated_at\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tcr\
    eatedAt\x129\n\nupdated_at\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.Tim\
    estampR\tupdatedAt\x12>\n\rfirst_seen_at\x18\x08\x20\x01(\x0b2\x1a.googl\
    e.protobuf.TimestampR\x0bfirstSeenAt\x12<\n\x0clast_seen_at\x18\t\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\nlastSeenAt\x12'\n\x0forganiza\
    tion_id\x18\x06\x20\x01(\x03R\x0eorganizationID\x12*\n\x11network_server\
    _id\x18\x07\x20\x01(\x03R\x0fnetworkServerID\x12,\n\x08location\x18\n\
    \x20\x01(\x0b2\x10.common.LocationR\x08location\"d\n\x13ListGatewayRespo\
    nse\x12\x1f\n\x0btotal_count\x18\x01\x20\x01(\x03R\ntotalCount\x12,\n\
    \x06result\x18\x02\x20\x03(\x0b2\x14.api.GatewayListItemR\x06result\">\n\
    \x14UpdateGatewayRequest\x12&\n\x07gateway\x18\x01\x20\x01(\x0b2\x0c.api\
    .GatewayR\x07gateway\"\x8b\x02\n\x0cGatewayStats\x128\n\ttimestamp\x18\
    \x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestamp\x12.\n\x13r\
    x_packets_received\x18\x02\x20\x01(\x05R\x11rxPacketsReceived\x123\n\x16\
    rx_packets_received_ok\x18\x03\x20\x01(\x05R\x13rxPacketsReceivedOK\x12.\
    \n\x13tx_packets_received\x18\x04\x20\x01(\x05R\x11txPacketsReceived\x12\
    ,\n\x12tx_packets_emitted\x18\x05\x20\x01(\x05R\x10txPacketsEmitted\"\
    \xd9\x01\n\x16GetGatewayStatsRequest\x12\x1d\n\ngateway_id\x18\x01\x20\
    \x01(\tR\tgatewayID\x12\x1a\n\x08interval\x18\x02\x20\x01(\tR\x08interva\
    l\x12C\n\x0fstart_timestamp\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.Ti\
    mestampR\x0estartTimestamp\x12?\n\rend_timestamp\x18\x04\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x0cendTimestamp\"D\n\x17GetGatewayStatsR\
    esponse\x12)\n\x06result\x18\x01\x20\x03(\x0b2\x11.api.GatewayStatsR\x06\
    result\"\xac\x01\n\x06PingRX\x12\x1d\n\ngateway_id\x18\x01\x20\x01(\tR\t\
    gatewayID\x12\x12\n\x04rssi\x18\x02\x20\x01(\x05R\x04rssi\x12\x19\n\x08l\
    ora_snr\x18\x03\x20\x01(\x01R\x07loRaSNR\x12\x1a\n\x08latitude\x18\x04\
    \x20\x01(\x01R\x08latitude\x12\x1c\n\tlongitude\x18\x05\x20\x01(\x01R\tl\
    ongitude\x12\x1a\n\x08altitude\x18\x06\x20\x01(\x01R\x08altitude\"3\n\
    \x12GetLastPingRequest\x12\x1d\n\ngateway_id\x18\x01\x20\x01(\tR\tgatewa\
    yID\"\xa4\x01\n\x13GetLastPingResponse\x129\n\ncreated_at\x18\x01\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x1c\n\tfrequenc\
    y\x18\x02\x20\x01(\rR\tfrequency\x12\x0e\n\x02dr\x18\x03\x20\x01(\rR\x02\
    dr\x12$\n\x07ping_rx\x18\x04\x20\x03(\x0b2\x0b.api.PingRXR\x06pingRX\">\
    \n\x1dStreamGatewayFrameLogsRequest\x12\x1d\n\ngateway_id\x18\x01\x20\
    \x01(\tR\tgatewayID\"\xa3\x01\n\x1eStreamGatewayFrameLogsResponse\x128\n\
    \x0cuplink_frame\x18\x01\x20\x01(\x0b2\x13.api.UplinkFrameLogH\0R\x0bupl\
    inkFrame\x12>\n\x0edownlink_frame\x18\x02\x20\x01(\x0b2\x15.api.Downlink\
    FrameLogH\0R\rdownlinkFrameB\x07\n\x05frame2\xb6\x06\n\x0eGatewayService\
    \x12U\n\x06Create\x12\x19.api.CreateGatewayRequest\x1a\x16.google.protob\
    uf.Empty\"\x18\x82\xd3\xe4\x93\x02\x12\"\r/api/gateways:\x01*\x12R\n\x03\
    Get\x12\x16.api.GetGatewayRequest\x1a\x17.api.GetGatewayResponse\"\x1a\
    \x82\xd3\xe4\x93\x02\x14\x12\x12/api/gateways/{id}\x12b\n\x06Update\x12\
    \x19.api.UpdateGatewayRequest\x1a\x16.google.protobuf.Empty\"%\x82\xd3\
    \xe4\x93\x02\x1f\x1a\x1a/api/gateways/{gateway.id}:\x01*\x12W\n\x06Delet\
    e\x12\x19.api.DeleteGatewayRequest\x1a\x16.google.protobuf.Empty\"\x1a\
    \x82\xd3\xe4\x93\x02\x14*\x12/api/gateways/{id}\x12P\n\x04List\x12\x17.a\
    pi.ListGatewayRequest\x1a\x18.api.ListGatewayResponse\"\x15\x82\xd3\xe4\
    \x93\x02\x0f\x12\r/api/gateways\x12o\n\x08GetStats\x12\x1b.api.GetGatewa\
    yStatsRequest\x1a\x1c.api.GetGatewayStatsResponse\"(\x82\xd3\xe4\x93\x02\
    \"\x12\x20/api/gateways/{gateway_id}/stats\x12o\n\x0bGetLastPing\x12\x17\
    .api.GetLastPingRequest\x1a\x18.api.GetLastPingResponse\"-\x82\xd3\xe4\
    \x93\x02'\x12%/api/gateways/{gateway_id}/pings/last\x12\x87\x01\n\x0fStr\
    eamFrameLogs\x12\".api.StreamGatewayFrameLogsRequest\x1a#.api.StreamGate\
    wayFrameLogsResponse\")\x82\xd3\xe4\x93\x02#\x12!/api/gateways/{gateway_\
    id}/frames0\x01B9Z7github.com/brocaar/chirpstack-api/go/v3/as/external/a\
    piJ\xe8H\n\x07\x12\x05\0\0\xab\x02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \x08\n\x01\x02\x12\x03\x02\x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0N\n\t\n\x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\
    \x03\x01\x12\x03\x07\x07(\n\t\n\x02\x03\x02\x12\x03\x08\x07$\n\t\n\x02\
    \x03\x03\x12\x03\t\x07\x1c\n\t\n\x02\x03\x04\x12\x03\n\x07'\nB\n\x02\x06\
    \0\x12\x04\x0e\0K\x01\x1a6\x20GatewayService\x20is\x20the\x20service\x20\
    managing\x20the\x20gateways.\n\n\n\n\x03\x06\0\x01\x12\x03\x0e\x08\x16\n\
    1\n\x04\x06\0\x02\0\x12\x04\x10\x08\x15\t\x1a#\x20Create\x20creates\x20t\
    he\x20given\x20gateway.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x10\x0c\
    \x12\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x10\x13'\n\x0c\n\x05\x06\0\x02\
    \0\x03\x12\x03\x102G\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x11\x10\x14\x12\n\
    \x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x11\x10\x14\x12\nF\n\x04\
    \x06\0\x02\x01\x12\x04\x18\x08\x1c\t\x1a8\x20Get\x20returns\x20the\x20ga\
    teway\x20for\x20the\x20requested\x20mac\x20address.\n\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x18\x0c\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x18\x10!\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x18,>\n\r\n\x05\x06\0\
    \x02\x01\x04\x12\x04\x19\x10\x1b\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\
    \xbc\"\x12\x04\x19\x10\x1b\x12\nJ\n\x04\x06\0\x02\x02\x12\x04\x1f\x08$\t\
    \x1a<\x20Update\x20updates\x20the\x20gateway\x20matching\x20the\x20given\
    \x20mac\x20address.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1f\x0c\x12\
    \n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1f\x13'\n\x0c\n\x05\x06\0\x02\
    \x02\x03\x12\x03\x1f2G\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\x20\x10#\x12\
    \n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04\x20\x10#\x12\nJ\n\x04\
    \x06\0\x02\x03\x12\x04'\x08+\t\x1a<\x20Delete\x20deletes\x20the\x20gatew\
    ay\x20matching\x20the\x20given\x20mac\x20address.\n\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03'\x0c\x12\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03'\x13\
    '\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03'2G\n\r\n\x05\x06\0\x02\x03\x04\
    \x12\x04(\x10*\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04(\
    \x10*\x12\n(\n\x04\x06\0\x02\x04\x12\x04.\x082\t\x1a\x1a\x20List\x20list\
    s\x20the\x20gateways.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03.\x0c\x10\n\
    \x0c\n\x05\x06\0\x02\x04\x02\x12\x03.\x11#\n\x0c\n\x05\x06\0\x02\x04\x03\
    \x12\x03..A\n\r\n\x05\x06\0\x02\x04\x04\x12\x04/\x101\x12\n\x11\n\t\x06\
    \0\x02\x04\x04\xb0\xca\xbc\"\x12\x04/\x101\x12\nL\n\x04\x06\0\x02\x05\
    \x12\x045\x089\t\x1a>\x20GetStats\x20lists\x20the\x20gateway\x20stats\
    \x20given\x20the\x20query\x20parameters.\n\n\x0c\n\x05\x06\0\x02\x05\x01\
    \x12\x035\x0c\x14\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x035\x15+\n\x0c\n\
    \x05\x06\0\x02\x05\x03\x12\x0356M\n\r\n\x05\x06\0\x02\x05\x04\x12\x046\
    \x108\x12\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x046\x108\x12\n[\
    \n\x04\x06\0\x02\x06\x12\x04<\x08@\t\x1aM\x20GetLastPing\x20returns\x20t\
    he\x20last\x20emitted\x20ping\x20and\x20gateways\x20receiving\x20this\
    \x20ping.\n\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03<\x0c\x17\n\x0c\n\x05\
    \x06\0\x02\x06\x02\x12\x03<\x18*\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03<5\
    H\n\r\n\x05\x06\0\x02\x06\x04\x12\x04=\x10?\x12\n\x11\n\t\x06\0\x02\x06\
    \x04\xb0\xca\xbc\"\x12\x04=\x10?\x12\n\xfa\x01\n\x04\x06\0\x02\x07\x12\
    \x04F\x04J\t\x1a\xeb\x01\x20StreamFrameLogs\x20streams\x20the\x20uplink\
    \x20and\x20downlink\x20frame-logs\x20for\x20the\x20given\x20gateway\x20I\
    D.\n\x20Notes:\n\x20\x20\x20*\x20These\x20are\x20the\x20raw\x20LoRaWAN\
    \x20frames\x20and\x20this\x20endpoint\x20is\x20intended\x20for\x20debugg\
    ing\x20only.\n\x20\x20\x20*\x20This\x20endpoint\x20does\x20not\x20work\
    \x20from\x20a\x20web-browser.\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03F\
    \x08\x17\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03F\x185\n\x0c\n\x05\x06\0\
    \x02\x07\x06\x12\x03F@F\n\x0c\n\x05\x06\0\x02\x07\x03\x12\x03FGe\n\r\n\
    \x05\x06\0\x02\x07\x04\x12\x04G\x08I\n\n\x11\n\t\x06\0\x02\x07\x04\xb0\
    \xca\xbc\"\x12\x04G\x08I\n\n\n\n\x02\x04\0\x12\x04M\0l\x01\n\n\n\x03\x04\
    \0\x01\x12\x03M\x08\x0f\n(\n\x04\x04\0\x02\0\x12\x03O\x08\x16\x1a\x1b\
    \x20Gateway\x20ID\x20(HEX\x20encoded).\n\n\r\n\x05\x04\0\x02\0\x04\x12\
    \x04O\x08M\x11\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03O\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03O\x0f\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03O\
    \x14\x15\n\x1c\n\x04\x04\0\x02\x01\x12\x03R\x08\x18\x1a\x0f\x20Gateway\
    \x20name.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04R\x08O\x16\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03R\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03R\x0f\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03R\x16\x17\n#\n\x04\
    \x04\0\x02\x02\x12\x03U\x08\x1f\x1a\x16\x20Gateway\x20description.\n\n\r\
    \n\x05\x04\0\x02\x02\x04\x12\x04U\x08R\x18\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03U\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03U\x0f\x1a\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03U\x1d\x1e\n\x20\n\x04\x04\0\x02\x03\x12\
    \x03X\x08%\x1a\x13\x20Gateway\x20location.\n\n\r\n\x05\x04\0\x02\x03\x04\
    \x12\x04X\x08U\x1f\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03X\x08\x17\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03X\x18\x20\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03X#$\no\n\x04\x04\0\x02\x04\x12\x03\\\x08A\x1ab\x20Organization\
    \x20ID\x20to\x20which\x20the\x20gateway\x20belongs.\n\x20This\x20can't\
    \x20be\x20changed\x20after\x20creating\x20the\x20gateway.\n\n\r\n\x05\
    \x04\0\x02\x04\x04\x12\x04\\\x08X%\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\
    \\\x08\r\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\\\x0e\x1d\n\x0c\n\x05\x04\
    \0\x02\x04\x03\x12\x03\\\x20!\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\\\"@\
    \n\x0c\n\x05\x04\0\x02\x04\n\x12\x03\\/?\n7\n\x04\x04\0\x02\x05\x12\x03_\
    \x08#\x1a*\x20Set\x20to\x20true\x20to\x20enable\x20gateway\x20discovery.\
    \n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04_\x08\\A\n\x0c\n\x05\x04\0\x02\x05\
    \x05\x12\x03_\x08\x0c\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03_\r\x1e\n\x0c\
    \n\x05\x04\0\x02\x05\x03\x12\x03_!\"\nE\n\x04\x04\0\x02\x06\x12\x03b\x08\
    D\x1a8\x20Network-server\x20ID\x20on\x20which\x20the\x20gateway\x20is\
    \x20provisioned.\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04b\x08_#\n\x0c\n\
    \x05\x04\0\x02\x06\x05\x12\x03b\x08\r\n\x0c\n\x05\x04\0\x02\x06\x01\x12\
    \x03b\x0e\x1f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03b\"#\n\x0c\n\x05\x04\
    \0\x02\x06\x08\x12\x03b$C\n\x0c\n\x05\x04\0\x02\x06\n\x12\x03b1B\n:\n\
    \x04\x04\0\x02\x07\x12\x03e\x08G\x1a-\x20Gateway-profile\x20ID\x20(UUID\
    \x20string,\x20optional).\n\n\r\n\x05\x04\0\x02\x07\x04\x12\x04e\x08bD\n\
    \x0c\n\x05\x04\0\x02\x07\x05\x12\x03e\x08\x0e\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03e\x0f!\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03e$%\n\x0c\n\x05\
    \x04\0\x02\x07\x08\x12\x03e&F\n\x0c\n\x05\x04\0\x02\x07\n\x12\x03e3E\n\
    \x92\x02\n\x04\x04\0\x02\x08\x12\x03k\x08)\x1a\x84\x02\x20Gateway\x20boa\
    rds\x20configuration\x20(optional).\n\x20This\x20is\x20(currently)\x20on\
    ly\x20needed\x20when\x20the\x20gateway\x20supports\x20the\x20fine-timest\
    amp\n\x20and\x20you\x20you\x20would\x20like\x20to\x20add\x20the\x20FPGA\
    \x20ID\x20to\x20the\x20gateway\x20meta-data\x20or\x20would\n\x20like\x20\
    ChirpStack\x20Network\x20Server\x20to\x20decrypt\x20the\x20fine-timestam\
    p.\n\n\x0c\n\x05\x04\0\x02\x08\x04\x12\x03k\x08\x10\n\x0c\n\x05\x04\0\
    \x02\x08\x06\x12\x03k\x11\x1d\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03k\x1e\
    $\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03k'(\n\n\n\x02\x04\x01\x12\x04n\0t\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03n\x08\x14\n?\n\x04\x04\x01\x02\0\x12\
    \x03p\x04.\x1a2\x20FPGA\x20ID\x20of\x20the\x20gateway\x20(HEX\x20encoded\
    )\x20(optional).\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04p\x04n\x16\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03p\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03p\x0b\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03p\x15\x16\n\x0c\n\x05\
    \x04\x01\x02\0\x08\x12\x03p\x17-\n\x0c\n\x05\x04\x01\x02\0\n\x12\x03p$,\
    \nJ\n\x04\x04\x01\x02\x01\x12\x03s\x04\"\x1a=\x20Fine-timestamp\x20AES\
    \x20decryption\x20key\x20(HEX\x20encoded)\x20(optional).\n\n\r\n\x05\x04\
    \x01\x02\x01\x04\x12\x04s\x04p.\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03s\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03s\x0b\x1d\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03s\x20!\n\n\n\x02\x04\x02\x12\x04v\0y\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03v\x08\x1c\n(\n\x04\x04\x02\x02\0\x12\x03x\x08\
    \x1c\x1a\x1b\x20Gateway\x20object\x20to\x20create.\n\n\r\n\x05\x04\x02\
    \x02\0\x04\x12\x04x\x08v\x1e\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03x\x08\
    \x0f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03x\x10\x17\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03x\x1a\x1b\n\n\n\x02\x04\x03\x12\x04{\0~\x01\n\n\n\x03\
    \x04\x03\x01\x12\x03{\x08\x19\n(\n\x04\x04\x03\x02\0\x12\x03}\x08\x16\
    \x1a\x1b\x20Gateway\x20ID\x20(HEX\x20encoded).\n\n\r\n\x05\x04\x03\x02\0\
    \x04\x12\x04}\x08{\x1b\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03}\x08\x0e\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03}\x0f\x11\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03}\x14\x15\n\x0c\n\x02\x04\x04\x12\x06\x80\x01\0\x8f\x01\x01\
    \n\x0b\n\x03\x04\x04\x01\x12\x04\x80\x01\x08\x1a\n\x1f\n\x04\x04\x04\x02\
    \0\x12\x04\x82\x01\x08\x1c\x1a\x11\x20Gateway\x20object.\n\n\x0f\n\x05\
    \x04\x04\x02\0\x04\x12\x06\x82\x01\x08\x80\x01\x1c\n\r\n\x05\x04\x04\x02\
    \0\x06\x12\x04\x82\x01\x08\x0f\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x82\
    \x01\x10\x17\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x82\x01\x1a\x1b\n%\n\
    \x04\x04\x04\x02\x01\x12\x04\x85\x01\x081\x1a\x17\x20Created\x20at\x20ti\
    mestamp.\n\n\x0f\n\x05\x04\x04\x02\x01\x04\x12\x06\x85\x01\x08\x82\x01\
    \x1c\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\x85\x01\x08!\n\r\n\x05\x04\
    \x04\x02\x01\x01\x12\x04\x85\x01\",\n\r\n\x05\x04\x04\x02\x01\x03\x12\
    \x04\x85\x01/0\n&\n\x04\x04\x04\x02\x02\x12\x04\x88\x01\x081\x1a\x18\x20\
    Last\x20update\x20timestamp.\n\n\x0f\n\x05\x04\x04\x02\x02\x04\x12\x06\
    \x88\x01\x08\x85\x011\n\r\n\x05\x04\x04\x02\x02\x06\x12\x04\x88\x01\x08!\
    \n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\x88\x01\",\n\r\n\x05\x04\x04\x02\
    \x02\x03\x12\x04\x88\x01/0\n(\n\x04\x04\x04\x02\x03\x12\x04\x8b\x01\x084\
    \x1a\x1a\x20First\x20seen\x20at\x20timestamp.\n\n\x0f\n\x05\x04\x04\x02\
    \x03\x04\x12\x06\x8b\x01\x08\x88\x011\n\r\n\x05\x04\x04\x02\x03\x06\x12\
    \x04\x8b\x01\x08!\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\x8b\x01\"/\n\r\n\
    \x05\x04\x04\x02\x03\x03\x12\x04\x8b\x0123\n'\n\x04\x04\x04\x02\x04\x12\
    \x04\x8e\x01\x083\x1a\x19\x20Last\x20seen\x20at\x20timestamp.\n\n\x0f\n\
    \x05\x04\x04\x02\x04\x04\x12\x06\x8e\x01\x08\x8b\x014\n\r\n\x05\x04\x04\
    \x02\x04\x06\x12\x04\x8e\x01\x08!\n\r\n\x05\x04\x04\x02\x04\x01\x12\x04\
    \x8e\x01\".\n\r\n\x05\x04\x04\x02\x04\x03\x12\x04\x8e\x0112\n\x0c\n\x02\
    \x04\x05\x12\x06\x91\x01\0\x94\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\
    \x91\x01\x08\x1c\n)\n\x04\x04\x05\x02\0\x12\x04\x93\x01\x08\x16\x1a\x1b\
    \x20Gateway\x20ID\x20(HEX\x20encoded).\n\n\x0f\n\x05\x04\x05\x02\0\x04\
    \x12\x06\x93\x01\x08\x91\x01\x1e\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x93\
    \x01\x08\x0e\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x93\x01\x0f\x11\n\r\n\
    \x05\x04\x05\x02\0\x03\x12\x04\x93\x01\x14\x15\n\x0c\n\x02\x04\x06\x12\
    \x06\x96\x01\0\xa3\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\x96\x01\x08\
    \x1a\n@\n\x04\x04\x06\x02\0\x12\x04\x98\x01\x08\x18\x1a2\x20Max\x20numbe\
    r\x20of\x20nodes\x20to\x20return\x20in\x20the\x20result-set.\n\n\x0f\n\
    \x05\x04\x06\x02\0\x04\x12\x06\x98\x01\x08\x96\x01\x1c\n\r\n\x05\x04\x06\
    \x02\0\x05\x12\x04\x98\x01\x08\r\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\x98\
    \x01\x0e\x13\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x98\x01\x16\x17\n:\n\
    \x04\x04\x06\x02\x01\x12\x04\x9b\x01\x08\x19\x1a,\x20Offset\x20of\x20the\
    \x20result-set\x20(for\x20pagination).\n\n\x0f\n\x05\x04\x06\x02\x01\x04\
    \x12\x06\x9b\x01\x08\x98\x01\x18\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\
    \x9b\x01\x08\r\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x9b\x01\x0e\x14\n\r\
    \n\x05\x04\x06\x02\x01\x03\x12\x04\x9b\x01\x17\x18\n\x97\x01\n\x04\x04\
    \x06\x02\x02\x12\x04\x9f\x01\x08A\x1a\x88\x01\x20ID\x20of\x20the\x20orga\
    nization\x20for\x20which\x20to\x20filter\x20on,\x20when\x20left\x20blank\
    \x20the\n\x20response\x20will\x20return\x20all\x20gateways\x20to\x20whic\
    h\x20the\x20user\x20has\x20access\x20to.\n\n\x0f\n\x05\x04\x06\x02\x02\
    \x04\x12\x06\x9f\x01\x08\x9b\x01\x19\n\r\n\x05\x04\x06\x02\x02\x05\x12\
    \x04\x9f\x01\x08\r\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\x9f\x01\x0e\x1d\
    \n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\x9f\x01\x20!\n\r\n\x05\x04\x06\
    \x02\x02\x08\x12\x04\x9f\x01\"@\n\r\n\x05\x04\x06\x02\x02\n\x12\x04\x9f\
    \x01/?\n9\n\x04\x04\x06\x02\x03\x12\x04\xa2\x01\x08\x1a\x1a+\x20Search\
    \x20on\x20name\x20or\x20gateway\x20MAC\x20(optional).\n\n\x0f\n\x05\x04\
    \x06\x02\x03\x04\x12\x06\xa2\x01\x08\x9f\x01A\n\r\n\x05\x04\x06\x02\x03\
    \x05\x12\x04\xa2\x01\x08\x0e\n\r\n\x05\x04\x06\x02\x03\x01\x12\x04\xa2\
    \x01\x0f\x15\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\xa2\x01\x18\x19\n\x0c\
    \n\x02\x04\x07\x12\x06\xa5\x01\0\xc3\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\
    \x04\xa5\x01\x08\x17\n)\n\x04\x04\x07\x02\0\x12\x04\xa7\x01\x08\x16\x1a\
    \x1b\x20Gateway\x20ID\x20(HEX\x20encoded).\n\n\x0f\n\x05\x04\x07\x02\0\
    \x04\x12\x06\xa7\x01\x08\xa5\x01\x19\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\
    \xa7\x01\x08\x0e\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xa7\x01\x0f\x11\n\r\
    \n\x05\x04\x07\x02\0\x03\x12\x04\xa7\x01\x14\x15\n&\n\x04\x04\x07\x02\
    \x01\x12\x04\xaa\x01\x08\x18\x1a\x18\x20A\x20name\x20for\x20the\x20gatew\
    ay\n\n\x0f\n\x05\x04\x07\x02\x01\x04\x12\x06\xaa\x01\x08\xa7\x01\x16\n\r\
    \n\x05\x04\x07\x02\x01\x05\x12\x04\xaa\x01\x08\x0e\n\r\n\x05\x04\x07\x02\
    \x01\x01\x12\x04\xaa\x01\x0f\x13\n\r\n\x05\x04\x07\x02\x01\x03\x12\x04\
    \xaa\x01\x16\x17\n-\n\x04\x04\x07\x02\x02\x12\x04\xad\x01\x08\x1f\x1a\
    \x1f\x20A\x20description\x20for\x20the\x20gateway\n\n\x0f\n\x05\x04\x07\
    \x02\x02\x04\x12\x06\xad\x01\x08\xaa\x01\x18\n\r\n\x05\x04\x07\x02\x02\
    \x05\x12\x04\xad\x01\x08\x0e\n\r\n\x05\x04\x07\x02\x02\x01\x12\x04\xad\
    \x01\x0f\x1a\n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\xad\x01\x1d\x1e\n!\n\
    \x04\x04\x07\x02\x03\x12\x04\xb0\x01\x081\x1a\x13\x20Create\x20timestamp\
    .\n\n\x0f\n\x05\x04\x07\x02\x03\x04\x12\x06\xb0\x01\x08\xad\x01\x1f\n\r\
    \n\x05\x04\x07\x02\x03\x06\x12\x04\xb0\x01\x08!\n\r\n\x05\x04\x07\x02\
    \x03\x01\x12\x04\xb0\x01\",\n\r\n\x05\x04\x07\x02\x03\x03\x12\x04\xb0\
    \x01/0\n&\n\x04\x04\x07\x02\x04\x12\x04\xb3\x01\x081\x1a\x18\x20Last\x20\
    update\x20timestamp.\n\n\x0f\n\x05\x04\x07\x02\x04\x04\x12\x06\xb3\x01\
    \x08\xb0\x011\n\r\n\x05\x04\x07\x02\x04\x06\x12\x04\xb3\x01\x08!\n\r\n\
    \x05\x04\x07\x02\x04\x01\x12\x04\xb3\x01\",\n\r\n\x05\x04\x07\x02\x04\
    \x03\x12\x04\xb3\x01/0\n%\n\x04\x04\x07\x02\x05\x12\x04\xb6\x01\x040\x1a\
    \x17\x20First\x20seen\x20timestamp.\n\n\x0f\n\x05\x04\x07\x02\x05\x04\
    \x12\x06\xb6\x01\x04\xb3\x011\n\r\n\x05\x04\x07\x02\x05\x06\x12\x04\xb6\
    \x01\x04\x1d\n\r\n\x05\x04\x07\x02\x05\x01\x12\x04\xb6\x01\x1e+\n\r\n\
    \x05\x04\x07\x02\x05\x03\x12\x04\xb6\x01./\n$\n\x04\x04\x07\x02\x06\x12\
    \x04\xb9\x01\x04/\x1a\x16\x20Last\x20seen\x20timestamp.\n\n\x0f\n\x05\
    \x04\x07\x02\x06\x04\x12\x06\xb9\x01\x04\xb6\x010\n\r\n\x05\x04\x07\x02\
    \x06\x06\x12\x04\xb9\x01\x04\x1d\n\r\n\x05\x04\x07\x02\x06\x01\x12\x04\
    \xb9\x01\x1e*\n\r\n\x05\x04\x07\x02\x06\x03\x12\x04\xb9\x01-.\n\x20\n\
    \x04\x04\x07\x02\x07\x12\x04\xbc\x01\x08A\x1a\x12\x20Organization\x20ID.\
    \n\n\x0f\n\x05\x04\x07\x02\x07\x04\x12\x06\xbc\x01\x08\xb9\x01/\n\r\n\
    \x05\x04\x07\x02\x07\x05\x12\x04\xbc\x01\x08\r\n\r\n\x05\x04\x07\x02\x07\
    \x01\x12\x04\xbc\x01\x0e\x1d\n\r\n\x05\x04\x07\x02\x07\x03\x12\x04\xbc\
    \x01\x20!\n\r\n\x05\x04\x07\x02\x07\x08\x12\x04\xbc\x01\"@\n\r\n\x05\x04\
    \x07\x02\x07\n\x12\x04\xbc\x01/?\n\"\n\x04\x04\x07\x02\x08\x12\x04\xbf\
    \x01\x08D\x1a\x14\x20Network-server\x20ID.\n\n\x0f\n\x05\x04\x07\x02\x08\
    \x04\x12\x06\xbf\x01\x08\xbc\x01A\n\r\n\x05\x04\x07\x02\x08\x05\x12\x04\
    \xbf\x01\x08\r\n\r\n\x05\x04\x07\x02\x08\x01\x12\x04\xbf\x01\x0e\x1f\n\r\
    \n\x05\x04\x07\x02\x08\x03\x12\x04\xbf\x01\"#\n\r\n\x05\x04\x07\x02\x08\
    \x08\x12\x04\xbf\x01$C\n\r\n\x05\x04\x07\x02\x08\n\x12\x04\xbf\x011B\n\
    \x19\n\x04\x04\x07\x02\t\x12\x04\xc2\x01\x04\"\x1a\x0b\x20Location.\n\n\
    \x0f\n\x05\x04\x07\x02\t\x04\x12\x06\xc2\x01\x04\xbf\x01D\n\r\n\x05\x04\
    \x07\x02\t\x06\x12\x04\xc2\x01\x04\x13\n\r\n\x05\x04\x07\x02\t\x01\x12\
    \x04\xc2\x01\x14\x1c\n\r\n\x05\x04\x07\x02\t\x03\x12\x04\xc2\x01\x1f!\n\
    \x0c\n\x02\x04\x08\x12\x06\xc5\x01\0\xcb\x01\x01\n\x0b\n\x03\x04\x08\x01\
    \x12\x04\xc5\x01\x08\x1b\nF\n\x04\x04\x08\x02\0\x12\x04\xc7\x01\x08\x1e\
    \x1a8\x20Total\x20number\x20of\x20nodes\x20available\x20within\x20the\
    \x20result-set.\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xc7\x01\x08\xc5\
    \x01\x1d\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\xc7\x01\x08\r\n\r\n\x05\x04\
    \x08\x02\0\x01\x12\x04\xc7\x01\x0e\x19\n\r\n\x05\x04\x08\x02\0\x03\x12\
    \x04\xc7\x01\x1c\x1d\n-\n\x04\x04\x08\x02\x01\x12\x04\xca\x01\x08,\x1a\
    \x1f\x20Nodes\x20within\x20this\x20result-set.\n\n\r\n\x05\x04\x08\x02\
    \x01\x04\x12\x04\xca\x01\x08\x10\n\r\n\x05\x04\x08\x02\x01\x06\x12\x04\
    \xca\x01\x11\x20\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\xca\x01!'\n\r\n\
    \x05\x04\x08\x02\x01\x03\x12\x04\xca\x01*+\n\x0c\n\x02\x04\t\x12\x06\xce\
    \x01\0\xd1\x01\x01\n\x0b\n\x03\x04\t\x01\x12\x04\xce\x01\x08\x1c\n)\n\
    \x04\x04\t\x02\0\x12\x04\xd0\x01\x08\x1c\x1a\x1b\x20Gateway\x20object\
    \x20to\x20update.\n\n\x0f\n\x05\x04\t\x02\0\x04\x12\x06\xd0\x01\x08\xce\
    \x01\x1e\n\r\n\x05\x04\t\x02\0\x06\x12\x04\xd0\x01\x08\x0f\n\r\n\x05\x04\
    \t\x02\0\x01\x12\x04\xd0\x01\x10\x17\n\r\n\x05\x04\t\x02\0\x03\x12\x04\
    \xd0\x01\x1a\x1b\n\x0c\n\x02\x04\n\x12\x06\xd3\x01\0\xe2\x01\x01\n\x0b\n\
    \x03\x04\n\x01\x12\x04\xd3\x01\x08\x14\n:\n\x04\x04\n\x02\0\x12\x04\xd5\
    \x01\x080\x1a,\x20Timestamp\x20of\x20the\x20(aggregated)\x20measurement.\
    \n\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\xd5\x01\x08\xd3\x01\x16\n\r\n\x05\
    \x04\n\x02\0\x06\x12\x04\xd5\x01\x08!\n\r\n\x05\x04\n\x02\0\x01\x12\x04\
    \xd5\x01\"+\n\r\n\x05\x04\n\x02\0\x03\x12\x04\xd5\x01./\n0\n\x04\x04\n\
    \x02\x01\x12\x04\xd8\x01\x08&\x1a\"\x20Packets\x20received\x20by\x20the\
    \x20gateway.\n\n\x0f\n\x05\x04\n\x02\x01\x04\x12\x06\xd8\x01\x08\xd5\x01\
    0\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\xd8\x01\x08\r\n\r\n\x05\x04\n\x02\
    \x01\x01\x12\x04\xd8\x01\x0e!\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xd8\
    \x01$%\nJ\n\x04\x04\n\x02\x02\x12\x04\xdb\x01\x08M\x1a<\x20Packets\x20re\
    ceived\x20by\x20the\x20gateway\x20that\x20passed\x20the\x20CRC\x20check.\
    \n\n\x0f\n\x05\x04\n\x02\x02\x04\x12\x06\xdb\x01\x08\xd8\x01&\n\r\n\x05\
    \x04\n\x02\x02\x05\x12\x04\xdb\x01\x08\r\n\r\n\x05\x04\n\x02\x02\x01\x12\
    \x04\xdb\x01\x0e$\n\r\n\x05\x04\n\x02\x02\x03\x12\x04\xdb\x01'(\n\r\n\
    \x05\x04\n\x02\x02\x08\x12\x04\xdb\x01)L\n\r\n\x05\x04\n\x02\x02\n\x12\
    \x04\xdb\x016K\nA\n\x04\x04\n\x02\x03\x12\x04\xde\x01\x08&\x1a3\x20Packe\
    ts\x20received\x20by\x20the\x20gateway\x20for\x20transmission.\n\n\x0f\n\
    \x05\x04\n\x02\x03\x04\x12\x06\xde\x01\x08\xdb\x01M\n\r\n\x05\x04\n\x02\
    \x03\x05\x12\x04\xde\x01\x08\r\n\r\n\x05\x04\n\x02\x03\x01\x12\x04\xde\
    \x01\x0e!\n\r\n\x05\x04\n\x02\x03\x03\x12\x04\xde\x01$%\n3\n\x04\x04\n\
    \x02\x04\x12\x04\xe1\x01\x08%\x1a%\x20Packets\x20transmitted\x20by\x20th\
    e\x20gateway.\n\n\x0f\n\x05\x04\n\x02\x04\x04\x12\x06\xe1\x01\x08\xde\
    \x01&\n\r\n\x05\x04\n\x02\x04\x05\x12\x04\xe1\x01\x08\r\n\r\n\x05\x04\n\
    \x02\x04\x01\x12\x04\xe1\x01\x0e\x20\n\r\n\x05\x04\n\x02\x04\x03\x12\x04\
    \xe1\x01#$\n\x0c\n\x02\x04\x0b\x12\x06\xe4\x01\0\xf1\x01\x01\n\x0b\n\x03\
    \x04\x0b\x01\x12\x04\xe4\x01\x08\x1e\n)\n\x04\x04\x0b\x02\0\x12\x04\xe6\
    \x01\x088\x1a\x1b\x20Gateway\x20ID\x20(HEX\x20encoded).\n\n\x0f\n\x05\
    \x04\x0b\x02\0\x04\x12\x06\xe6\x01\x08\xe4\x01\x20\n\r\n\x05\x04\x0b\x02\
    \0\x05\x12\x04\xe6\x01\x08\x0e\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xe6\
    \x01\x0f\x19\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xe6\x01\x1c\x1d\n\r\n\
    \x05\x04\x0b\x02\0\x08\x12\x04\xe6\x01\x1e7\n\r\n\x05\x04\x0b\x02\0\n\
    \x12\x04\xe6\x01+6\n\x88\x01\n\x04\x04\x0b\x02\x01\x12\x04\xea\x01\x08\
    \x1c\x1az\x20Aggregation\x20interval.\x20\x20One\x20of\x20\"second\",\
    \x20\"minute\",\x20\"hour\",\x20\"day\",\x20\"week\",\n\x20\"month\",\
    \x20\"quarter\",\x20\"year\".\x20\x20Case\x20insensitive.\n\n\x0f\n\x05\
    \x04\x0b\x02\x01\x04\x12\x06\xea\x01\x08\xe6\x018\n\r\n\x05\x04\x0b\x02\
    \x01\x05\x12\x04\xea\x01\x08\x0e\n\r\n\x05\x04\x0b\x02\x01\x01\x12\x04\
    \xea\x01\x0f\x17\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xea\x01\x1a\x1b\n\
    (\n\x04\x04\x0b\x02\x02\x12\x04\xed\x01\x086\x1a\x1a\x20Timestamp\x20to\
    \x20start\x20from.\n\n\x0f\n\x05\x04\x0b\x02\x02\x04\x12\x06\xed\x01\x08\
    \xea\x01\x1c\n\r\n\x05\x04\x0b\x02\x02\x06\x12\x04\xed\x01\x08!\n\r\n\
    \x05\x04\x0b\x02\x02\x01\x12\x04\xed\x01\"1\n\r\n\x05\x04\x0b\x02\x02\
    \x03\x12\x04\xed\x0145\n,\n\x04\x04\x0b\x02\x03\x12\x04\xf0\x01\x084\x1a\
    \x1e\x20Timestamp\x20until\x20to\x20get\x20from.\n\n\x0f\n\x05\x04\x0b\
    \x02\x03\x04\x12\x06\xf0\x01\x08\xed\x016\n\r\n\x05\x04\x0b\x02\x03\x06\
    \x12\x04\xf0\x01\x08!\n\r\n\x05\x04\x0b\x02\x03\x01\x12\x04\xf0\x01\"/\n\
    \r\n\x05\x04\x0b\x02\x03\x03\x12\x04\xf0\x0123\n\x0c\n\x02\x04\x0c\x12\
    \x06\xf3\x01\0\xf5\x01\x01\n\x0b\n\x03\x04\x0c\x01\x12\x04\xf3\x01\x08\
    \x1f\n\x0c\n\x04\x04\x0c\x02\0\x12\x04\xf4\x01\x08)\n\r\n\x05\x04\x0c\
    \x02\0\x04\x12\x04\xf4\x01\x08\x10\n\r\n\x05\x04\x0c\x02\0\x06\x12\x04\
    \xf4\x01\x11\x1d\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xf4\x01\x1e$\n\r\n\
    \x05\x04\x0c\x02\0\x03\x12\x04\xf4\x01'(\n\x0c\n\x02\x04\r\x12\x06\xf7\
    \x01\0\x89\x02\x01\n\x0b\n\x03\x04\r\x01\x12\x04\xf7\x01\x08\x0e\n)\n\
    \x04\x04\r\x02\0\x12\x04\xf9\x01\x088\x1a\x1b\x20Gateway\x20ID\x20(HEX\
    \x20encoded).\n\n\x0f\n\x05\x04\r\x02\0\x04\x12\x06\xf9\x01\x08\xf7\x01\
    \x10\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xf9\x01\x08\x0e\n\r\n\x05\x04\r\
    \x02\0\x01\x12\x04\xf9\x01\x0f\x19\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xf9\
    \x01\x1c\x1d\n\r\n\x05\x04\r\x02\0\x08\x12\x04\xf9\x01\x1e7\n\r\n\x05\
    \x04\r\x02\0\n\x12\x04\xf9\x01+6\n\x15\n\x04\x04\r\x02\x01\x12\x04\xfc\
    \x01\x08\x17\x1a\x07\x20RSSI.\n\n\x0f\n\x05\x04\r\x02\x01\x04\x12\x06\
    \xfc\x01\x08\xf9\x018\n\r\n\x05\x04\r\x02\x01\x05\x12\x04\xfc\x01\x08\r\
    \n\r\n\x05\x04\r\x02\x01\x01\x12\x04\xfc\x01\x0e\x12\n\r\n\x05\x04\r\x02\
    \x01\x03\x12\x04\xfc\x01\x15\x16\n\x19\n\x04\x04\r\x02\x02\x12\x04\xff\
    \x01\x084\x1a\x0b\x20LoRa\x20SNR.\n\n\x0f\n\x05\x04\r\x02\x02\x04\x12\
    \x06\xff\x01\x08\xfc\x01\x17\n\r\n\x05\x04\r\x02\x02\x05\x12\x04\xff\x01\
    \x08\x0e\n\r\n\x05\x04\r\x02\x02\x01\x12\x04\xff\x01\x0f\x17\n\r\n\x05\
    \x04\r\x02\x02\x03\x12\x04\xff\x01\x1a\x1b\n\r\n\x05\x04\r\x02\x02\x08\
    \x12\x04\xff\x01\x1c3\n\r\n\x05\x04\r\x02\x02\n\x12\x04\xff\x01)2\n6\n\
    \x04\x04\r\x02\x03\x12\x04\x82\x02\x08\x1c\x1a(\x20Latitude\x20of\x20the\
    \x20gateway\x20-90.0\x20to\x2090.0.\n\n\x0f\n\x05\x04\r\x02\x03\x04\x12\
    \x06\x82\x02\x08\xff\x014\n\r\n\x05\x04\r\x02\x03\x05\x12\x04\x82\x02\
    \x08\x0e\n\r\n\x05\x04\r\x02\x03\x01\x12\x04\x82\x02\x0f\x17\n\r\n\x05\
    \x04\r\x02\x03\x03\x12\x04\x82\x02\x1a\x1b\n9\n\x04\x04\r\x02\x04\x12\
    \x04\x85\x02\x08\x1d\x1a+\x20Longitude\x20of\x20the\x20gateway\x20-180.0\
    \x20to\x20180.0.\n\n\x0f\n\x05\x04\r\x02\x04\x04\x12\x06\x85\x02\x08\x82\
    \x02\x1c\n\r\n\x05\x04\r\x02\x04\x05\x12\x04\x85\x02\x08\x0e\n\r\n\x05\
    \x04\r\x02\x04\x01\x12\x04\x85\x02\x0f\x18\n\r\n\x05\x04\r\x02\x04\x03\
    \x12\x04\x85\x02\x1b\x1c\n2\n\x04\x04\r\x02\x05\x12\x04\x88\x02\x08\x1c\
    \x1a$\x20Altitude\x20of\x20the\x20gateway\x20in\x20meters.\n\n\x0f\n\x05\
    \x04\r\x02\x05\x04\x12\x06\x88\x02\x08\x85\x02\x1d\n\r\n\x05\x04\r\x02\
    \x05\x05\x12\x04\x88\x02\x08\x0e\n\r\n\x05\x04\r\x02\x05\x01\x12\x04\x88\
    \x02\x0f\x17\n\r\n\x05\x04\r\x02\x05\x03\x12\x04\x88\x02\x1a\x1b\n\x0c\n\
    \x02\x04\x0e\x12\x06\x8b\x02\0\x8e\x02\x01\n\x0b\n\x03\x04\x0e\x01\x12\
    \x04\x8b\x02\x08\x1a\n)\n\x04\x04\x0e\x02\0\x12\x04\x8d\x02\x088\x1a\x1b\
    \x20Gateway\x20ID\x20(HEX\x20encoded).\n\n\x0f\n\x05\x04\x0e\x02\0\x04\
    \x12\x06\x8d\x02\x08\x8b\x02\x1c\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\x8d\
    \x02\x08\x0e\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\x8d\x02\x0f\x19\n\r\n\
    \x05\x04\x0e\x02\0\x03\x12\x04\x8d\x02\x1c\x1d\n\r\n\x05\x04\x0e\x02\0\
    \x08\x12\x04\x8d\x02\x1e7\n\r\n\x05\x04\x0e\x02\0\n\x12\x04\x8d\x02+6\n\
    \x0c\n\x02\x04\x0f\x12\x06\x90\x02\0\x9c\x02\x01\n\x0b\n\x03\x04\x0f\x01\
    \x12\x04\x90\x02\x08\x1b\n%\n\x04\x04\x0f\x02\0\x12\x04\x92\x02\x081\x1a\
    \x17\x20Created\x20at\x20timestamp.\n\n\x0f\n\x05\x04\x0f\x02\0\x04\x12\
    \x06\x92\x02\x08\x90\x02\x1d\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x92\x02\
    \x08!\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\x92\x02\",\n\r\n\x05\x04\x0f\
    \x02\0\x03\x12\x04\x92\x02/0\n\x1f\n\x04\x04\x0f\x02\x01\x12\x04\x95\x02\
    \x08\x1d\x1a\x11\x20Frequency\x20(Hz).\n\n\x0f\n\x05\x04\x0f\x02\x01\x04\
    \x12\x06\x95\x02\x08\x92\x021\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\x95\
    \x02\x08\x0e\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\x95\x02\x0f\x18\n\r\n\
    \x05\x04\x0f\x02\x01\x03\x12\x04\x95\x02\x1b\x1c\n\x1a\n\x04\x04\x0f\x02\
    \x02\x12\x04\x98\x02\x08\x16\x1a\x0c\x20Data-rate.\n\n\x0f\n\x05\x04\x0f\
    \x02\x02\x04\x12\x06\x98\x02\x08\x95\x02\x1d\n\r\n\x05\x04\x0f\x02\x02\
    \x05\x12\x04\x98\x02\x08\x0e\n\r\n\x05\x04\x0f\x02\x02\x01\x12\x04\x98\
    \x02\x0f\x11\n\r\n\x05\x04\x0f\x02\x02\x03\x12\x04\x98\x02\x14\x15\n4\n\
    \x04\x04\x0f\x02\x03\x12\x04\x9b\x02\x08;\x1a&\x20Gateways\x20and\x20met\
    a-data\x20of\x20reception.\n\n\r\n\x05\x04\x0f\x02\x03\x04\x12\x04\x9b\
    \x02\x08\x10\n\r\n\x05\x04\x0f\x02\x03\x06\x12\x04\x9b\x02\x11\x17\n\r\n\
    \x05\x04\x0f\x02\x03\x01\x12\x04\x9b\x02\x18\x1f\n\r\n\x05\x04\x0f\x02\
    \x03\x03\x12\x04\x9b\x02\"#\n\r\n\x05\x04\x0f\x02\x03\x08\x12\x04\x9b\
    \x02$:\n\r\n\x05\x04\x0f\x02\x03\n\x12\x04\x9b\x0219\n\x0c\n\x02\x04\x10\
    \x12\x06\x9e\x02\0\xa1\x02\x01\n\x0b\n\x03\x04\x10\x01\x12\x04\x9e\x02\
    \x08%\n)\n\x04\x04\x10\x02\0\x12\x04\xa0\x02\x088\x1a\x1b\x20Gateway\x20\
    ID\x20(HEX\x20encoded).\n\n\x0f\n\x05\x04\x10\x02\0\x04\x12\x06\xa0\x02\
    \x08\x9e\x02'\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\xa0\x02\x08\x0e\n\r\n\
    \x05\x04\x10\x02\0\x01\x12\x04\xa0\x02\x0f\x19\n\r\n\x05\x04\x10\x02\0\
    \x03\x12\x04\xa0\x02\x1c\x1d\n\r\n\x05\x04\x10\x02\0\x08\x12\x04\xa0\x02\
    \x1e7\n\r\n\x05\x04\x10\x02\0\n\x12\x04\xa0\x02+6\n\x0c\n\x02\x04\x11\
    \x12\x06\xa3\x02\0\xab\x02\x01\n\x0b\n\x03\x04\x11\x01\x12\x04\xa3\x02\
    \x08&\n\x0e\n\x04\x04\x11\x08\0\x12\x06\xa4\x02\x04\xaa\x02\x05\n\r\n\
    \x05\x04\x11\x08\0\x01\x12\x04\xa4\x02\n\x0f\n)\n\x04\x04\x11\x02\0\x12\
    \x04\xa6\x02\x08(\x1a\x1b\x20Contains\x20an\x20uplink\x20frame.\n\n\r\n\
    \x05\x04\x11\x02\0\x06\x12\x04\xa6\x02\x08\x16\n\r\n\x05\x04\x11\x02\0\
    \x01\x12\x04\xa6\x02\x17#\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\xa6\x02&'\
    \n*\n\x04\x04\x11\x02\x01\x12\x04\xa9\x02\x08,\x1a\x1c\x20Contains\x20a\
    \x20downlink\x20frame.\n\n\r\n\x05\x04\x11\x02\x01\x06\x12\x04\xa9\x02\
    \x08\x18\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\xa9\x02\x19'\n\r\n\x05\
    \x04\x11\x02\x01\x03\x12\x04\xa9\x02*+b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
