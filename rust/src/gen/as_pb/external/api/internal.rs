// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/internal.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ProfileSettings {
    // message fields
    pub disable_assign_existing_users: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProfileSettings {
    fn default() -> &'a ProfileSettings {
        <ProfileSettings as ::protobuf::Message>::default_instance()
    }
}

impl ProfileSettings {
    pub fn new() -> ProfileSettings {
        ::std::default::Default::default()
    }

    // bool disable_assign_existing_users = 1;


    pub fn get_disable_assign_existing_users(&self) -> bool {
        self.disable_assign_existing_users
    }
    pub fn clear_disable_assign_existing_users(&mut self) {
        self.disable_assign_existing_users = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_assign_existing_users(&mut self, v: bool) {
        self.disable_assign_existing_users = v;
    }
}

impl ::protobuf::Message for ProfileSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_assign_existing_users = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.disable_assign_existing_users != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.disable_assign_existing_users != false {
            os.write_bool(1, self.disable_assign_existing_users)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProfileSettings {
        ProfileSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "disable_assign_existing_users",
                    |m: &ProfileSettings| { &m.disable_assign_existing_users },
                    |m: &mut ProfileSettings| { &mut m.disable_assign_existing_users },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProfileSettings>(
                    "ProfileSettings",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProfileSettings {
        static mut instance: ::protobuf::lazy::Lazy<ProfileSettings> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProfileSettings,
        };
        unsafe {
            instance.get(ProfileSettings::new)
        }
    }
}

impl ::protobuf::Clear for ProfileSettings {
    fn clear(&mut self) {
        self.disable_assign_existing_users = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProfileSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrganizationLink {
    // message fields
    pub organization_id: i64,
    pub organization_name: ::std::string::String,
    pub is_admin: bool,
    pub is_device_admin: bool,
    pub is_gateway_admin: bool,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrganizationLink {
    fn default() -> &'a OrganizationLink {
        <OrganizationLink as ::protobuf::Message>::default_instance()
    }
}

impl OrganizationLink {
    pub fn new() -> OrganizationLink {
        ::std::default::Default::default()
    }

    // int64 organization_id = 1;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // string organization_name = 2;


    pub fn get_organization_name(&self) -> &str {
        &self.organization_name
    }
    pub fn clear_organization_name(&mut self) {
        self.organization_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_organization_name(&mut self, v: ::std::string::String) {
        self.organization_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization_name(&mut self) -> &mut ::std::string::String {
        &mut self.organization_name
    }

    // Take field
    pub fn take_organization_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.organization_name, ::std::string::String::new())
    }

    // bool is_admin = 3;


    pub fn get_is_admin(&self) -> bool {
        self.is_admin
    }
    pub fn clear_is_admin(&mut self) {
        self.is_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_admin(&mut self, v: bool) {
        self.is_admin = v;
    }

    // bool is_device_admin = 6;


    pub fn get_is_device_admin(&self) -> bool {
        self.is_device_admin
    }
    pub fn clear_is_device_admin(&mut self) {
        self.is_device_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_device_admin(&mut self, v: bool) {
        self.is_device_admin = v;
    }

    // bool is_gateway_admin = 7;


    pub fn get_is_gateway_admin(&self) -> bool {
        self.is_gateway_admin
    }
    pub fn clear_is_gateway_admin(&mut self) {
        self.is_gateway_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_gateway_admin(&mut self, v: bool) {
        self.is_gateway_admin = v;
    }

    // .google.protobuf.Timestamp created_at = 4;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 5;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for OrganizationLink {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.organization_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_admin = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_device_admin = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_gateway_admin = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.organization_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.organization_name);
        }
        if self.is_admin != false {
            my_size += 2;
        }
        if self.is_device_admin != false {
            my_size += 2;
        }
        if self.is_gateway_admin != false {
            my_size += 2;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.organization_id != 0 {
            os.write_int64(1, self.organization_id)?;
        }
        if !self.organization_name.is_empty() {
            os.write_string(2, &self.organization_name)?;
        }
        if self.is_admin != false {
            os.write_bool(3, self.is_admin)?;
        }
        if self.is_device_admin != false {
            os.write_bool(6, self.is_device_admin)?;
        }
        if self.is_gateway_admin != false {
            os.write_bool(7, self.is_gateway_admin)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrganizationLink {
        OrganizationLink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &OrganizationLink| { &m.organization_id },
                    |m: &mut OrganizationLink| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "organization_name",
                    |m: &OrganizationLink| { &m.organization_name },
                    |m: &mut OrganizationLink| { &mut m.organization_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_admin",
                    |m: &OrganizationLink| { &m.is_admin },
                    |m: &mut OrganizationLink| { &mut m.is_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_device_admin",
                    |m: &OrganizationLink| { &m.is_device_admin },
                    |m: &mut OrganizationLink| { &mut m.is_device_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_gateway_admin",
                    |m: &OrganizationLink| { &m.is_gateway_admin },
                    |m: &mut OrganizationLink| { &mut m.is_gateway_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &OrganizationLink| { &m.created_at },
                    |m: &mut OrganizationLink| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &OrganizationLink| { &m.updated_at },
                    |m: &mut OrganizationLink| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OrganizationLink>(
                    "OrganizationLink",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OrganizationLink {
        static mut instance: ::protobuf::lazy::Lazy<OrganizationLink> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OrganizationLink,
        };
        unsafe {
            instance.get(OrganizationLink::new)
        }
    }
}

impl ::protobuf::Clear for OrganizationLink {
    fn clear(&mut self) {
        self.organization_id = 0;
        self.organization_name.clear();
        self.is_admin = false;
        self.is_device_admin = false;
        self.is_gateway_admin = false;
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrganizationLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrganizationLink {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginRequest {
    // message fields
    pub username: ::std::string::String,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginRequest {
    fn default() -> &'a LoginRequest {
        <LoginRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoginRequest {
    pub fn new() -> LoginRequest {
        ::std::default::Default::default()
    }

    // string username = 1;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // string password = 2;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LoginRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginRequest {
        LoginRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "username",
                    |m: &LoginRequest| { &m.username },
                    |m: &mut LoginRequest| { &mut m.username },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "password",
                    |m: &LoginRequest| { &m.password },
                    |m: &mut LoginRequest| { &mut m.password },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LoginRequest>(
                    "LoginRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LoginRequest {
        static mut instance: ::protobuf::lazy::Lazy<LoginRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LoginRequest,
        };
        unsafe {
            instance.get(LoginRequest::new)
        }
    }
}

impl ::protobuf::Clear for LoginRequest {
    fn clear(&mut self) {
        self.username.clear();
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoginResponse {
    // message fields
    pub jwt: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoginResponse {
    fn default() -> &'a LoginResponse {
        <LoginResponse as ::protobuf::Message>::default_instance()
    }
}

impl LoginResponse {
    pub fn new() -> LoginResponse {
        ::std::default::Default::default()
    }

    // string jwt = 1;


    pub fn get_jwt(&self) -> &str {
        &self.jwt
    }
    pub fn clear_jwt(&mut self) {
        self.jwt.clear();
    }

    // Param is passed by value, moved
    pub fn set_jwt(&mut self, v: ::std::string::String) {
        self.jwt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_jwt(&mut self) -> &mut ::std::string::String {
        &mut self.jwt
    }

    // Take field
    pub fn take_jwt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.jwt, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LoginResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.jwt)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.jwt.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.jwt);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.jwt.is_empty() {
            os.write_string(1, &self.jwt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoginResponse {
        LoginResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "jwt",
                    |m: &LoginResponse| { &m.jwt },
                    |m: &mut LoginResponse| { &mut m.jwt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LoginResponse>(
                    "LoginResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LoginResponse {
        static mut instance: ::protobuf::lazy::Lazy<LoginResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LoginResponse,
        };
        unsafe {
            instance.get(LoginResponse::new)
        }
    }
}

impl ::protobuf::Clear for LoginResponse {
    fn clear(&mut self) {
        self.jwt.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoginResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProfileResponse {
    // message fields
    pub user: ::protobuf::SingularPtrField<super::user::User>,
    pub organizations: ::protobuf::RepeatedField<OrganizationLink>,
    pub settings: ::protobuf::SingularPtrField<ProfileSettings>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProfileResponse {
    fn default() -> &'a ProfileResponse {
        <ProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl ProfileResponse {
    pub fn new() -> ProfileResponse {
        ::std::default::Default::default()
    }

    // .api.User user = 1;


    pub fn get_user(&self) -> &super::user::User {
        self.user.as_ref().unwrap_or_else(|| super::user::User::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: super::user::User) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut super::user::User {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> super::user::User {
        self.user.take().unwrap_or_else(|| super::user::User::new())
    }

    // repeated .api.OrganizationLink organizations = 3;


    pub fn get_organizations(&self) -> &[OrganizationLink] {
        &self.organizations
    }
    pub fn clear_organizations(&mut self) {
        self.organizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_organizations(&mut self, v: ::protobuf::RepeatedField<OrganizationLink>) {
        self.organizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_organizations(&mut self) -> &mut ::protobuf::RepeatedField<OrganizationLink> {
        &mut self.organizations
    }

    // Take field
    pub fn take_organizations(&mut self) -> ::protobuf::RepeatedField<OrganizationLink> {
        ::std::mem::replace(&mut self.organizations, ::protobuf::RepeatedField::new())
    }

    // .api.ProfileSettings settings = 4;


    pub fn get_settings(&self) -> &ProfileSettings {
        self.settings.as_ref().unwrap_or_else(|| ProfileSettings::default_instance())
    }
    pub fn clear_settings(&mut self) {
        self.settings.clear();
    }

    pub fn has_settings(&self) -> bool {
        self.settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: ProfileSettings) {
        self.settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_settings(&mut self) -> &mut ProfileSettings {
        if self.settings.is_none() {
            self.settings.set_default();
        }
        self.settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_settings(&mut self) -> ProfileSettings {
        self.settings.take().unwrap_or_else(|| ProfileSettings::new())
    }
}

impl ::protobuf::Message for ProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.organizations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.settings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.organizations)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.settings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.organizations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.organizations {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.settings.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProfileResponse {
        ProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::user::User>>(
                    "user",
                    |m: &ProfileResponse| { &m.user },
                    |m: &mut ProfileResponse| { &mut m.user },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrganizationLink>>(
                    "organizations",
                    |m: &ProfileResponse| { &m.organizations },
                    |m: &mut ProfileResponse| { &mut m.organizations },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProfileSettings>>(
                    "settings",
                    |m: &ProfileResponse| { &m.settings },
                    |m: &mut ProfileResponse| { &mut m.settings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProfileResponse>(
                    "ProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<ProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProfileResponse,
        };
        unsafe {
            instance.get(ProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for ProfileResponse {
    fn clear(&mut self) {
        self.user.clear();
        self.organizations.clear();
        self.settings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GlobalSearchRequest {
    // message fields
    pub search: ::std::string::String,
    pub limit: i64,
    pub offset: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GlobalSearchRequest {
    fn default() -> &'a GlobalSearchRequest {
        <GlobalSearchRequest as ::protobuf::Message>::default_instance()
    }
}

impl GlobalSearchRequest {
    pub fn new() -> GlobalSearchRequest {
        ::std::default::Default::default()
    }

    // string search = 1;


    pub fn get_search(&self) -> &str {
        &self.search
    }
    pub fn clear_search(&mut self) {
        self.search.clear();
    }

    // Param is passed by value, moved
    pub fn set_search(&mut self, v: ::std::string::String) {
        self.search = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search(&mut self) -> &mut ::std::string::String {
        &mut self.search
    }

    // Take field
    pub fn take_search(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.search, ::std::string::String::new())
    }

    // int64 limit = 2;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // int64 offset = 3;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }
}

impl ::protobuf::Message for GlobalSearchRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.search)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.search.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.search);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.search.is_empty() {
            os.write_string(1, &self.search)?;
        }
        if self.limit != 0 {
            os.write_int64(2, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int64(3, self.offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GlobalSearchRequest {
        GlobalSearchRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "search",
                    |m: &GlobalSearchRequest| { &m.search },
                    |m: &mut GlobalSearchRequest| { &mut m.search },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &GlobalSearchRequest| { &m.limit },
                    |m: &mut GlobalSearchRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offset",
                    |m: &GlobalSearchRequest| { &m.offset },
                    |m: &mut GlobalSearchRequest| { &mut m.offset },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GlobalSearchRequest>(
                    "GlobalSearchRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GlobalSearchRequest {
        static mut instance: ::protobuf::lazy::Lazy<GlobalSearchRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GlobalSearchRequest,
        };
        unsafe {
            instance.get(GlobalSearchRequest::new)
        }
    }
}

impl ::protobuf::Clear for GlobalSearchRequest {
    fn clear(&mut self) {
        self.search.clear();
        self.limit = 0;
        self.offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GlobalSearchRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GlobalSearchRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GlobalSearchResponse {
    // message fields
    pub result: ::protobuf::RepeatedField<GlobalSearchResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GlobalSearchResponse {
    fn default() -> &'a GlobalSearchResponse {
        <GlobalSearchResponse as ::protobuf::Message>::default_instance()
    }
}

impl GlobalSearchResponse {
    pub fn new() -> GlobalSearchResponse {
        ::std::default::Default::default()
    }

    // repeated .api.GlobalSearchResult result = 1;


    pub fn get_result(&self) -> &[GlobalSearchResult] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<GlobalSearchResult>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<GlobalSearchResult> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<GlobalSearchResult> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GlobalSearchResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.result {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GlobalSearchResponse {
        GlobalSearchResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GlobalSearchResult>>(
                    "result",
                    |m: &GlobalSearchResponse| { &m.result },
                    |m: &mut GlobalSearchResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GlobalSearchResponse>(
                    "GlobalSearchResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GlobalSearchResponse {
        static mut instance: ::protobuf::lazy::Lazy<GlobalSearchResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GlobalSearchResponse,
        };
        unsafe {
            instance.get(GlobalSearchResponse::new)
        }
    }
}

impl ::protobuf::Clear for GlobalSearchResponse {
    fn clear(&mut self) {
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GlobalSearchResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GlobalSearchResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GlobalSearchResult {
    // message fields
    pub kind: ::std::string::String,
    pub score: f32,
    pub organization_id: i64,
    pub organization_name: ::std::string::String,
    pub application_id: i64,
    pub application_name: ::std::string::String,
    pub device_dev_eui: ::std::string::String,
    pub device_name: ::std::string::String,
    pub gateway_mac: ::std::string::String,
    pub gateway_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GlobalSearchResult {
    fn default() -> &'a GlobalSearchResult {
        <GlobalSearchResult as ::protobuf::Message>::default_instance()
    }
}

impl GlobalSearchResult {
    pub fn new() -> GlobalSearchResult {
        ::std::default::Default::default()
    }

    // string kind = 1;


    pub fn get_kind(&self) -> &str {
        &self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kind, ::std::string::String::new())
    }

    // float score = 2;


    pub fn get_score(&self) -> f32 {
        self.score
    }
    pub fn clear_score(&mut self) {
        self.score = 0.;
    }

    // Param is passed by value, moved
    pub fn set_score(&mut self, v: f32) {
        self.score = v;
    }

    // int64 organization_id = 3;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // string organization_name = 4;


    pub fn get_organization_name(&self) -> &str {
        &self.organization_name
    }
    pub fn clear_organization_name(&mut self) {
        self.organization_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_organization_name(&mut self, v: ::std::string::String) {
        self.organization_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization_name(&mut self) -> &mut ::std::string::String {
        &mut self.organization_name
    }

    // Take field
    pub fn take_organization_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.organization_name, ::std::string::String::new())
    }

    // int64 application_id = 5;


    pub fn get_application_id(&self) -> i64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: i64) {
        self.application_id = v;
    }

    // string application_name = 6;


    pub fn get_application_name(&self) -> &str {
        &self.application_name
    }
    pub fn clear_application_name(&mut self) {
        self.application_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_name(&mut self, v: ::std::string::String) {
        self.application_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_name(&mut self) -> &mut ::std::string::String {
        &mut self.application_name
    }

    // Take field
    pub fn take_application_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_name, ::std::string::String::new())
    }

    // string device_dev_eui = 7;


    pub fn get_device_dev_eui(&self) -> &str {
        &self.device_dev_eui
    }
    pub fn clear_device_dev_eui(&mut self) {
        self.device_dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_dev_eui(&mut self, v: ::std::string::String) {
        self.device_dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_dev_eui(&mut self) -> &mut ::std::string::String {
        &mut self.device_dev_eui
    }

    // Take field
    pub fn take_device_dev_eui(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_dev_eui, ::std::string::String::new())
    }

    // string device_name = 8;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        self.device_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_name, ::std::string::String::new())
    }

    // string gateway_mac = 9;


    pub fn get_gateway_mac(&self) -> &str {
        &self.gateway_mac
    }
    pub fn clear_gateway_mac(&mut self) {
        self.gateway_mac.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_mac(&mut self, v: ::std::string::String) {
        self.gateway_mac = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_mac(&mut self) -> &mut ::std::string::String {
        &mut self.gateway_mac
    }

    // Take field
    pub fn take_gateway_mac(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway_mac, ::std::string::String::new())
    }

    // string gateway_name = 10;


    pub fn get_gateway_name(&self) -> &str {
        &self.gateway_name
    }
    pub fn clear_gateway_name(&mut self) {
        self.gateway_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway_name(&mut self, v: ::std::string::String) {
        self.gateway_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_name(&mut self) -> &mut ::std::string::String {
        &mut self.gateway_name
    }

    // Take field
    pub fn take_gateway_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GlobalSearchResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kind)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.score = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.organization_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.application_id = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_dev_eui)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_name)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway_mac)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        }
        if self.score != 0. {
            my_size += 5;
        }
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.organization_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.organization_name);
        }
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.application_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.application_name);
        }
        if !self.device_dev_eui.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.device_dev_eui);
        }
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.device_name);
        }
        if !self.gateway_mac.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.gateway_mac);
        }
        if !self.gateway_name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.gateway_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        }
        if self.score != 0. {
            os.write_float(2, self.score)?;
        }
        if self.organization_id != 0 {
            os.write_int64(3, self.organization_id)?;
        }
        if !self.organization_name.is_empty() {
            os.write_string(4, &self.organization_name)?;
        }
        if self.application_id != 0 {
            os.write_int64(5, self.application_id)?;
        }
        if !self.application_name.is_empty() {
            os.write_string(6, &self.application_name)?;
        }
        if !self.device_dev_eui.is_empty() {
            os.write_string(7, &self.device_dev_eui)?;
        }
        if !self.device_name.is_empty() {
            os.write_string(8, &self.device_name)?;
        }
        if !self.gateway_mac.is_empty() {
            os.write_string(9, &self.gateway_mac)?;
        }
        if !self.gateway_name.is_empty() {
            os.write_string(10, &self.gateway_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GlobalSearchResult {
        GlobalSearchResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "kind",
                    |m: &GlobalSearchResult| { &m.kind },
                    |m: &mut GlobalSearchResult| { &mut m.kind },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "score",
                    |m: &GlobalSearchResult| { &m.score },
                    |m: &mut GlobalSearchResult| { &mut m.score },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &GlobalSearchResult| { &m.organization_id },
                    |m: &mut GlobalSearchResult| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "organization_name",
                    |m: &GlobalSearchResult| { &m.organization_name },
                    |m: &mut GlobalSearchResult| { &mut m.organization_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "application_id",
                    |m: &GlobalSearchResult| { &m.application_id },
                    |m: &mut GlobalSearchResult| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_name",
                    |m: &GlobalSearchResult| { &m.application_name },
                    |m: &mut GlobalSearchResult| { &mut m.application_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_dev_eui",
                    |m: &GlobalSearchResult| { &m.device_dev_eui },
                    |m: &mut GlobalSearchResult| { &mut m.device_dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_name",
                    |m: &GlobalSearchResult| { &m.device_name },
                    |m: &mut GlobalSearchResult| { &mut m.device_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gateway_mac",
                    |m: &GlobalSearchResult| { &m.gateway_mac },
                    |m: &mut GlobalSearchResult| { &mut m.gateway_mac },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gateway_name",
                    |m: &GlobalSearchResult| { &m.gateway_name },
                    |m: &mut GlobalSearchResult| { &mut m.gateway_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GlobalSearchResult>(
                    "GlobalSearchResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GlobalSearchResult {
        static mut instance: ::protobuf::lazy::Lazy<GlobalSearchResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GlobalSearchResult,
        };
        unsafe {
            instance.get(GlobalSearchResult::new)
        }
    }
}

impl ::protobuf::Clear for GlobalSearchResult {
    fn clear(&mut self) {
        self.kind.clear();
        self.score = 0.;
        self.organization_id = 0;
        self.organization_name.clear();
        self.application_id = 0;
        self.application_name.clear();
        self.device_dev_eui.clear();
        self.device_name.clear();
        self.gateway_mac.clear();
        self.gateway_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GlobalSearchResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GlobalSearchResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BrandingResponse {
    // message fields
    pub logo: ::std::string::String,
    pub registration: ::std::string::String,
    pub footer: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BrandingResponse {
    fn default() -> &'a BrandingResponse {
        <BrandingResponse as ::protobuf::Message>::default_instance()
    }
}

impl BrandingResponse {
    pub fn new() -> BrandingResponse {
        ::std::default::Default::default()
    }

    // string logo = 1;


    pub fn get_logo(&self) -> &str {
        &self.logo
    }
    pub fn clear_logo(&mut self) {
        self.logo.clear();
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: ::std::string::String) {
        self.logo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logo(&mut self) -> &mut ::std::string::String {
        &mut self.logo
    }

    // Take field
    pub fn take_logo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.logo, ::std::string::String::new())
    }

    // string registration = 2;


    pub fn get_registration(&self) -> &str {
        &self.registration
    }
    pub fn clear_registration(&mut self) {
        self.registration.clear();
    }

    // Param is passed by value, moved
    pub fn set_registration(&mut self, v: ::std::string::String) {
        self.registration = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_registration(&mut self) -> &mut ::std::string::String {
        &mut self.registration
    }

    // Take field
    pub fn take_registration(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.registration, ::std::string::String::new())
    }

    // string footer = 3;


    pub fn get_footer(&self) -> &str {
        &self.footer
    }
    pub fn clear_footer(&mut self) {
        self.footer.clear();
    }

    // Param is passed by value, moved
    pub fn set_footer(&mut self, v: ::std::string::String) {
        self.footer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_footer(&mut self) -> &mut ::std::string::String {
        &mut self.footer
    }

    // Take field
    pub fn take_footer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.footer, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BrandingResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.logo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.registration)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.footer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.logo.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.logo);
        }
        if !self.registration.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.registration);
        }
        if !self.footer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.footer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.logo.is_empty() {
            os.write_string(1, &self.logo)?;
        }
        if !self.registration.is_empty() {
            os.write_string(2, &self.registration)?;
        }
        if !self.footer.is_empty() {
            os.write_string(3, &self.footer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BrandingResponse {
        BrandingResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "logo",
                    |m: &BrandingResponse| { &m.logo },
                    |m: &mut BrandingResponse| { &mut m.logo },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "registration",
                    |m: &BrandingResponse| { &m.registration },
                    |m: &mut BrandingResponse| { &mut m.registration },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "footer",
                    |m: &BrandingResponse| { &m.footer },
                    |m: &mut BrandingResponse| { &mut m.footer },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BrandingResponse>(
                    "BrandingResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BrandingResponse {
        static mut instance: ::protobuf::lazy::Lazy<BrandingResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BrandingResponse,
        };
        unsafe {
            instance.get(BrandingResponse::new)
        }
    }
}

impl ::protobuf::Clear for BrandingResponse {
    fn clear(&mut self) {
        self.logo.clear();
        self.registration.clear();
        self.footer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BrandingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BrandingResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eas/external/api/internal.proto\x12\x03api\x1a\x1cgoogle/api/annota\
    tions.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobu\
    f/empty.proto\x1a\x1aas/external/api/user.proto\"T\n\x0fProfileSettings\
    \x12A\n\x1ddisable_assign_existing_users\x18\x01\x20\x01(\x08R\x1adisabl\
    eAssignExistingUsers\"\xcb\x02\n\x10OrganizationLink\x12'\n\x0forganizat\
    ion_id\x18\x01\x20\x01(\x03R\x0eorganizationID\x12+\n\x11organization_na\
    me\x18\x02\x20\x01(\tR\x10organizationName\x12\x19\n\x08is_admin\x18\x03\
    \x20\x01(\x08R\x07isAdmin\x12&\n\x0fis_device_admin\x18\x06\x20\x01(\x08\
    R\risDeviceAdmin\x12(\n\x10is_gateway_admin\x18\x07\x20\x01(\x08R\x0eisG\
    atewayAdmin\x129\n\ncreated_at\x18\x04\x20\x01(\x0b2\x1a.google.protobuf\
    .TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x05\x20\x01(\x0b2\x1a.goog\
    le.protobuf.TimestampR\tupdatedAt\"F\n\x0cLoginRequest\x12\x1a\n\x08user\
    name\x18\x01\x20\x01(\tR\x08username\x12\x1a\n\x08password\x18\x02\x20\
    \x01(\tR\x08password\"!\n\rLoginResponse\x12\x10\n\x03jwt\x18\x01\x20\
    \x01(\tR\x03jwt\"\x9f\x01\n\x0fProfileResponse\x12\x1d\n\x04user\x18\x01\
    \x20\x01(\x0b2\t.api.UserR\x04user\x12;\n\rorganizations\x18\x03\x20\x03\
    (\x0b2\x15.api.OrganizationLinkR\rorganizations\x120\n\x08settings\x18\
    \x04\x20\x01(\x0b2\x14.api.ProfileSettingsR\x08settings\"[\n\x13GlobalSe\
    archRequest\x12\x16\n\x06search\x18\x01\x20\x01(\tR\x06search\x12\x14\n\
    \x05limit\x18\x02\x20\x01(\x03R\x05limit\x12\x16\n\x06offset\x18\x03\x20\
    \x01(\x03R\x06offset\"G\n\x14GlobalSearchResponse\x12/\n\x06result\x18\
    \x01\x20\x03(\x0b2\x17.api.GlobalSearchResultR\x06result\"\xf1\x02\n\x12\
    GlobalSearchResult\x12\x12\n\x04kind\x18\x01\x20\x01(\tR\x04kind\x12\x14\
    \n\x05score\x18\x02\x20\x01(\x02R\x05score\x12'\n\x0forganization_id\x18\
    \x03\x20\x01(\x03R\x0eorganizationID\x12+\n\x11organization_name\x18\x04\
    \x20\x01(\tR\x10organizationName\x12%\n\x0eapplication_id\x18\x05\x20\
    \x01(\x03R\rapplicationID\x12)\n\x10application_name\x18\x06\x20\x01(\tR\
    \x0fapplicationName\x12$\n\x0edevice_dev_eui\x18\x07\x20\x01(\tR\x0cdevi\
    ceDevEUI\x12\x1f\n\x0bdevice_name\x18\x08\x20\x01(\tR\ndeviceName\x12\
    \x1f\n\x0bgateway_mac\x18\t\x20\x01(\tR\ngatewayMAC\x12!\n\x0cgateway_na\
    me\x18\n\x20\x01(\tR\x0bgatewayName\"b\n\x10BrandingResponse\x12\x12\n\
    \x04logo\x18\x01\x20\x01(\tR\x04logo\x12\"\n\x0cregistration\x18\x02\x20\
    \x01(\tR\x0cregistration\x12\x16\n\x06footer\x18\x03\x20\x01(\tR\x06foot\
    er2\xf7\x02\n\x0fInternalService\x12N\n\x05Login\x12\x11.api.LoginReques\
    t\x1a\x12.api.LoginResponse\"\x1e\x82\xd3\xe4\x93\x02\x18\"\x13/api/inte\
    rnal/login:\x01*\x12V\n\x07Profile\x12\x16.google.protobuf.Empty\x1a\x14\
    .api.ProfileResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\x12\x15/api/internal/\
    profile\x12Y\n\x08Branding\x12\x16.google.protobuf.Empty\x1a\x15.api.Bra\
    ndingResponse\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/api/internal/brandin\
    g\x12a\n\x0cGlobalSearch\x12\x18.api.GlobalSearchRequest\x1a\x19.api.Glo\
    balSearchResponse\"\x1c\x82\xd3\xe4\x93\x02\x16\x12\x14/api/internal/sea\
    rchB9Z7github.com/brocaar/chirpstack-api/go/v3/as/external/apiJ\xb6\"\n\
    \x07\x12\x05\0\0\x9c\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\
    \x0b\x12\x03\x04\0N\n\t\n\x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\x03\x01\
    \x12\x03\x07\x07(\n\t\n\x02\x03\x02\x12\x03\x08\x07$\n\t\n\x02\x03\x03\
    \x12\x03\t\x07#\nX\n\x02\x06\0\x12\x04\r\0*\x01\x1aL\x20InternalService\
    \x20is\x20the\x20service\x20providing\x20API\x20endpoints\x20for\x20inte\
    rnal\x20usage.\n\n\n\n\x03\x06\0\x01\x12\x03\r\x08\x17\n\x1d\n\x04\x06\0\
    \x02\0\x12\x04\x0f\x08\x14\t\x1a\x0f\x20Log\x20in\x20a\x20user\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x0f\x0c\x11\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x0f\x12\x1e\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0f)6\n\r\n\x05\x06\
    \0\x02\0\x04\x12\x04\x10\x10\x13\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x04\x10\x10\x13\x12\n.\n\x04\x06\0\x02\x01\x12\x04\x17\x08\
    \x1b\t\x1a\x20\x20Get\x20the\x20current\x20user's\x20profile\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x17\x0c\x13\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x17\x14)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x174C\n\r\n\x05\
    \x06\0\x02\x01\x04\x12\x04\x18\x10\x1a\x12\n\x11\n\t\x06\0\x02\x01\x04\
    \xb0\xca\xbc\"\x12\x04\x18\x10\x1a\x12\n+\n\x04\x06\0\x02\x02\x12\x04\
    \x1e\x08\"\t\x1a\x1d\x20Get\x20the\x20branding\x20for\x20the\x20UI\n\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1e\x0c\x14\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\x1e\x15*\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1e5E\n\
    \r\n\x05\x06\0\x02\x02\x04\x12\x04\x1f\x10!\x12\n\x11\n\t\x06\0\x02\x02\
    \x04\xb0\xca\xbc\"\x12\x04\x1f\x10!\x12\n(\n\x04\x06\0\x02\x03\x12\x04%\
    \x08)\t\x1a\x1a\x20Perform\x20a\x20global\x20search.\n\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x03%\x0c\x18\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03%\x19\
    ,\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03%7K\n\r\n\x05\x06\0\x02\x03\x04\
    \x12\x04&\x10(\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04&\
    \x10(\x12\n\n\n\x02\x04\0\x12\x04,\00\x01\n\n\n\x03\x04\0\x01\x12\x03,\
    \x08\x17\n\x93\x01\n\x04\x04\0\x02\0\x12\x03/\x08/\x1a\x85\x01\x20Existi\
    ng\x20users\x20in\x20the\x20system\x20can\x20not\x20be\x20assigned\x20to\
    \x20organizations\x20and\n\x20application\x20and\x20can\x20not\x20be\x20\
    listed\x20by\x20non\x20global\x20admin\x20users.\n\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04/\x08,\x19\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03/\x08\x0c\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03/\r*\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03/-.\nE\n\x02\x04\x01\x12\x043\0J\x01\x1a9\x20Defines\x20an\x20organi\
    zation\x20to\x20which\x20an\x20user\x20is\x20associated.\n\n\n\n\x03\x04\
    \x01\x01\x12\x033\x08\x18\n\x1f\n\x04\x04\x01\x02\0\x12\x035\x04=\x1a\
    \x12\x20Organization\x20ID.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x045\x043\
    \x1a\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x035\x04\t\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x035\n\x19\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x035\x1c\x1d\
    \n\x0c\n\x05\x04\x01\x02\0\x08\x12\x035\x1e<\n\x0c\n\x05\x04\x01\x02\0\n\
    \x12\x035+;\n!\n\x04\x04\x01\x02\x01\x12\x038\x04!\x1a\x14\x20Organizati\
    on\x20name.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x048\x045=\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x038\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x038\x0b\x1c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x038\x1f\x20\n\x8f\x01\
    \n\x04\x04\x01\x02\x02\x12\x03<\x04\x16\x1a\x81\x01\x20User\x20is\x20adm\
    in\x20within\x20the\x20context\x20of\x20this\x20organization.\n\x20There\
    \x20is\x20no\x20need\x20to\x20set\x20the\x20is_device_admin\x20and\x20is\
    _gateway_admin\x20flags.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04<\x048!\
    \n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03<\x04\x08\n\x0c\n\x05\x04\x01\
    \x02\x02\x01\x12\x03<\t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03<\x14\
    \x15\n{\n\x04\x04\x01\x02\x03\x12\x03@\x04\x1d\x1an\x20User\x20is\x20abl\
    e\x20to\x20modify\x20device\x20related\x20resources\x20(applications,\n\
    \x20device-profiles,\x20devices,\x20multicast-groups).\n\n\r\n\x05\x04\
    \x01\x02\x03\x04\x12\x04@\x04<\x16\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\
    \x03@\x04\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03@\t\x18\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03@\x1b\x1c\n/\n\x04\x04\x01\x02\x04\x12\x03C\
    \x04\x1e\x1a\"\x20User\x20is\x20able\x20to\x20modify\x20gateways.\n\n\r\
    \n\x05\x04\x01\x02\x04\x04\x12\x04C\x04@\x1d\n\x0c\n\x05\x04\x01\x02\x04\
    \x05\x12\x03C\x04\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03C\t\x19\n\
    \x0c\n\x05\x04\x01\x02\x04\x03\x12\x03C\x1c\x1d\n$\n\x04\x04\x01\x02\x05\
    \x12\x03F\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\r\n\x05\x04\
    \x01\x02\x05\x04\x12\x04F\x04C\x1e\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\
    \x03F\x04\x1d\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03F\x1e(\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03F+,\n%\n\x04\x04\x01\x02\x06\x12\x03I\x081\
    \x1a\x18\x20Last\x20update\x20timestamp.\n\n\r\n\x05\x04\x01\x02\x06\x04\
    \x12\x04I\x08F-\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x03I\x08!\n\x0c\n\
    \x05\x04\x01\x02\x06\x01\x12\x03I\",\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\
    \x03I/0\n\n\n\x02\x04\x02\x12\x04L\0R\x01\n\n\n\x03\x04\x02\x01\x12\x03L\
    \x08\x14\n$\n\x04\x04\x02\x02\0\x12\x03N\x08\x1c\x1a\x17\x20Username\x20\
    of\x20the\x20user.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04N\x08L\x16\n\x0c\
    \n\x05\x04\x02\x02\0\x05\x12\x03N\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03N\x0f\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03N\x1a\x1b\n$\n\
    \x04\x04\x02\x02\x01\x12\x03Q\x08\x1c\x1a\x17\x20Password\x20of\x20the\
    \x20user.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04Q\x08N\x1c\n\x0c\n\x05\
    \x04\x02\x02\x01\x05\x12\x03Q\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\
    \x12\x03Q\x0f\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03Q\x1a\x1b\n\n\n\
    \x02\x04\x03\x12\x04T\0W\x01\n\n\n\x03\x04\x03\x01\x12\x03T\x08\x15\nY\n\
    \x04\x04\x03\x02\0\x12\x03V\x08\x17\x1aL\x20The\x20JWT\x20tag\x20to\x20b\
    e\x20used\x20to\x20access\x20chirpstack-application-server\x20interfaces\
    .\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04V\x08T\x17\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03V\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03V\x0f\
    \x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03V\x15\x16\n\n\n\x02\x04\x04\
    \x12\x04Y\0b\x01\n\n\n\x03\x04\x04\x01\x12\x03Y\x08\x17\n\x1b\n\x04\x04\
    \x04\x02\0\x12\x03[\x04\x12\x1a\x0e\x20User\x20object.\n\n\r\n\x05\x04\
    \x04\x02\0\x04\x12\x04[\x04Y\x19\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03[\
    \x04\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03[\t\r\n\x0c\n\x05\x04\x04\
    \x02\0\x03\x12\x03[\x10\x11\n=\n\x04\x04\x04\x02\x01\x12\x03^\x040\x1a0\
    \x20Organizations\x20to\x20which\x20the\x20user\x20is\x20associated.\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x04\x12\x03^\x04\x0c\n\x0c\n\x05\x04\x04\x02\
    \x01\x06\x12\x03^\r\x1d\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03^\x1e+\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03^./\n\x20\n\x04\x04\x04\x02\x02\
    \x12\x03a\x08%\x1a\x13\x20Profile\x20settings.\n\n\r\n\x05\x04\x04\x02\
    \x02\x04\x12\x04a\x08^0\n\x0c\n\x05\x04\x04\x02\x02\x06\x12\x03a\x08\x17\
    \n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03a\x18\x20\n\x0c\n\x05\x04\x04\
    \x02\x02\x03\x12\x03a#$\n\n\n\x02\x04\x05\x12\x04d\0m\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03d\x08\x1b\n\x1c\n\x04\x04\x05\x02\0\x12\x03f\x08\x1a\x1a\
    \x0f\x20Search\x20query.\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04f\x08d\x1d\
    \n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03f\x08\x0e\n\x0c\n\x05\x04\x05\x02\
    \0\x01\x12\x03f\x0f\x15\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03f\x18\x19\n\
    /\n\x04\x04\x05\x02\x01\x12\x03i\x08\x18\x1a\"\x20Max\x20number\x20of\
    \x20results\x20to\x20return.\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04i\
    \x08f\x1a\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03i\x08\r\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03i\x0e\x13\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03i\x16\x17\n@\n\x04\x04\x05\x02\x02\x12\x03l\x08\x19\x1a3\x20Offset\
    \x20offset\x20of\x20the\x20result-set\x20(for\x20pagination).\n\n\r\n\
    \x05\x04\x05\x02\x02\x04\x12\x04l\x08i\x18\n\x0c\n\x05\x04\x05\x02\x02\
    \x05\x12\x03l\x08\r\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03l\x0e\x14\n\
    \x0c\n\x05\x04\x05\x02\x02\x03\x12\x03l\x17\x18\n\n\n\x02\x04\x06\x12\
    \x04o\0q\x01\n\n\n\x03\x04\x06\x01\x12\x03o\x08\x1c\n\x0b\n\x04\x04\x06\
    \x02\0\x12\x03p\x08/\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03p\x08\x10\n\
    \x0c\n\x05\x04\x06\x02\0\x06\x12\x03p\x11#\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x03p$*\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03p-.\n\x0b\n\x02\x04\x07\
    \x12\x05s\0\x91\x01\x01\n\n\n\x03\x04\x07\x01\x12\x03s\x08\x1a\n\x1b\n\
    \x04\x04\x07\x02\0\x12\x03u\x08\x18\x1a\x0e\x20Record\x20kind.\n\n\r\n\
    \x05\x04\x07\x02\0\x04\x12\x04u\x08s\x1c\n\x0c\n\x05\x04\x07\x02\0\x05\
    \x12\x03u\x08\x0e\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03u\x0f\x13\n\x0c\n\
    \x05\x04\x07\x02\0\x03\x12\x03u\x16\x17\n\x1c\n\x04\x04\x07\x02\x01\x12\
    \x03x\x08\x18\x1a\x0f\x20Search\x20score.\n\n\r\n\x05\x04\x07\x02\x01\
    \x04\x12\x04x\x08u\x18\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03x\x08\r\n\
    \x0c\n\x05\x04\x07\x02\x01\x01\x12\x03x\x0e\x13\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03x\x16\x17\n\x1f\n\x04\x04\x07\x02\x02\x12\x03{\x08A\x1a\
    \x12\x20Organization\x20id.\n\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04{\x08\
    x\x18\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03{\x08\r\n\x0c\n\x05\x04\x07\
    \x02\x02\x01\x12\x03{\x0e\x1d\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03{\
    \x20!\n\x0c\n\x05\x04\x07\x02\x02\x08\x12\x03{\"@\n\x0c\n\x05\x04\x07\
    \x02\x02\n\x12\x03{/?\n!\n\x04\x04\x07\x02\x03\x12\x03~\x08%\x1a\x14\x20\
    Organization\x20name.\n\n\r\n\x05\x04\x07\x02\x03\x04\x12\x04~\x08{A\n\
    \x0c\n\x05\x04\x07\x02\x03\x05\x12\x03~\x08\x0e\n\x0c\n\x05\x04\x07\x02\
    \x03\x01\x12\x03~\x0f\x20\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\x03~#$\n\
    \x1f\n\x04\x04\x07\x02\x04\x12\x04\x81\x01\x08?\x1a\x11\x20Application\
    \x20id.\n\n\x0e\n\x05\x04\x07\x02\x04\x04\x12\x05\x81\x01\x08~%\n\r\n\
    \x05\x04\x07\x02\x04\x05\x12\x04\x81\x01\x08\r\n\r\n\x05\x04\x07\x02\x04\
    \x01\x12\x04\x81\x01\x0e\x1c\n\r\n\x05\x04\x07\x02\x04\x03\x12\x04\x81\
    \x01\x1f\x20\n\r\n\x05\x04\x07\x02\x04\x08\x12\x04\x81\x01!>\n\r\n\x05\
    \x04\x07\x02\x04\n\x12\x04\x81\x01.=\n!\n\x04\x04\x07\x02\x05\x12\x04\
    \x84\x01\x08$\x1a\x13\x20Application\x20name.\n\n\x0f\n\x05\x04\x07\x02\
    \x05\x04\x12\x06\x84\x01\x08\x81\x01?\n\r\n\x05\x04\x07\x02\x05\x05\x12\
    \x04\x84\x01\x08\x0e\n\r\n\x05\x04\x07\x02\x05\x01\x12\x04\x84\x01\x0f\
    \x1f\n\r\n\x05\x04\x07\x02\x05\x03\x12\x04\x84\x01\"#\n,\n\x04\x04\x07\
    \x02\x06\x12\x04\x87\x01\x08?\x1a\x1e\x20Device\x20DevEUI\x20(hex\x20enc\
    oded).\n\n\x0f\n\x05\x04\x07\x02\x06\x04\x12\x06\x87\x01\x08\x84\x01$\n\
    \r\n\x05\x04\x07\x02\x06\x05\x12\x04\x87\x01\x08\x0e\n\r\n\x05\x04\x07\
    \x02\x06\x01\x12\x04\x87\x01\x0f\x1d\n\r\n\x05\x04\x07\x02\x06\x03\x12\
    \x04\x87\x01\x20!\n\r\n\x05\x04\x07\x02\x06\x08\x12\x04\x87\x01\">\n\r\n\
    \x05\x04\x07\x02\x06\n\x12\x04\x87\x01/=\n\x1c\n\x04\x04\x07\x02\x07\x12\
    \x04\x8a\x01\x08\x1f\x1a\x0e\x20Device\x20name.\n\n\x0f\n\x05\x04\x07\
    \x02\x07\x04\x12\x06\x8a\x01\x08\x87\x01?\n\r\n\x05\x04\x07\x02\x07\x05\
    \x12\x04\x8a\x01\x08\x0e\n\r\n\x05\x04\x07\x02\x07\x01\x12\x04\x8a\x01\
    \x0f\x1a\n\r\n\x05\x04\x07\x02\x07\x03\x12\x04\x8a\x01\x1d\x1e\n*\n\x04\
    \x04\x07\x02\x08\x12\x04\x8d\x01\x08:\x1a\x1c\x20Gateway\x20MAC\x20(hex\
    \x20encoded).\n\n\x0f\n\x05\x04\x07\x02\x08\x04\x12\x06\x8d\x01\x08\x8a\
    \x01\x1f\n\r\n\x05\x04\x07\x02\x08\x05\x12\x04\x8d\x01\x08\x0e\n\r\n\x05\
    \x04\x07\x02\x08\x01\x12\x04\x8d\x01\x0f\x1a\n\r\n\x05\x04\x07\x02\x08\
    \x03\x12\x04\x8d\x01\x1d\x1e\n\r\n\x05\x04\x07\x02\x08\x08\x12\x04\x8d\
    \x01\x1f9\n\r\n\x05\x04\x07\x02\x08\n\x12\x04\x8d\x01,8\n\x1d\n\x04\x04\
    \x07\x02\t\x12\x04\x90\x01\x08!\x1a\x0f\x20Gateway\x20name.\n\n\x0f\n\
    \x05\x04\x07\x02\t\x04\x12\x06\x90\x01\x08\x8d\x01:\n\r\n\x05\x04\x07\
    \x02\t\x05\x12\x04\x90\x01\x08\x0e\n\r\n\x05\x04\x07\x02\t\x01\x12\x04\
    \x90\x01\x0f\x1b\n\r\n\x05\x04\x07\x02\t\x03\x12\x04\x90\x01\x1e\x20\n\
    \x0c\n\x02\x04\x08\x12\x06\x93\x01\0\x9c\x01\x01\n\x0b\n\x03\x04\x08\x01\
    \x12\x04\x93\x01\x08\x18\n\x1a\n\x04\x04\x08\x02\0\x12\x04\x95\x01\x04\
    \x14\x1a\x0c\x20Logo\x20html.\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\
    \x95\x01\x04\x93\x01\x1a\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x95\x01\x04\
    \n\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\x95\x01\x0b\x0f\n\r\n\x05\x04\x08\
    \x02\0\x03\x12\x04\x95\x01\x12\x13\n\"\n\x04\x04\x08\x02\x01\x12\x04\x98\
    \x01\x04\x1c\x1a\x14\x20Registration\x20html.\n\n\x0f\n\x05\x04\x08\x02\
    \x01\x04\x12\x06\x98\x01\x04\x95\x01\x14\n\r\n\x05\x04\x08\x02\x01\x05\
    \x12\x04\x98\x01\x04\n\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\x98\x01\x0b\
    \x17\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\x98\x01\x1a\x1b\n\x1c\n\x04\
    \x04\x08\x02\x02\x12\x04\x9b\x01\x08\x1a\x1a\x0e\x20Footer\x20html.\n\n\
    \x0f\n\x05\x04\x08\x02\x02\x04\x12\x06\x9b\x01\x08\x98\x01\x1c\n\r\n\x05\
    \x04\x08\x02\x02\x05\x12\x04\x9b\x01\x08\x0e\n\r\n\x05\x04\x08\x02\x02\
    \x01\x12\x04\x9b\x01\x0f\x15\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\x9b\
    \x01\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
