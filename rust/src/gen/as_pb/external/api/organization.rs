// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/organization.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Organization {
    // message fields
    pub id: i64,
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub can_have_gateways: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Organization {
    fn default() -> &'a Organization {
        <Organization as ::protobuf::Message>::default_instance()
    }
}

impl Organization {
    pub fn new() -> Organization {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 3;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // bool can_have_gateways = 4;


    pub fn get_can_have_gateways(&self) -> bool {
        self.can_have_gateways
    }
    pub fn clear_can_have_gateways(&mut self) {
        self.can_have_gateways = false;
    }

    // Param is passed by value, moved
    pub fn set_can_have_gateways(&mut self, v: bool) {
        self.can_have_gateways = v;
    }
}

impl ::protobuf::Message for Organization {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.can_have_gateways = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        if self.can_have_gateways != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        if self.can_have_gateways != false {
            os.write_bool(4, self.can_have_gateways)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Organization {
        Organization::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &Organization| { &m.id },
                    |m: &mut Organization| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Organization| { &m.name },
                    |m: &mut Organization| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "display_name",
                    |m: &Organization| { &m.display_name },
                    |m: &mut Organization| { &mut m.display_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "can_have_gateways",
                    |m: &Organization| { &m.can_have_gateways },
                    |m: &mut Organization| { &mut m.can_have_gateways },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Organization>(
                    "Organization",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Organization {
        static mut instance: ::protobuf::lazy::Lazy<Organization> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Organization,
        };
        unsafe {
            instance.get(Organization::new)
        }
    }
}

impl ::protobuf::Clear for Organization {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.display_name.clear();
        self.can_have_gateways = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Organization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Organization {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrganizationListItem {
    // message fields
    pub id: i64,
    pub name: ::std::string::String,
    pub display_name: ::std::string::String,
    pub can_have_gateways: bool,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrganizationListItem {
    fn default() -> &'a OrganizationListItem {
        <OrganizationListItem as ::protobuf::Message>::default_instance()
    }
}

impl OrganizationListItem {
    pub fn new() -> OrganizationListItem {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string display_name = 3;


    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    // bool can_have_gateways = 4;


    pub fn get_can_have_gateways(&self) -> bool {
        self.can_have_gateways
    }
    pub fn clear_can_have_gateways(&mut self) {
        self.can_have_gateways = false;
    }

    // Param is passed by value, moved
    pub fn set_can_have_gateways(&mut self, v: bool) {
        self.can_have_gateways = v;
    }

    // .google.protobuf.Timestamp created_at = 5;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 6;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for OrganizationListItem {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.can_have_gateways = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.display_name);
        }
        if self.can_have_gateways != false {
            my_size += 2;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(3, &self.display_name)?;
        }
        if self.can_have_gateways != false {
            os.write_bool(4, self.can_have_gateways)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrganizationListItem {
        OrganizationListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &OrganizationListItem| { &m.id },
                    |m: &mut OrganizationListItem| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &OrganizationListItem| { &m.name },
                    |m: &mut OrganizationListItem| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "display_name",
                    |m: &OrganizationListItem| { &m.display_name },
                    |m: &mut OrganizationListItem| { &mut m.display_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "can_have_gateways",
                    |m: &OrganizationListItem| { &m.can_have_gateways },
                    |m: &mut OrganizationListItem| { &mut m.can_have_gateways },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &OrganizationListItem| { &m.created_at },
                    |m: &mut OrganizationListItem| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &OrganizationListItem| { &m.updated_at },
                    |m: &mut OrganizationListItem| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OrganizationListItem>(
                    "OrganizationListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OrganizationListItem {
        static mut instance: ::protobuf::lazy::Lazy<OrganizationListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OrganizationListItem,
        };
        unsafe {
            instance.get(OrganizationListItem::new)
        }
    }
}

impl ::protobuf::Clear for OrganizationListItem {
    fn clear(&mut self) {
        self.id = 0;
        self.name.clear();
        self.display_name.clear();
        self.can_have_gateways = false;
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrganizationListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrganizationListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOrganizationRequest {
    // message fields
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOrganizationRequest {
    fn default() -> &'a GetOrganizationRequest {
        <GetOrganizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetOrganizationRequest {
    pub fn new() -> GetOrganizationRequest {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for GetOrganizationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOrganizationRequest {
        GetOrganizationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &GetOrganizationRequest| { &m.id },
                    |m: &mut GetOrganizationRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetOrganizationRequest>(
                    "GetOrganizationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOrganizationRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetOrganizationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOrganizationRequest,
        };
        unsafe {
            instance.get(GetOrganizationRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetOrganizationRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOrganizationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOrganizationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOrganizationResponse {
    // message fields
    pub organization: ::protobuf::SingularPtrField<Organization>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOrganizationResponse {
    fn default() -> &'a GetOrganizationResponse {
        <GetOrganizationResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetOrganizationResponse {
    pub fn new() -> GetOrganizationResponse {
        ::std::default::Default::default()
    }

    // .api.Organization organization = 1;


    pub fn get_organization(&self) -> &Organization {
        self.organization.as_ref().unwrap_or_else(|| Organization::default_instance())
    }
    pub fn clear_organization(&mut self) {
        self.organization.clear();
    }

    pub fn has_organization(&self) -> bool {
        self.organization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_organization(&mut self, v: Organization) {
        self.organization = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization(&mut self) -> &mut Organization {
        if self.organization.is_none() {
            self.organization.set_default();
        }
        self.organization.as_mut().unwrap()
    }

    // Take field
    pub fn take_organization(&mut self) -> Organization {
        self.organization.take().unwrap_or_else(|| Organization::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetOrganizationResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.organization {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.organization)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.organization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.organization.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOrganizationResponse {
        GetOrganizationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Organization>>(
                    "organization",
                    |m: &GetOrganizationResponse| { &m.organization },
                    |m: &mut GetOrganizationResponse| { &mut m.organization },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetOrganizationResponse| { &m.created_at },
                    |m: &mut GetOrganizationResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetOrganizationResponse| { &m.updated_at },
                    |m: &mut GetOrganizationResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetOrganizationResponse>(
                    "GetOrganizationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOrganizationResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetOrganizationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOrganizationResponse,
        };
        unsafe {
            instance.get(GetOrganizationResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetOrganizationResponse {
    fn clear(&mut self) {
        self.organization.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOrganizationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOrganizationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateOrganizationRequest {
    // message fields
    pub organization: ::protobuf::SingularPtrField<Organization>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateOrganizationRequest {
    fn default() -> &'a CreateOrganizationRequest {
        <CreateOrganizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateOrganizationRequest {
    pub fn new() -> CreateOrganizationRequest {
        ::std::default::Default::default()
    }

    // .api.Organization organization = 1;


    pub fn get_organization(&self) -> &Organization {
        self.organization.as_ref().unwrap_or_else(|| Organization::default_instance())
    }
    pub fn clear_organization(&mut self) {
        self.organization.clear();
    }

    pub fn has_organization(&self) -> bool {
        self.organization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_organization(&mut self, v: Organization) {
        self.organization = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization(&mut self) -> &mut Organization {
        if self.organization.is_none() {
            self.organization.set_default();
        }
        self.organization.as_mut().unwrap()
    }

    // Take field
    pub fn take_organization(&mut self) -> Organization {
        self.organization.take().unwrap_or_else(|| Organization::new())
    }
}

impl ::protobuf::Message for CreateOrganizationRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.organization {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.organization)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.organization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.organization.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateOrganizationRequest {
        CreateOrganizationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Organization>>(
                    "organization",
                    |m: &CreateOrganizationRequest| { &m.organization },
                    |m: &mut CreateOrganizationRequest| { &mut m.organization },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateOrganizationRequest>(
                    "CreateOrganizationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateOrganizationRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateOrganizationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateOrganizationRequest,
        };
        unsafe {
            instance.get(CreateOrganizationRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateOrganizationRequest {
    fn clear(&mut self) {
        self.organization.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateOrganizationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateOrganizationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateOrganizationResponse {
    // message fields
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateOrganizationResponse {
    fn default() -> &'a CreateOrganizationResponse {
        <CreateOrganizationResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateOrganizationResponse {
    pub fn new() -> CreateOrganizationResponse {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for CreateOrganizationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateOrganizationResponse {
        CreateOrganizationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &CreateOrganizationResponse| { &m.id },
                    |m: &mut CreateOrganizationResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateOrganizationResponse>(
                    "CreateOrganizationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateOrganizationResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateOrganizationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateOrganizationResponse,
        };
        unsafe {
            instance.get(CreateOrganizationResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateOrganizationResponse {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateOrganizationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateOrganizationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateOrganizationRequest {
    // message fields
    pub organization: ::protobuf::SingularPtrField<Organization>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateOrganizationRequest {
    fn default() -> &'a UpdateOrganizationRequest {
        <UpdateOrganizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateOrganizationRequest {
    pub fn new() -> UpdateOrganizationRequest {
        ::std::default::Default::default()
    }

    // .api.Organization organization = 1;


    pub fn get_organization(&self) -> &Organization {
        self.organization.as_ref().unwrap_or_else(|| Organization::default_instance())
    }
    pub fn clear_organization(&mut self) {
        self.organization.clear();
    }

    pub fn has_organization(&self) -> bool {
        self.organization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_organization(&mut self, v: Organization) {
        self.organization = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization(&mut self) -> &mut Organization {
        if self.organization.is_none() {
            self.organization.set_default();
        }
        self.organization.as_mut().unwrap()
    }

    // Take field
    pub fn take_organization(&mut self) -> Organization {
        self.organization.take().unwrap_or_else(|| Organization::new())
    }
}

impl ::protobuf::Message for UpdateOrganizationRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.organization {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.organization)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.organization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.organization.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateOrganizationRequest {
        UpdateOrganizationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Organization>>(
                    "organization",
                    |m: &UpdateOrganizationRequest| { &m.organization },
                    |m: &mut UpdateOrganizationRequest| { &mut m.organization },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateOrganizationRequest>(
                    "UpdateOrganizationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateOrganizationRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateOrganizationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateOrganizationRequest,
        };
        unsafe {
            instance.get(UpdateOrganizationRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateOrganizationRequest {
    fn clear(&mut self) {
        self.organization.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateOrganizationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateOrganizationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteOrganizationRequest {
    // message fields
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteOrganizationRequest {
    fn default() -> &'a DeleteOrganizationRequest {
        <DeleteOrganizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteOrganizationRequest {
    pub fn new() -> DeleteOrganizationRequest {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for DeleteOrganizationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteOrganizationRequest {
        DeleteOrganizationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &DeleteOrganizationRequest| { &m.id },
                    |m: &mut DeleteOrganizationRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteOrganizationRequest>(
                    "DeleteOrganizationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteOrganizationRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteOrganizationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteOrganizationRequest,
        };
        unsafe {
            instance.get(DeleteOrganizationRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteOrganizationRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteOrganizationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteOrganizationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOrganizationRequest {
    // message fields
    pub limit: i64,
    pub offset: i64,
    pub search: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOrganizationRequest {
    fn default() -> &'a ListOrganizationRequest {
        <ListOrganizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListOrganizationRequest {
    pub fn new() -> ListOrganizationRequest {
        ::std::default::Default::default()
    }

    // int64 limit = 1;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // int64 offset = 2;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // string search = 3;


    pub fn get_search(&self) -> &str {
        &self.search
    }
    pub fn clear_search(&mut self) {
        self.search.clear();
    }

    // Param is passed by value, moved
    pub fn set_search(&mut self, v: ::std::string::String) {
        self.search = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search(&mut self) -> &mut ::std::string::String {
        &mut self.search
    }

    // Take field
    pub fn take_search(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.search, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListOrganizationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.search)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.search.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.search);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit != 0 {
            os.write_int64(1, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int64(2, self.offset)?;
        }
        if !self.search.is_empty() {
            os.write_string(3, &self.search)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOrganizationRequest {
        ListOrganizationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &ListOrganizationRequest| { &m.limit },
                    |m: &mut ListOrganizationRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offset",
                    |m: &ListOrganizationRequest| { &m.offset },
                    |m: &mut ListOrganizationRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "search",
                    |m: &ListOrganizationRequest| { &m.search },
                    |m: &mut ListOrganizationRequest| { &mut m.search },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListOrganizationRequest>(
                    "ListOrganizationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListOrganizationRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListOrganizationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListOrganizationRequest,
        };
        unsafe {
            instance.get(ListOrganizationRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListOrganizationRequest {
    fn clear(&mut self) {
        self.limit = 0;
        self.offset = 0;
        self.search.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOrganizationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOrganizationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOrganizationResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<OrganizationListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOrganizationResponse {
    fn default() -> &'a ListOrganizationResponse {
        <ListOrganizationResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListOrganizationResponse {
    pub fn new() -> ListOrganizationResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.OrganizationListItem result = 2;


    pub fn get_result(&self) -> &[OrganizationListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<OrganizationListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<OrganizationListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<OrganizationListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListOrganizationResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOrganizationResponse {
        ListOrganizationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListOrganizationResponse| { &m.total_count },
                    |m: &mut ListOrganizationResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrganizationListItem>>(
                    "result",
                    |m: &ListOrganizationResponse| { &m.result },
                    |m: &mut ListOrganizationResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListOrganizationResponse>(
                    "ListOrganizationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListOrganizationResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListOrganizationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListOrganizationResponse,
        };
        unsafe {
            instance.get(ListOrganizationResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListOrganizationResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOrganizationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOrganizationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrganizationUser {
    // message fields
    pub organization_id: i64,
    pub user_id: i64,
    pub is_admin: bool,
    pub is_device_admin: bool,
    pub is_gateway_admin: bool,
    pub username: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrganizationUser {
    fn default() -> &'a OrganizationUser {
        <OrganizationUser as ::protobuf::Message>::default_instance()
    }
}

impl OrganizationUser {
    pub fn new() -> OrganizationUser {
        ::std::default::Default::default()
    }

    // int64 organization_id = 1;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int64 user_id = 2;


    pub fn get_user_id(&self) -> i64 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: i64) {
        self.user_id = v;
    }

    // bool is_admin = 3;


    pub fn get_is_admin(&self) -> bool {
        self.is_admin
    }
    pub fn clear_is_admin(&mut self) {
        self.is_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_admin(&mut self, v: bool) {
        self.is_admin = v;
    }

    // bool is_device_admin = 5;


    pub fn get_is_device_admin(&self) -> bool {
        self.is_device_admin
    }
    pub fn clear_is_device_admin(&mut self) {
        self.is_device_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_device_admin(&mut self, v: bool) {
        self.is_device_admin = v;
    }

    // bool is_gateway_admin = 6;


    pub fn get_is_gateway_admin(&self) -> bool {
        self.is_gateway_admin
    }
    pub fn clear_is_gateway_admin(&mut self) {
        self.is_gateway_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_gateway_admin(&mut self, v: bool) {
        self.is_gateway_admin = v;
    }

    // string username = 4;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OrganizationUser {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.user_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_admin = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_device_admin = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_gateway_admin = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_admin != false {
            my_size += 2;
        }
        if self.is_device_admin != false {
            my_size += 2;
        }
        if self.is_gateway_admin != false {
            my_size += 2;
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.username);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.organization_id != 0 {
            os.write_int64(1, self.organization_id)?;
        }
        if self.user_id != 0 {
            os.write_int64(2, self.user_id)?;
        }
        if self.is_admin != false {
            os.write_bool(3, self.is_admin)?;
        }
        if self.is_device_admin != false {
            os.write_bool(5, self.is_device_admin)?;
        }
        if self.is_gateway_admin != false {
            os.write_bool(6, self.is_gateway_admin)?;
        }
        if !self.username.is_empty() {
            os.write_string(4, &self.username)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrganizationUser {
        OrganizationUser::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &OrganizationUser| { &m.organization_id },
                    |m: &mut OrganizationUser| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &OrganizationUser| { &m.user_id },
                    |m: &mut OrganizationUser| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_admin",
                    |m: &OrganizationUser| { &m.is_admin },
                    |m: &mut OrganizationUser| { &mut m.is_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_device_admin",
                    |m: &OrganizationUser| { &m.is_device_admin },
                    |m: &mut OrganizationUser| { &mut m.is_device_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_gateway_admin",
                    |m: &OrganizationUser| { &m.is_gateway_admin },
                    |m: &mut OrganizationUser| { &mut m.is_gateway_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "username",
                    |m: &OrganizationUser| { &m.username },
                    |m: &mut OrganizationUser| { &mut m.username },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OrganizationUser>(
                    "OrganizationUser",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OrganizationUser {
        static mut instance: ::protobuf::lazy::Lazy<OrganizationUser> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OrganizationUser,
        };
        unsafe {
            instance.get(OrganizationUser::new)
        }
    }
}

impl ::protobuf::Clear for OrganizationUser {
    fn clear(&mut self) {
        self.organization_id = 0;
        self.user_id = 0;
        self.is_admin = false;
        self.is_device_admin = false;
        self.is_gateway_admin = false;
        self.username.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrganizationUser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrganizationUser {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrganizationUserListItem {
    // message fields
    pub user_id: i64,
    pub username: ::std::string::String,
    pub is_admin: bool,
    pub is_device_admin: bool,
    pub is_gateway_admin: bool,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrganizationUserListItem {
    fn default() -> &'a OrganizationUserListItem {
        <OrganizationUserListItem as ::protobuf::Message>::default_instance()
    }
}

impl OrganizationUserListItem {
    pub fn new() -> OrganizationUserListItem {
        ::std::default::Default::default()
    }

    // int64 user_id = 1;


    pub fn get_user_id(&self) -> i64 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: i64) {
        self.user_id = v;
    }

    // string username = 2;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // bool is_admin = 3;


    pub fn get_is_admin(&self) -> bool {
        self.is_admin
    }
    pub fn clear_is_admin(&mut self) {
        self.is_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_admin(&mut self, v: bool) {
        self.is_admin = v;
    }

    // bool is_device_admin = 6;


    pub fn get_is_device_admin(&self) -> bool {
        self.is_device_admin
    }
    pub fn clear_is_device_admin(&mut self) {
        self.is_device_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_device_admin(&mut self, v: bool) {
        self.is_device_admin = v;
    }

    // bool is_gateway_admin = 7;


    pub fn get_is_gateway_admin(&self) -> bool {
        self.is_gateway_admin
    }
    pub fn clear_is_gateway_admin(&mut self) {
        self.is_gateway_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_gateway_admin(&mut self, v: bool) {
        self.is_gateway_admin = v;
    }

    // .google.protobuf.Timestamp created_at = 4;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 5;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for OrganizationUserListItem {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_admin = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_device_admin = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_gateway_admin = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.username);
        }
        if self.is_admin != false {
            my_size += 2;
        }
        if self.is_device_admin != false {
            my_size += 2;
        }
        if self.is_gateway_admin != false {
            my_size += 2;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_int64(1, self.user_id)?;
        }
        if !self.username.is_empty() {
            os.write_string(2, &self.username)?;
        }
        if self.is_admin != false {
            os.write_bool(3, self.is_admin)?;
        }
        if self.is_device_admin != false {
            os.write_bool(6, self.is_device_admin)?;
        }
        if self.is_gateway_admin != false {
            os.write_bool(7, self.is_gateway_admin)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrganizationUserListItem {
        OrganizationUserListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &OrganizationUserListItem| { &m.user_id },
                    |m: &mut OrganizationUserListItem| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "username",
                    |m: &OrganizationUserListItem| { &m.username },
                    |m: &mut OrganizationUserListItem| { &mut m.username },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_admin",
                    |m: &OrganizationUserListItem| { &m.is_admin },
                    |m: &mut OrganizationUserListItem| { &mut m.is_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_device_admin",
                    |m: &OrganizationUserListItem| { &m.is_device_admin },
                    |m: &mut OrganizationUserListItem| { &mut m.is_device_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_gateway_admin",
                    |m: &OrganizationUserListItem| { &m.is_gateway_admin },
                    |m: &mut OrganizationUserListItem| { &mut m.is_gateway_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &OrganizationUserListItem| { &m.created_at },
                    |m: &mut OrganizationUserListItem| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &OrganizationUserListItem| { &m.updated_at },
                    |m: &mut OrganizationUserListItem| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OrganizationUserListItem>(
                    "OrganizationUserListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OrganizationUserListItem {
        static mut instance: ::protobuf::lazy::Lazy<OrganizationUserListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OrganizationUserListItem,
        };
        unsafe {
            instance.get(OrganizationUserListItem::new)
        }
    }
}

impl ::protobuf::Clear for OrganizationUserListItem {
    fn clear(&mut self) {
        self.user_id = 0;
        self.username.clear();
        self.is_admin = false;
        self.is_device_admin = false;
        self.is_gateway_admin = false;
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrganizationUserListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrganizationUserListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddOrganizationUserRequest {
    // message fields
    pub organization_user: ::protobuf::SingularPtrField<OrganizationUser>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddOrganizationUserRequest {
    fn default() -> &'a AddOrganizationUserRequest {
        <AddOrganizationUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddOrganizationUserRequest {
    pub fn new() -> AddOrganizationUserRequest {
        ::std::default::Default::default()
    }

    // .api.OrganizationUser organization_user = 1;


    pub fn get_organization_user(&self) -> &OrganizationUser {
        self.organization_user.as_ref().unwrap_or_else(|| OrganizationUser::default_instance())
    }
    pub fn clear_organization_user(&mut self) {
        self.organization_user.clear();
    }

    pub fn has_organization_user(&self) -> bool {
        self.organization_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_organization_user(&mut self, v: OrganizationUser) {
        self.organization_user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization_user(&mut self) -> &mut OrganizationUser {
        if self.organization_user.is_none() {
            self.organization_user.set_default();
        }
        self.organization_user.as_mut().unwrap()
    }

    // Take field
    pub fn take_organization_user(&mut self) -> OrganizationUser {
        self.organization_user.take().unwrap_or_else(|| OrganizationUser::new())
    }
}

impl ::protobuf::Message for AddOrganizationUserRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.organization_user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.organization_user)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.organization_user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.organization_user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddOrganizationUserRequest {
        AddOrganizationUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrganizationUser>>(
                    "organization_user",
                    |m: &AddOrganizationUserRequest| { &m.organization_user },
                    |m: &mut AddOrganizationUserRequest| { &mut m.organization_user },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddOrganizationUserRequest>(
                    "AddOrganizationUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddOrganizationUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<AddOrganizationUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddOrganizationUserRequest,
        };
        unsafe {
            instance.get(AddOrganizationUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for AddOrganizationUserRequest {
    fn clear(&mut self) {
        self.organization_user.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddOrganizationUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddOrganizationUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateOrganizationUserRequest {
    // message fields
    pub organization_user: ::protobuf::SingularPtrField<OrganizationUser>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateOrganizationUserRequest {
    fn default() -> &'a UpdateOrganizationUserRequest {
        <UpdateOrganizationUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateOrganizationUserRequest {
    pub fn new() -> UpdateOrganizationUserRequest {
        ::std::default::Default::default()
    }

    // .api.OrganizationUser organization_user = 1;


    pub fn get_organization_user(&self) -> &OrganizationUser {
        self.organization_user.as_ref().unwrap_or_else(|| OrganizationUser::default_instance())
    }
    pub fn clear_organization_user(&mut self) {
        self.organization_user.clear();
    }

    pub fn has_organization_user(&self) -> bool {
        self.organization_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_organization_user(&mut self, v: OrganizationUser) {
        self.organization_user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization_user(&mut self) -> &mut OrganizationUser {
        if self.organization_user.is_none() {
            self.organization_user.set_default();
        }
        self.organization_user.as_mut().unwrap()
    }

    // Take field
    pub fn take_organization_user(&mut self) -> OrganizationUser {
        self.organization_user.take().unwrap_or_else(|| OrganizationUser::new())
    }
}

impl ::protobuf::Message for UpdateOrganizationUserRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.organization_user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.organization_user)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.organization_user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.organization_user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateOrganizationUserRequest {
        UpdateOrganizationUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrganizationUser>>(
                    "organization_user",
                    |m: &UpdateOrganizationUserRequest| { &m.organization_user },
                    |m: &mut UpdateOrganizationUserRequest| { &mut m.organization_user },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateOrganizationUserRequest>(
                    "UpdateOrganizationUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateOrganizationUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateOrganizationUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateOrganizationUserRequest,
        };
        unsafe {
            instance.get(UpdateOrganizationUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateOrganizationUserRequest {
    fn clear(&mut self) {
        self.organization_user.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateOrganizationUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateOrganizationUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteOrganizationUserRequest {
    // message fields
    pub organization_id: i64,
    pub user_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteOrganizationUserRequest {
    fn default() -> &'a DeleteOrganizationUserRequest {
        <DeleteOrganizationUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteOrganizationUserRequest {
    pub fn new() -> DeleteOrganizationUserRequest {
        ::std::default::Default::default()
    }

    // int64 organization_id = 1;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int64 user_id = 2;


    pub fn get_user_id(&self) -> i64 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: i64) {
        self.user_id = v;
    }
}

impl ::protobuf::Message for DeleteOrganizationUserRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.user_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.organization_id != 0 {
            os.write_int64(1, self.organization_id)?;
        }
        if self.user_id != 0 {
            os.write_int64(2, self.user_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteOrganizationUserRequest {
        DeleteOrganizationUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &DeleteOrganizationUserRequest| { &m.organization_id },
                    |m: &mut DeleteOrganizationUserRequest| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &DeleteOrganizationUserRequest| { &m.user_id },
                    |m: &mut DeleteOrganizationUserRequest| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteOrganizationUserRequest>(
                    "DeleteOrganizationUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteOrganizationUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteOrganizationUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteOrganizationUserRequest,
        };
        unsafe {
            instance.get(DeleteOrganizationUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteOrganizationUserRequest {
    fn clear(&mut self) {
        self.organization_id = 0;
        self.user_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteOrganizationUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteOrganizationUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOrganizationUsersRequest {
    // message fields
    pub organization_id: i64,
    pub limit: i32,
    pub offset: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOrganizationUsersRequest {
    fn default() -> &'a ListOrganizationUsersRequest {
        <ListOrganizationUsersRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListOrganizationUsersRequest {
    pub fn new() -> ListOrganizationUsersRequest {
        ::std::default::Default::default()
    }

    // int64 organization_id = 1;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int32 limit = 2;


    pub fn get_limit(&self) -> i32 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i32) {
        self.limit = v;
    }

    // int32 offset = 3;


    pub fn get_offset(&self) -> i32 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i32) {
        self.offset = v;
    }
}

impl ::protobuf::Message for ListOrganizationUsersRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.organization_id != 0 {
            os.write_int64(1, self.organization_id)?;
        }
        if self.limit != 0 {
            os.write_int32(2, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int32(3, self.offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOrganizationUsersRequest {
        ListOrganizationUsersRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &ListOrganizationUsersRequest| { &m.organization_id },
                    |m: &mut ListOrganizationUsersRequest| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "limit",
                    |m: &ListOrganizationUsersRequest| { &m.limit },
                    |m: &mut ListOrganizationUsersRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "offset",
                    |m: &ListOrganizationUsersRequest| { &m.offset },
                    |m: &mut ListOrganizationUsersRequest| { &mut m.offset },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListOrganizationUsersRequest>(
                    "ListOrganizationUsersRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListOrganizationUsersRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListOrganizationUsersRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListOrganizationUsersRequest,
        };
        unsafe {
            instance.get(ListOrganizationUsersRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListOrganizationUsersRequest {
    fn clear(&mut self) {
        self.organization_id = 0;
        self.limit = 0;
        self.offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOrganizationUsersRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOrganizationUsersRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListOrganizationUsersResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<OrganizationUserListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListOrganizationUsersResponse {
    fn default() -> &'a ListOrganizationUsersResponse {
        <ListOrganizationUsersResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListOrganizationUsersResponse {
    pub fn new() -> ListOrganizationUsersResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.OrganizationUserListItem result = 2;


    pub fn get_result(&self) -> &[OrganizationUserListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<OrganizationUserListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<OrganizationUserListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<OrganizationUserListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListOrganizationUsersResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListOrganizationUsersResponse {
        ListOrganizationUsersResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListOrganizationUsersResponse| { &m.total_count },
                    |m: &mut ListOrganizationUsersResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrganizationUserListItem>>(
                    "result",
                    |m: &ListOrganizationUsersResponse| { &m.result },
                    |m: &mut ListOrganizationUsersResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListOrganizationUsersResponse>(
                    "ListOrganizationUsersResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListOrganizationUsersResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListOrganizationUsersResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListOrganizationUsersResponse,
        };
        unsafe {
            instance.get(ListOrganizationUsersResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListOrganizationUsersResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListOrganizationUsersResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListOrganizationUsersResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOrganizationUserRequest {
    // message fields
    pub organization_id: i64,
    pub user_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOrganizationUserRequest {
    fn default() -> &'a GetOrganizationUserRequest {
        <GetOrganizationUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetOrganizationUserRequest {
    pub fn new() -> GetOrganizationUserRequest {
        ::std::default::Default::default()
    }

    // int64 organization_id = 1;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // int64 user_id = 2;


    pub fn get_user_id(&self) -> i64 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: i64) {
        self.user_id = v;
    }
}

impl ::protobuf::Message for GetOrganizationUserRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.user_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.organization_id != 0 {
            os.write_int64(1, self.organization_id)?;
        }
        if self.user_id != 0 {
            os.write_int64(2, self.user_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOrganizationUserRequest {
        GetOrganizationUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &GetOrganizationUserRequest| { &m.organization_id },
                    |m: &mut GetOrganizationUserRequest| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &GetOrganizationUserRequest| { &m.user_id },
                    |m: &mut GetOrganizationUserRequest| { &mut m.user_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetOrganizationUserRequest>(
                    "GetOrganizationUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOrganizationUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetOrganizationUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOrganizationUserRequest,
        };
        unsafe {
            instance.get(GetOrganizationUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetOrganizationUserRequest {
    fn clear(&mut self) {
        self.organization_id = 0;
        self.user_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOrganizationUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOrganizationUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOrganizationUserResponse {
    // message fields
    pub organization_user: ::protobuf::SingularPtrField<OrganizationUser>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOrganizationUserResponse {
    fn default() -> &'a GetOrganizationUserResponse {
        <GetOrganizationUserResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetOrganizationUserResponse {
    pub fn new() -> GetOrganizationUserResponse {
        ::std::default::Default::default()
    }

    // .api.OrganizationUser organization_user = 1;


    pub fn get_organization_user(&self) -> &OrganizationUser {
        self.organization_user.as_ref().unwrap_or_else(|| OrganizationUser::default_instance())
    }
    pub fn clear_organization_user(&mut self) {
        self.organization_user.clear();
    }

    pub fn has_organization_user(&self) -> bool {
        self.organization_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_organization_user(&mut self, v: OrganizationUser) {
        self.organization_user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_organization_user(&mut self) -> &mut OrganizationUser {
        if self.organization_user.is_none() {
            self.organization_user.set_default();
        }
        self.organization_user.as_mut().unwrap()
    }

    // Take field
    pub fn take_organization_user(&mut self) -> OrganizationUser {
        self.organization_user.take().unwrap_or_else(|| OrganizationUser::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetOrganizationUserResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.organization_user {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.organization_user)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.organization_user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.organization_user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOrganizationUserResponse {
        GetOrganizationUserResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OrganizationUser>>(
                    "organization_user",
                    |m: &GetOrganizationUserResponse| { &m.organization_user },
                    |m: &mut GetOrganizationUserResponse| { &mut m.organization_user },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetOrganizationUserResponse| { &m.created_at },
                    |m: &mut GetOrganizationUserResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetOrganizationUserResponse| { &m.updated_at },
                    |m: &mut GetOrganizationUserResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetOrganizationUserResponse>(
                    "GetOrganizationUserResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetOrganizationUserResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetOrganizationUserResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetOrganizationUserResponse,
        };
        unsafe {
            instance.get(GetOrganizationUserResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetOrganizationUserResponse {
    fn clear(&mut self) {
        self.organization_user.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOrganizationUserResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOrganizationUserResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"as/external/api/organization.proto\x12\x03api\x1a\x1cgoogle/api/anno\
    tations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/proto\
    buf/empty.proto\"\x81\x01\n\x0cOrganization\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\x03R\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12!\n\
    \x0cdisplay_name\x18\x03\x20\x01(\tR\x0bdisplayName\x12*\n\x11can_have_g\
    ateways\x18\x04\x20\x01(\x08R\x0fcanHaveGateways\"\xff\x01\n\x14Organiza\
    tionListItem\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\x12\n\x04na\
    me\x18\x02\x20\x01(\tR\x04name\x12!\n\x0cdisplay_name\x18\x03\x20\x01(\t\
    R\x0bdisplayName\x12*\n\x11can_have_gateways\x18\x04\x20\x01(\x08R\x0fca\
    nHaveGateways\x129\n\ncreated_at\x18\x05\x20\x01(\x0b2\x1a.google.protob\
    uf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x06\x20\x01(\x0b2\x1a.go\
    ogle.protobuf.TimestampR\tupdatedAt\"(\n\x16GetOrganizationRequest\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\"\xc6\x01\n\x17GetOrganizationR\
    esponse\x125\n\x0corganization\x18\x01\x20\x01(\x0b2\x11.api.Organizatio\
    nR\x0corganization\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\tupdatedAt\"R\n\x19CreateOrganizationReq\
    uest\x125\n\x0corganization\x18\x01\x20\x01(\x0b2\x11.api.OrganizationR\
    \x0corganization\",\n\x1aCreateOrganizationResponse\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x03R\x02id\"R\n\x19UpdateOrganizationRequest\x125\n\x0corg\
    anization\x18\x01\x20\x01(\x0b2\x11.api.OrganizationR\x0corganization\"+\
    \n\x19DeleteOrganizationRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\
    \x02id\"_\n\x17ListOrganizationRequest\x12\x14\n\x05limit\x18\x01\x20\
    \x01(\x03R\x05limit\x12\x16\n\x06offset\x18\x02\x20\x01(\x03R\x06offset\
    \x12\x16\n\x06search\x18\x03\x20\x01(\tR\x06search\"n\n\x18ListOrganizat\
    ionResponse\x12\x1f\n\x0btotal_count\x18\x01\x20\x01(\x03R\ntotalCount\
    \x121\n\x06result\x18\x02\x20\x03(\x0b2\x19.api.OrganizationListItemR\
    \x06result\"\xdd\x01\n\x10OrganizationUser\x12'\n\x0forganization_id\x18\
    \x01\x20\x01(\x03R\x0eorganizationID\x12\x17\n\x07user_id\x18\x02\x20\
    \x01(\x03R\x06userID\x12\x19\n\x08is_admin\x18\x03\x20\x01(\x08R\x07isAd\
    min\x12&\n\x0fis_device_admin\x18\x05\x20\x01(\x08R\risDeviceAdmin\x12(\
    \n\x10is_gateway_admin\x18\x06\x20\x01(\x08R\x0eisGatewayAdmin\x12\x1a\n\
    \x08username\x18\x04\x20\x01(\tR\x08username\"\xb2\x02\n\x18Organization\
    UserListItem\x12\x17\n\x07user_id\x18\x01\x20\x01(\x03R\x06userID\x12\
    \x1a\n\x08username\x18\x02\x20\x01(\tR\x08username\x12\x19\n\x08is_admin\
    \x18\x03\x20\x01(\x08R\x07isAdmin\x12&\n\x0fis_device_admin\x18\x06\x20\
    \x01(\x08R\risDeviceAdmin\x12(\n\x10is_gateway_admin\x18\x07\x20\x01(\
    \x08R\x0eisGatewayAdmin\x129\n\ncreated_at\x18\x04\x20\x01(\x0b2\x1a.goo\
    gle.protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x05\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\tupdatedAt\"`\n\x1aAddOrganizationU\
    serRequest\x12B\n\x11organization_user\x18\x01\x20\x01(\x0b2\x15.api.Org\
    anizationUserR\x10organizationUser\"c\n\x1dUpdateOrganizationUserRequest\
    \x12B\n\x11organization_user\x18\x01\x20\x01(\x0b2\x15.api.OrganizationU\
    serR\x10organizationUser\"a\n\x1dDeleteOrganizationUserRequest\x12'\n\
    \x0forganization_id\x18\x01\x20\x01(\x03R\x0eorganizationID\x12\x17\n\
    \x07user_id\x18\x02\x20\x01(\x03R\x06userID\"u\n\x1cListOrganizationUser\
    sRequest\x12'\n\x0forganization_id\x18\x01\x20\x01(\x03R\x0eorganization\
    ID\x12\x14\n\x05limit\x18\x02\x20\x01(\x05R\x05limit\x12\x16\n\x06offset\
    \x18\x03\x20\x01(\x05R\x06offset\"w\n\x1dListOrganizationUsersResponse\
    \x12\x1f\n\x0btotal_count\x18\x01\x20\x01(\x03R\ntotalCount\x125\n\x06re\
    sult\x18\x02\x20\x03(\x0b2\x1d.api.OrganizationUserListItemR\x06result\"\
    ^\n\x1aGetOrganizationUserRequest\x12'\n\x0forganization_id\x18\x01\x20\
    \x01(\x03R\x0eorganizationID\x12\x17\n\x07user_id\x18\x02\x20\x01(\x03R\
    \x06userID\"\xd7\x01\n\x1bGetOrganizationUserResponse\x12B\n\x11organiza\
    tion_user\x18\x01\x20\x01(\x0b2\x15.api.OrganizationUserR\x10organizatio\
    nUser\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.Times\
    tampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampR\tupdatedAt2\xf6\t\n\x13OrganizationService\x12_\n\x04Li\
    st\x12\x1c.api.ListOrganizationRequest\x1a\x1d.api.ListOrganizationRespo\
    nse\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/api/organizations\x12a\n\x03Ge\
    t\x12\x1b.api.GetOrganizationRequest\x1a\x1c.api.GetOrganizationResponse\
    \"\x1f\x82\xd3\xe4\x93\x02\x19\x12\x17/api/organizations/{id}\x12h\n\x06\
    Create\x12\x1e.api.CreateOrganizationRequest\x1a\x1f.api.CreateOrganizat\
    ionResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\"\x12/api/organizations:\x01*\
    \x12q\n\x06Update\x12\x1e.api.UpdateOrganizationRequest\x1a\x16.google.p\
    rotobuf.Empty\"/\x82\xd3\xe4\x93\x02)\x1a$/api/organizations/{organizati\
    on.id}:\x01*\x12a\n\x06Delete\x12\x1e.api.DeleteOrganizationRequest\x1a\
    \x16.google.protobuf.Empty\"\x1f\x82\xd3\xe4\x93\x02\x19*\x17/api/organi\
    zations/{id}\x12\x86\x01\n\tListUsers\x12!.api.ListOrganizationUsersRequ\
    est\x1a\".api.ListOrganizationUsersResponse\"2\x82\xd3\xe4\x93\x02,\x12*\
    /api/organizations/{organization_id}/users\x12\x8a\x01\n\x07GetUser\x12\
    \x1f.api.GetOrganizationUserRequest\x1a\x20.api.GetOrganizationUserRespo\
    nse\"<\x82\xd3\xe4\x93\x026\x124/api/organizations/{organization_id}/use\
    rs/{user_id}\x12\x8b\x01\n\x07AddUser\x12\x1f.api.AddOrganizationUserReq\
    uest\x1a\x16.google.protobuf.Empty\"G\x82\xd3\xe4\x93\x02A\"</api/organi\
    zations/{organization_user.organization_id}/users:\x01*\x12\xad\x01\n\nU\
    pdateUser\x12\".api.UpdateOrganizationUserRequest\x1a\x16.google.protobu\
    f.Empty\"c\x82\xd3\xe4\x93\x02]\x1aX/api/organizations/{organization_use\
    r.organization_id}/users/{organization_user.user_id}:\x01*\x12\x86\x01\n\
    \nDeleteUser\x12\".api.DeleteOrganizationUserRequest\x1a\x16.google.prot\
    obuf.Empty\"<\x82\xd3\xe4\x93\x026*4/api/organizations/{organization_id}\
    /users/{user_id}B9Z7github.com/brocaar/chirpstack-api/go/v3/as/external/\
    apiJ\xcb<\n\x07\x12\x05\0\0\x96\x02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x02\x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\
    \n\x02\x08\x0b\x12\x03\x04\0N\n\t\n\x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\
    \x03\x01\x12\x03\x07\x07(\n\t\n\x02\x03\x02\x12\x03\x08\x07$\nR\n\x02\
    \x06\0\x12\x04\x0c\0V\x01\x1aF\x20OrganizationService\x20is\x20the\x20se\
    rvice\x20managing\x20the\x20organization\x20access.\n\n\n\n\x03\x06\0\
    \x01\x12\x03\x0c\x08\x1b\n&\n\x04\x06\0\x02\0\x12\x04\x0e\x08\x12\t\x1a\
    \x18\x20Get\x20organization\x20list.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\
    \x03\x0e\x0c\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\x11(\n\x0c\n\
    \x05\x06\0\x02\0\x03\x12\x03\x0e3K\n\r\n\x05\x06\0\x02\0\x04\x12\x04\x0f\
    \x10\x11\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x0f\x10\x11\
    \x12\n7\n\x04\x06\0\x02\x01\x12\x04\x15\x08\x19\t\x1a)\x20Get\x20data\
    \x20for\x20a\x20particular\x20organization.\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03\x15\x0c\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x15\x10&\
    \n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x151H\n\r\n\x05\x06\0\x02\x01\x04\
    \x12\x04\x16\x10\x18\x12\n\x11\n\t\x06\0\x02\x01\x04\xb0\xca\xbc\"\x12\
    \x04\x16\x10\x18\x12\n*\n\x04\x06\0\x02\x02\x12\x04\x1c\x08!\t\x1a\x1c\
    \x20Create\x20a\x20new\x20organization.\n\n\x0c\n\x05\x06\0\x02\x02\x01\
    \x12\x03\x1c\x0c\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1c\x13,\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1c7Q\n\r\n\x05\x06\0\x02\x02\x04\
    \x12\x04\x1d\x10\x20\x12\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\
    \x04\x1d\x10\x20\x12\n0\n\x04\x06\0\x02\x03\x12\x04$\x08)\t\x1a\"\x20Upd\
    ate\x20an\x20existing\x20organization.\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03$\x0c\x12\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03$\x13,\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03$7L\n\r\n\x05\x06\0\x02\x03\x04\x12\x04%\
    \x10(\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04%\x10(\x12\n'\
    \n\x04\x06\0\x02\x04\x12\x04,\x080\t\x1a\x19\x20Delete\x20an\x20organiza\
    tion.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03,\x0c\x12\n\x0c\n\x05\x06\0\
    \x02\x04\x02\x12\x03,\x13,\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03,7L\n\r\
    \n\x05\x06\0\x02\x04\x04\x12\x04-\x10/\x12\n\x11\n\t\x06\0\x02\x04\x04\
    \xb0\xca\xbc\"\x12\x04-\x10/\x12\n-\n\x04\x06\0\x02\x05\x12\x043\x087\t\
    \x1a\x1f\x20Get\x20organization's\x20user\x20list.\n\n\x0c\n\x05\x06\0\
    \x02\x05\x01\x12\x033\x0c\x15\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x033\x16\
    2\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x033=Z\n\r\n\x05\x06\0\x02\x05\x04\
    \x12\x044\x106\x12\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\x044\
    \x106\x12\n<\n\x04\x06\0\x02\x06\x12\x04:\x08>\t\x1a.\x20Get\x20data\x20\
    for\x20a\x20particular\x20organization\x20user.\n\n\x0c\n\x05\x06\0\x02\
    \x06\x01\x12\x03:\x0c\x13\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03:\x14.\n\
    \x0c\n\x05\x06\0\x02\x06\x03\x12\x03:9T\n\r\n\x05\x06\0\x02\x06\x04\x12\
    \x04;\x10=\x12\n\x11\n\t\x06\0\x02\x06\x04\xb0\xca\xbc\"\x12\x04;\x10=\
    \x12\n2\n\x04\x06\0\x02\x07\x12\x04A\x08F\t\x1a$\x20Add\x20a\x20new\x20u\
    ser\x20to\x20an\x20organization.\n\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03\
    A\x0c\x13\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03A\x14.\n\x0c\n\x05\x06\0\
    \x02\x07\x03\x12\x03A9N\n\r\n\x05\x06\0\x02\x07\x04\x12\x04B\x10E\x12\n\
    \x11\n\t\x06\0\x02\x07\x04\xb0\xca\xbc\"\x12\x04B\x10E\x12\n1\n\x04\x06\
    \0\x02\x08\x12\x04I\x08N\t\x1a#\x20Update\x20a\x20user\x20in\x20an\x20or\
    ganization.\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03I\x0c\x16\n\x0c\n\x05\
    \x06\0\x02\x08\x02\x12\x03I\x174\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03I?\
    T\n\r\n\x05\x06\0\x02\x08\x04\x12\x04J\x10M\x12\n\x11\n\t\x06\0\x02\x08\
    \x04\xb0\xca\xbc\"\x12\x04J\x10M\x12\n3\n\x04\x06\0\x02\t\x12\x04Q\x08U\
    \t\x1a%\x20Delete\x20a\x20user\x20from\x20an\x20organization.\n\n\x0c\n\
    \x05\x06\0\x02\t\x01\x12\x03Q\x0c\x16\n\x0c\n\x05\x06\0\x02\t\x02\x12\
    \x03Q\x174\n\x0c\n\x05\x06\0\x02\t\x03\x12\x03Q?T\n\r\n\x05\x06\0\x02\t\
    \x04\x12\x04R\x10T\x12\n\x11\n\t\x06\0\x02\t\x04\xb0\xca\xbc\"\x12\x04R\
    \x10T\x12\n\n\n\x02\x04\0\x12\x04X\0d\x01\n\n\n\x03\x04\0\x01\x12\x03X\
    \x08\x14\n\x1f\n\x04\x04\0\x02\0\x12\x03Z\x08\x15\x1a\x12\x20Organizatio\
    n\x20ID.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04Z\x08X\x16\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03Z\x08\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03Z\x0e\x10\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03Z\x13\x14\n!\n\x04\x04\0\x02\x01\x12\
    \x03]\x08\x18\x1a\x14\x20Organization\x20name.\n\n\r\n\x05\x04\0\x02\x01\
    \x04\x12\x04]\x08Z\x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03]\x08\x0e\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03]\x0f\x13\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03]\x16\x17\n)\n\x04\x04\0\x02\x02\x12\x03`\x08\x20\x1a\x1c\
    \x20Organization\x20display\x20name.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\
    \x04`\x08]\x18\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03`\x08\x0e\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03`\x0f\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03`\x1e\x1f\n>\n\x04\x04\0\x02\x03\x12\x03c\x08#\x1a1\x20Can\x20th\
    e\x20organization\x20create\x20and\x20\"own\"\x20Gateways?\n\n\r\n\x05\
    \x04\0\x02\x03\x04\x12\x04c\x08`\x20\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03c\x08\x0c\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03c\r\x1e\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03c!\"\n\n\n\x02\x04\x01\x12\x04f\0x\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03f\x08\x1c\n\x1f\n\x04\x04\x01\x02\0\x12\x03h\x08\
    \x15\x1a\x12\x20Organization\x20ID.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\
    \x04h\x08f\x1e\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03h\x08\r\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03h\x0e\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03h\x13\x14\n!\n\x04\x04\x01\x02\x01\x12\x03k\x08\x18\x1a\x14\x20Organ\
    ization\x20name.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04k\x08h\x15\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03k\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03k\x0f\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03k\x16\x17\n\
    )\n\x04\x04\x01\x02\x02\x12\x03n\x08\x20\x1a\x1c\x20Organization\x20disp\
    lay\x20name.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04n\x08k\x18\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x03n\x08\x0e\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03n\x0f\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03n\x1e\x1f\n\
    >\n\x04\x04\x01\x02\x03\x12\x03q\x08#\x1a1\x20Can\x20the\x20organization\
    \x20create\x20and\x20\"own\"\x20Gateways?\n\n\r\n\x05\x04\x01\x02\x03\
    \x04\x12\x04q\x08n\x20\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03q\x08\x0c\
    \n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03q\r\x1e\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03q!\"\n$\n\x04\x04\x01\x02\x04\x12\x03t\x081\x1a\x17\x20C\
    reated\x20at\x20timestamp.\n\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04t\x08q\
    #\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03t\x08!\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03t\",\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03t/0\n%\n\x04\
    \x04\x01\x02\x05\x12\x03w\x081\x1a\x18\x20Last\x20update\x20timestamp.\n\
    \n\r\n\x05\x04\x01\x02\x05\x04\x12\x04w\x08t1\n\x0c\n\x05\x04\x01\x02\
    \x05\x06\x12\x03w\x08!\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03w\",\n\x0c\
    \n\x05\x04\x01\x02\x05\x03\x12\x03w/0\n\n\n\x02\x04\x02\x12\x04z\0}\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03z\x08\x1e\n\x1f\n\x04\x04\x02\x02\0\x12\
    \x03|\x08\x15\x1a\x12\x20Organization\x20ID.\n\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04|\x08z\x20\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03|\x08\r\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03|\x0e\x10\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03|\x13\x14\n\x0b\n\x02\x04\x03\x12\x05\x7f\0\x88\x01\x01\n\n\
    \n\x03\x04\x03\x01\x12\x03\x7f\x08\x1f\n$\n\x04\x04\x03\x02\0\x12\x04\
    \x81\x01\x08&\x1a\x16\x20Organization\x20object.\n\n\x0e\n\x05\x04\x03\
    \x02\0\x04\x12\x05\x81\x01\x08\x7f!\n\r\n\x05\x04\x03\x02\0\x06\x12\x04\
    \x81\x01\x08\x14\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x81\x01\x15!\n\r\n\
    \x05\x04\x03\x02\0\x03\x12\x04\x81\x01$%\n%\n\x04\x04\x03\x02\x01\x12\
    \x04\x84\x01\x081\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0f\n\x05\
    \x04\x03\x02\x01\x04\x12\x06\x84\x01\x08\x81\x01&\n\r\n\x05\x04\x03\x02\
    \x01\x06\x12\x04\x84\x01\x08!\n\r\n\x05\x04\x03\x02\x01\x01\x12\x04\x84\
    \x01\",\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\x84\x01/0\n&\n\x04\x04\x03\
    \x02\x02\x12\x04\x87\x01\x081\x1a\x18\x20Last\x20update\x20timestamp.\n\
    \n\x0f\n\x05\x04\x03\x02\x02\x04\x12\x06\x87\x01\x08\x84\x011\n\r\n\x05\
    \x04\x03\x02\x02\x06\x12\x04\x87\x01\x08!\n\r\n\x05\x04\x03\x02\x02\x01\
    \x12\x04\x87\x01\",\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\x87\x01/0\n\
    \x0c\n\x02\x04\x04\x12\x06\x8a\x01\0\x8d\x01\x01\n\x0b\n\x03\x04\x04\x01\
    \x12\x04\x8a\x01\x08!\n.\n\x04\x04\x04\x02\0\x12\x04\x8c\x01\x08&\x1a\
    \x20\x20Organization\x20object\x20to\x20create.\n\n\x0f\n\x05\x04\x04\
    \x02\0\x04\x12\x06\x8c\x01\x08\x8a\x01#\n\r\n\x05\x04\x04\x02\0\x06\x12\
    \x04\x8c\x01\x08\x14\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\x8c\x01\x15!\n\
    \r\n\x05\x04\x04\x02\0\x03\x12\x04\x8c\x01$%\n\x0c\n\x02\x04\x05\x12\x06\
    \x8f\x01\0\x92\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\x8f\x01\x08\"\n\
    \x20\n\x04\x04\x05\x02\0\x12\x04\x91\x01\x08\x15\x1a\x12\x20Organization\
    \x20ID.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\x06\x91\x01\x08\x8f\x01$\n\r\
    \n\x05\x04\x05\x02\0\x05\x12\x04\x91\x01\x08\r\n\r\n\x05\x04\x05\x02\0\
    \x01\x12\x04\x91\x01\x0e\x10\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x91\x01\
    \x13\x14\n\x0c\n\x02\x04\x06\x12\x06\x94\x01\0\x97\x01\x01\n\x0b\n\x03\
    \x04\x06\x01\x12\x04\x94\x01\x08!\n.\n\x04\x04\x06\x02\0\x12\x04\x96\x01\
    \x08&\x1a\x20\x20Organization\x20object\x20to\x20update.\n\n\x0f\n\x05\
    \x04\x06\x02\0\x04\x12\x06\x96\x01\x08\x94\x01#\n\r\n\x05\x04\x06\x02\0\
    \x06\x12\x04\x96\x01\x08\x14\n\r\n\x05\x04\x06\x02\0\x01\x12\x04\x96\x01\
    \x15!\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\x96\x01$%\n\x0c\n\x02\x04\x07\
    \x12\x06\x99\x01\0\x9c\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\x99\x01\
    \x08!\n\x20\n\x04\x04\x07\x02\0\x12\x04\x9b\x01\x08\x15\x1a\x12\x20Organ\
    ization\x20ID.\n\n\x0f\n\x05\x04\x07\x02\0\x04\x12\x06\x9b\x01\x08\x99\
    \x01#\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\x9b\x01\x08\r\n\r\n\x05\x04\
    \x07\x02\0\x01\x12\x04\x9b\x01\x0e\x10\n\r\n\x05\x04\x07\x02\0\x03\x12\
    \x04\x9b\x01\x13\x14\n\x0c\n\x02\x04\x08\x12\x06\x9e\x01\0\xa8\x01\x01\n\
    \x0b\n\x03\x04\x08\x01\x12\x04\x9e\x01\x08\x1f\nH\n\x04\x04\x08\x02\0\
    \x12\x04\xa0\x01\x08\x18\x1a:\x20Max\x20number\x20of\x20organizations\
    \x20to\x20return\x20in\x20the\x20result-set.\n\n\x0f\n\x05\x04\x08\x02\0\
    \x04\x12\x06\xa0\x01\x08\x9e\x01!\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\
    \xa0\x01\x08\r\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xa0\x01\x0e\x13\n\r\n\
    \x05\x04\x08\x02\0\x03\x12\x04\xa0\x01\x16\x17\n:\n\x04\x04\x08\x02\x01\
    \x12\x04\xa3\x01\x08\x19\x1a,\x20Offset\x20in\x20the\x20result-set\x20(f\
    or\x20pagination).\n\n\x0f\n\x05\x04\x08\x02\x01\x04\x12\x06\xa3\x01\x08\
    \xa0\x01\x18\n\r\n\x05\x04\x08\x02\x01\x05\x12\x04\xa3\x01\x08\r\n\r\n\
    \x05\x04\x08\x02\x01\x01\x12\x04\xa3\x01\x0e\x14\n\r\n\x05\x04\x08\x02\
    \x01\x03\x12\x04\xa3\x01\x17\x18\nW\n\x04\x04\x08\x02\x02\x12\x04\xa7\
    \x01\x08\x1a\x1aI\x20When\x20provided,\x20the\x20given\x20string\x20will\
    \x20be\x20used\x20to\x20search\x20on\n\x20displayName.\n\n\x0f\n\x05\x04\
    \x08\x02\x02\x04\x12\x06\xa7\x01\x08\xa3\x01\x19\n\r\n\x05\x04\x08\x02\
    \x02\x05\x12\x04\xa7\x01\x08\x0e\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\
    \xa7\x01\x0f\x15\n\r\n\x05\x04\x08\x02\x02\x03\x12\x04\xa7\x01\x18\x19\n\
    \x0c\n\x02\x04\t\x12\x06\xaa\x01\0\xaf\x01\x01\n\x0b\n\x03\x04\t\x01\x12\
    \x04\xaa\x01\x08\x20\n.\n\x04\x04\t\x02\0\x12\x04\xac\x01\x08\x1e\x1a\
    \x20\x20Total\x20number\x20of\x20organizations.\n\n\x0f\n\x05\x04\t\x02\
    \0\x04\x12\x06\xac\x01\x08\xaa\x01\"\n\r\n\x05\x04\t\x02\0\x05\x12\x04\
    \xac\x01\x08\r\n\r\n\x05\x04\t\x02\0\x01\x12\x04\xac\x01\x0e\x19\n\r\n\
    \x05\x04\t\x02\0\x03\x12\x04\xac\x01\x1c\x1d\n\x0c\n\x04\x04\t\x02\x01\
    \x12\x04\xae\x01\x081\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\xae\x01\x08\
    \x10\n\r\n\x05\x04\t\x02\x01\x06\x12\x04\xae\x01\x11%\n\r\n\x05\x04\t\
    \x02\x01\x01\x12\x04\xae\x01&,\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xae\
    \x01/0\n\x0c\n\x02\x04\n\x12\x06\xb1\x01\0\xc5\x01\x01\n\x0b\n\x03\x04\n\
    \x01\x12\x04\xb1\x01\x08\x18\n\x20\n\x04\x04\n\x02\0\x12\x04\xb3\x01\x08\
    A\x1a\x12\x20Organization\x20ID.\n\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\
    \xb3\x01\x08\xb1\x01\x1a\n\r\n\x05\x04\n\x02\0\x05\x12\x04\xb3\x01\x08\r\
    \n\r\n\x05\x04\n\x02\0\x01\x12\x04\xb3\x01\x0e\x1d\n\r\n\x05\x04\n\x02\0\
    \x03\x12\x04\xb3\x01\x20!\n\r\n\x05\x04\n\x02\0\x08\x12\x04\xb3\x01\"@\n\
    \r\n\x05\x04\n\x02\0\n\x12\x04\xb3\x01/?\n\x18\n\x04\x04\n\x02\x01\x12\
    \x04\xb6\x01\x081\x1a\n\x20User\x20ID.\n\n\x0f\n\x05\x04\n\x02\x01\x04\
    \x12\x06\xb6\x01\x08\xb3\x01A\n\r\n\x05\x04\n\x02\x01\x05\x12\x04\xb6\
    \x01\x08\r\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xb6\x01\x0e\x15\n\r\n\x05\
    \x04\n\x02\x01\x03\x12\x04\xb6\x01\x18\x19\n\r\n\x05\x04\n\x02\x01\x08\
    \x12\x04\xb6\x01\x1a0\n\r\n\x05\x04\n\x02\x01\n\x12\x04\xb6\x01'/\n\x8f\
    \x01\n\x04\x04\n\x02\x02\x12\x04\xba\x01\x08\x1a\x1a\x80\x01\x20User\x20\
    is\x20admin\x20within\x20the\x20context\x20of\x20the\x20organization.\n\
    \x20There\x20is\x20no\x20need\x20to\x20set\x20the\x20is_device_admin\x20\
    and\x20is_gateway_admin\x20flags.\n\n\x0f\n\x05\x04\n\x02\x02\x04\x12\
    \x06\xba\x01\x08\xb6\x011\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\xba\x01\
    \x08\x0c\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\xba\x01\r\x15\n\r\n\x05\x04\
    \n\x02\x02\x03\x12\x04\xba\x01\x18\x19\n|\n\x04\x04\n\x02\x03\x12\x04\
    \xbe\x01\x04\x1d\x1an\x20User\x20is\x20able\x20to\x20modify\x20device\
    \x20related\x20resources\x20(applications,\n\x20device-profiles,\x20devi\
    ces,\x20multicast-groups).\n\n\x0f\n\x05\x04\n\x02\x03\x04\x12\x06\xbe\
    \x01\x04\xba\x01\x1a\n\r\n\x05\x04\n\x02\x03\x05\x12\x04\xbe\x01\x04\x08\
    \n\r\n\x05\x04\n\x02\x03\x01\x12\x04\xbe\x01\t\x18\n\r\n\x05\x04\n\x02\
    \x03\x03\x12\x04\xbe\x01\x1b\x1c\n0\n\x04\x04\n\x02\x04\x12\x04\xc1\x01\
    \x04\x1e\x1a\"\x20User\x20is\x20able\x20to\x20modify\x20gateways.\n\n\
    \x0f\n\x05\x04\n\x02\x04\x04\x12\x06\xc1\x01\x04\xbe\x01\x1d\n\r\n\x05\
    \x04\n\x02\x04\x05\x12\x04\xc1\x01\x04\x08\n\r\n\x05\x04\n\x02\x04\x01\
    \x12\x04\xc1\x01\t\x19\n\r\n\x05\x04\n\x02\x04\x03\x12\x04\xc1\x01\x1c\
    \x1d\n,\n\x04\x04\n\x02\x05\x12\x04\xc4\x01\x08\x1c\x1a\x1e\x20Username\
    \x20(only\x20used\x20on\x20get).\n\n\x0f\n\x05\x04\n\x02\x05\x04\x12\x06\
    \xc4\x01\x08\xc1\x01\x1e\n\r\n\x05\x04\n\x02\x05\x05\x12\x04\xc4\x01\x08\
    \x0e\n\r\n\x05\x04\n\x02\x05\x01\x12\x04\xc4\x01\x0f\x17\n\r\n\x05\x04\n\
    \x02\x05\x03\x12\x04\xc4\x01\x1a\x1b\n\x0c\n\x02\x04\x0b\x12\x06\xc7\x01\
    \0\xde\x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\xc7\x01\x08\x20\n\x18\n\
    \x04\x04\x0b\x02\0\x12\x04\xc9\x01\x081\x1a\n\x20User\x20ID.\n\n\x0f\n\
    \x05\x04\x0b\x02\0\x04\x12\x06\xc9\x01\x08\xc7\x01\"\n\r\n\x05\x04\x0b\
    \x02\0\x05\x12\x04\xc9\x01\x08\r\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xc9\
    \x01\x0e\x15\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xc9\x01\x18\x19\n\r\n\
    \x05\x04\x0b\x02\0\x08\x12\x04\xc9\x01\x1a0\n\r\n\x05\x04\x0b\x02\0\n\
    \x12\x04\xc9\x01'/\n\x19\n\x04\x04\x0b\x02\x01\x12\x04\xcc\x01\x08\x1c\
    \x1a\x0b\x20Username.\n\n\x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\xcc\x01\
    \x08\xc9\x011\n\r\n\x05\x04\x0b\x02\x01\x05\x12\x04\xcc\x01\x08\x0e\n\r\
    \n\x05\x04\x0b\x02\x01\x01\x12\x04\xcc\x01\x0f\x17\n\r\n\x05\x04\x0b\x02\
    \x01\x03\x12\x04\xcc\x01\x1a\x1b\n\x8f\x01\n\x04\x04\x0b\x02\x02\x12\x04\
    \xd0\x01\x08\x1a\x1a\x80\x01\x20User\x20is\x20admin\x20within\x20the\x20\
    context\x20of\x20the\x20organization.\n\x20There\x20is\x20no\x20need\x20\
    to\x20set\x20the\x20is_device_admin\x20and\x20is_gateway_admin\x20flags.\
    \n\n\x0f\n\x05\x04\x0b\x02\x02\x04\x12\x06\xd0\x01\x08\xcc\x01\x1c\n\r\n\
    \x05\x04\x0b\x02\x02\x05\x12\x04\xd0\x01\x08\x0c\n\r\n\x05\x04\x0b\x02\
    \x02\x01\x12\x04\xd0\x01\r\x15\n\r\n\x05\x04\x0b\x02\x02\x03\x12\x04\xd0\
    \x01\x18\x19\n|\n\x04\x04\x0b\x02\x03\x12\x04\xd4\x01\x04\x1d\x1an\x20Us\
    er\x20is\x20able\x20to\x20modify\x20device\x20related\x20resources\x20(a\
    pplications,\n\x20device-profiles,\x20devices,\x20multicast-groups).\n\n\
    \x0f\n\x05\x04\x0b\x02\x03\x04\x12\x06\xd4\x01\x04\xd0\x01\x1a\n\r\n\x05\
    \x04\x0b\x02\x03\x05\x12\x04\xd4\x01\x04\x08\n\r\n\x05\x04\x0b\x02\x03\
    \x01\x12\x04\xd4\x01\t\x18\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\xd4\x01\
    \x1b\x1c\n0\n\x04\x04\x0b\x02\x04\x12\x04\xd7\x01\x04\x1e\x1a\"\x20User\
    \x20is\x20able\x20to\x20modify\x20gateways.\n\n\x0f\n\x05\x04\x0b\x02\
    \x04\x04\x12\x06\xd7\x01\x04\xd4\x01\x1d\n\r\n\x05\x04\x0b\x02\x04\x05\
    \x12\x04\xd7\x01\x04\x08\n\r\n\x05\x04\x0b\x02\x04\x01\x12\x04\xd7\x01\t\
    \x19\n\r\n\x05\x04\x0b\x02\x04\x03\x12\x04\xd7\x01\x1c\x1d\n%\n\x04\x04\
    \x0b\x02\x05\x12\x04\xda\x01\x081\x1a\x17\x20Created\x20at\x20timestamp.\
    \n\n\x0f\n\x05\x04\x0b\x02\x05\x04\x12\x06\xda\x01\x08\xd7\x01\x1e\n\r\n\
    \x05\x04\x0b\x02\x05\x06\x12\x04\xda\x01\x08!\n\r\n\x05\x04\x0b\x02\x05\
    \x01\x12\x04\xda\x01\",\n\r\n\x05\x04\x0b\x02\x05\x03\x12\x04\xda\x01/0\
    \n&\n\x04\x04\x0b\x02\x06\x12\x04\xdd\x01\x081\x1a\x18\x20Last\x20update\
    \x20timestamp.\n\n\x0f\n\x05\x04\x0b\x02\x06\x04\x12\x06\xdd\x01\x08\xda\
    \x011\n\r\n\x05\x04\x0b\x02\x06\x06\x12\x04\xdd\x01\x08!\n\r\n\x05\x04\
    \x0b\x02\x06\x01\x12\x04\xdd\x01\",\n\r\n\x05\x04\x0b\x02\x06\x03\x12\
    \x04\xdd\x01/0\n\x0c\n\x02\x04\x0c\x12\x06\xe0\x01\0\xe3\x01\x01\n\x0b\n\
    \x03\x04\x0c\x01\x12\x04\xe0\x01\x08\"\n3\n\x04\x04\x0c\x02\0\x12\x04\
    \xe2\x01\x08/\x1a%\x20Organization-user\x20object\x20to\x20create.\n\n\
    \x0f\n\x05\x04\x0c\x02\0\x04\x12\x06\xe2\x01\x08\xe0\x01$\n\r\n\x05\x04\
    \x0c\x02\0\x06\x12\x04\xe2\x01\x08\x18\n\r\n\x05\x04\x0c\x02\0\x01\x12\
    \x04\xe2\x01\x19*\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xe2\x01-.\n\x0c\n\
    \x02\x04\r\x12\x06\xe5\x01\0\xe8\x01\x01\n\x0b\n\x03\x04\r\x01\x12\x04\
    \xe5\x01\x08%\n3\n\x04\x04\r\x02\0\x12\x04\xe7\x01\x08/\x1a%\x20Organiza\
    tion-user\x20object\x20to\x20update.\n\n\x0f\n\x05\x04\r\x02\0\x04\x12\
    \x06\xe7\x01\x08\xe5\x01'\n\r\n\x05\x04\r\x02\0\x06\x12\x04\xe7\x01\x08\
    \x18\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xe7\x01\x19*\n\r\n\x05\x04\r\x02\
    \0\x03\x12\x04\xe7\x01-.\n\x0c\n\x02\x04\x0e\x12\x06\xea\x01\0\xf0\x01\
    \x01\n\x0b\n\x03\x04\x0e\x01\x12\x04\xea\x01\x08%\n\x20\n\x04\x04\x0e\
    \x02\0\x12\x04\xec\x01\x08A\x1a\x12\x20Organization\x20ID.\n\n\x0f\n\x05\
    \x04\x0e\x02\0\x04\x12\x06\xec\x01\x08\xea\x01'\n\r\n\x05\x04\x0e\x02\0\
    \x05\x12\x04\xec\x01\x08\r\n\r\n\x05\x04\x0e\x02\0\x01\x12\x04\xec\x01\
    \x0e\x1d\n\r\n\x05\x04\x0e\x02\0\x03\x12\x04\xec\x01\x20!\n\r\n\x05\x04\
    \x0e\x02\0\x08\x12\x04\xec\x01\"@\n\r\n\x05\x04\x0e\x02\0\n\x12\x04\xec\
    \x01/?\n\x18\n\x04\x04\x0e\x02\x01\x12\x04\xef\x01\x081\x1a\n\x20User\
    \x20ID.\n\n\x0f\n\x05\x04\x0e\x02\x01\x04\x12\x06\xef\x01\x08\xec\x01A\n\
    \r\n\x05\x04\x0e\x02\x01\x05\x12\x04\xef\x01\x08\r\n\r\n\x05\x04\x0e\x02\
    \x01\x01\x12\x04\xef\x01\x0e\x15\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\
    \xef\x01\x18\x19\n\r\n\x05\x04\x0e\x02\x01\x08\x12\x04\xef\x01\x1a0\n\r\
    \n\x05\x04\x0e\x02\x01\n\x12\x04\xef\x01'/\n\x0c\n\x02\x04\x0f\x12\x06\
    \xf2\x01\0\xfb\x01\x01\n\x0b\n\x03\x04\x0f\x01\x12\x04\xf2\x01\x08$\n\
    \x20\n\x04\x04\x0f\x02\0\x12\x04\xf4\x01\x08A\x1a\x12\x20Organization\
    \x20ID.\n\n\x0f\n\x05\x04\x0f\x02\0\x04\x12\x06\xf4\x01\x08\xf2\x01&\n\r\
    \n\x05\x04\x0f\x02\0\x05\x12\x04\xf4\x01\x08\r\n\r\n\x05\x04\x0f\x02\0\
    \x01\x12\x04\xf4\x01\x0e\x1d\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\xf4\x01\
    \x20!\n\r\n\x05\x04\x0f\x02\0\x08\x12\x04\xf4\x01\"@\n\r\n\x05\x04\x0f\
    \x02\0\n\x12\x04\xf4\x01/?\n@\n\x04\x04\x0f\x02\x01\x12\x04\xf7\x01\x08\
    \x18\x1a2\x20Max\x20number\x20of\x20users\x20to\x20return\x20in\x20the\
    \x20result-set.\n\n\x0f\n\x05\x04\x0f\x02\x01\x04\x12\x06\xf7\x01\x08\
    \xf4\x01A\n\r\n\x05\x04\x0f\x02\x01\x05\x12\x04\xf7\x01\x08\r\n\r\n\x05\
    \x04\x0f\x02\x01\x01\x12\x04\xf7\x01\x0e\x13\n\r\n\x05\x04\x0f\x02\x01\
    \x03\x12\x04\xf7\x01\x16\x17\n:\n\x04\x04\x0f\x02\x02\x12\x04\xfa\x01\
    \x08\x19\x1a,\x20Offset\x20in\x20the\x20result-set\x20(for\x20pagination\
    ).\n\n\x0f\n\x05\x04\x0f\x02\x02\x04\x12\x06\xfa\x01\x08\xf7\x01\x18\n\r\
    \n\x05\x04\x0f\x02\x02\x05\x12\x04\xfa\x01\x08\r\n\r\n\x05\x04\x0f\x02\
    \x02\x01\x12\x04\xfa\x01\x0e\x14\n\r\n\x05\x04\x0f\x02\x02\x03\x12\x04\
    \xfa\x01\x17\x18\n\x0c\n\x02\x04\x10\x12\x06\xfd\x01\0\x82\x02\x01\n\x0b\
    \n\x03\x04\x10\x01\x12\x04\xfd\x01\x08%\n>\n\x04\x04\x10\x02\0\x12\x04\
    \xff\x01\x08\x1e\x1a0\x20The\x20total\x20number\x20of\x20users\x20in\x20\
    the\x20organization.\n\n\x0f\n\x05\x04\x10\x02\0\x04\x12\x06\xff\x01\x08\
    \xfd\x01'\n\r\n\x05\x04\x10\x02\0\x05\x12\x04\xff\x01\x08\r\n\r\n\x05\
    \x04\x10\x02\0\x01\x12\x04\xff\x01\x0e\x19\n\r\n\x05\x04\x10\x02\0\x03\
    \x12\x04\xff\x01\x1c\x1d\n\x0c\n\x04\x04\x10\x02\x01\x12\x04\x81\x02\x08\
    5\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04\x81\x02\x08\x10\n\r\n\x05\x04\
    \x10\x02\x01\x06\x12\x04\x81\x02\x11)\n\r\n\x05\x04\x10\x02\x01\x01\x12\
    \x04\x81\x02*0\n\r\n\x05\x04\x10\x02\x01\x03\x12\x04\x81\x0234\n\x0c\n\
    \x02\x04\x11\x12\x06\x84\x02\0\x8a\x02\x01\n\x0b\n\x03\x04\x11\x01\x12\
    \x04\x84\x02\x08\"\n\x20\n\x04\x04\x11\x02\0\x12\x04\x86\x02\x08A\x1a\
    \x12\x20Organization\x20ID.\n\n\x0f\n\x05\x04\x11\x02\0\x04\x12\x06\x86\
    \x02\x08\x84\x02$\n\r\n\x05\x04\x11\x02\0\x05\x12\x04\x86\x02\x08\r\n\r\
    \n\x05\x04\x11\x02\0\x01\x12\x04\x86\x02\x0e\x1d\n\r\n\x05\x04\x11\x02\0\
    \x03\x12\x04\x86\x02\x20!\n\r\n\x05\x04\x11\x02\0\x08\x12\x04\x86\x02\"@\
    \n\r\n\x05\x04\x11\x02\0\n\x12\x04\x86\x02/?\n\x18\n\x04\x04\x11\x02\x01\
    \x12\x04\x89\x02\x081\x1a\n\x20User\x20ID.\n\n\x0f\n\x05\x04\x11\x02\x01\
    \x04\x12\x06\x89\x02\x08\x86\x02A\n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\
    \x89\x02\x08\r\n\r\n\x05\x04\x11\x02\x01\x01\x12\x04\x89\x02\x0e\x15\n\r\
    \n\x05\x04\x11\x02\x01\x03\x12\x04\x89\x02\x18\x19\n\r\n\x05\x04\x11\x02\
    \x01\x08\x12\x04\x89\x02\x1a0\n\r\n\x05\x04\x11\x02\x01\n\x12\x04\x89\
    \x02'/\n7\n\x02\x04\x12\x12\x06\x8d\x02\0\x96\x02\x01\x1a)\x20Response\
    \x20for\x20a\x20user\x20in\x20the\x20organization\n\n\x0b\n\x03\x04\x12\
    \x01\x12\x04\x8d\x02\x08#\n)\n\x04\x04\x12\x02\0\x12\x04\x8f\x02\x08/\
    \x1a\x1b\x20Organization-user\x20object.\n\n\x0f\n\x05\x04\x12\x02\0\x04\
    \x12\x06\x8f\x02\x08\x8d\x02%\n\r\n\x05\x04\x12\x02\0\x06\x12\x04\x8f\
    \x02\x08\x18\n\r\n\x05\x04\x12\x02\0\x01\x12\x04\x8f\x02\x19*\n\r\n\x05\
    \x04\x12\x02\0\x03\x12\x04\x8f\x02-.\n%\n\x04\x04\x12\x02\x01\x12\x04\
    \x92\x02\x081\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0f\n\x05\x04\
    \x12\x02\x01\x04\x12\x06\x92\x02\x08\x8f\x02/\n\r\n\x05\x04\x12\x02\x01\
    \x06\x12\x04\x92\x02\x08!\n\r\n\x05\x04\x12\x02\x01\x01\x12\x04\x92\x02\
    \",\n\r\n\x05\x04\x12\x02\x01\x03\x12\x04\x92\x02/0\n&\n\x04\x04\x12\x02\
    \x02\x12\x04\x95\x02\x081\x1a\x18\x20Last\x20update\x20timestamp.\n\n\
    \x0f\n\x05\x04\x12\x02\x02\x04\x12\x06\x95\x02\x08\x92\x021\n\r\n\x05\
    \x04\x12\x02\x02\x06\x12\x04\x95\x02\x08!\n\r\n\x05\x04\x12\x02\x02\x01\
    \x12\x04\x95\x02\",\n\r\n\x05\x04\x12\x02\x02\x03\x12\x04\x95\x02/0b\x06\
    proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
