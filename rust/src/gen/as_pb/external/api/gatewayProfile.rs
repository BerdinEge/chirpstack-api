// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/gatewayProfile.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct GatewayProfile {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub network_server_id: i64,
    pub channels: ::std::vec::Vec<u32>,
    pub extra_channels: ::protobuf::RepeatedField<GatewayProfileExtraChannel>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayProfile {
    fn default() -> &'a GatewayProfile {
        <GatewayProfile as ::protobuf::Message>::default_instance()
    }
}

impl GatewayProfile {
    pub fn new() -> GatewayProfile {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int64 network_server_id = 3;


    pub fn get_network_server_id(&self) -> i64 {
        self.network_server_id
    }
    pub fn clear_network_server_id(&mut self) {
        self.network_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_server_id(&mut self, v: i64) {
        self.network_server_id = v;
    }

    // repeated uint32 channels = 4;


    pub fn get_channels(&self) -> &[u32] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::std::vec::Vec<u32>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_channels(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.channels, ::std::vec::Vec::new())
    }

    // repeated .api.GatewayProfileExtraChannel extra_channels = 5;


    pub fn get_extra_channels(&self) -> &[GatewayProfileExtraChannel] {
        &self.extra_channels
    }
    pub fn clear_extra_channels(&mut self) {
        self.extra_channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra_channels(&mut self, v: ::protobuf::RepeatedField<GatewayProfileExtraChannel>) {
        self.extra_channels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extra_channels(&mut self) -> &mut ::protobuf::RepeatedField<GatewayProfileExtraChannel> {
        &mut self.extra_channels
    }

    // Take field
    pub fn take_extra_channels(&mut self) -> ::protobuf::RepeatedField<GatewayProfileExtraChannel> {
        ::std::mem::replace(&mut self.extra_channels, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GatewayProfile {
    fn is_initialized(&self) -> bool {
        for v in &self.extra_channels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_server_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.channels)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.extra_channels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.network_server_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.network_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.channels {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.extra_channels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.network_server_id != 0 {
            os.write_int64(3, self.network_server_id)?;
        }
        for v in &self.channels {
            os.write_uint32(4, *v)?;
        };
        for v in &self.extra_channels {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayProfile {
        GatewayProfile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GatewayProfile| { &m.id },
                    |m: &mut GatewayProfile| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GatewayProfile| { &m.name },
                    |m: &mut GatewayProfile| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "network_server_id",
                    |m: &GatewayProfile| { &m.network_server_id },
                    |m: &mut GatewayProfile| { &mut m.network_server_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "channels",
                    |m: &GatewayProfile| { &m.channels },
                    |m: &mut GatewayProfile| { &mut m.channels },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfileExtraChannel>>(
                    "extra_channels",
                    |m: &GatewayProfile| { &m.extra_channels },
                    |m: &mut GatewayProfile| { &mut m.extra_channels },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayProfile>(
                    "GatewayProfile",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayProfile {
        static mut instance: ::protobuf::lazy::Lazy<GatewayProfile> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayProfile,
        };
        unsafe {
            instance.get(GatewayProfile::new)
        }
    }
}

impl ::protobuf::Clear for GatewayProfile {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.network_server_id = 0;
        self.channels.clear();
        self.extra_channels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayProfile {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayProfileListItem {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub network_server_id: i64,
    pub network_server_name: ::std::string::String,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayProfileListItem {
    fn default() -> &'a GatewayProfileListItem {
        <GatewayProfileListItem as ::protobuf::Message>::default_instance()
    }
}

impl GatewayProfileListItem {
    pub fn new() -> GatewayProfileListItem {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int64 network_server_id = 3;


    pub fn get_network_server_id(&self) -> i64 {
        self.network_server_id
    }
    pub fn clear_network_server_id(&mut self) {
        self.network_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_server_id(&mut self, v: i64) {
        self.network_server_id = v;
    }

    // string network_server_name = 7;


    pub fn get_network_server_name(&self) -> &str {
        &self.network_server_name
    }
    pub fn clear_network_server_name(&mut self) {
        self.network_server_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_network_server_name(&mut self, v: ::std::string::String) {
        self.network_server_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network_server_name(&mut self) -> &mut ::std::string::String {
        &mut self.network_server_name
    }

    // Take field
    pub fn take_network_server_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network_server_name, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp created_at = 5;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 6;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GatewayProfileListItem {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_server_id = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network_server_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.network_server_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.network_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.network_server_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.network_server_name);
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.network_server_id != 0 {
            os.write_int64(3, self.network_server_id)?;
        }
        if !self.network_server_name.is_empty() {
            os.write_string(7, &self.network_server_name)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayProfileListItem {
        GatewayProfileListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GatewayProfileListItem| { &m.id },
                    |m: &mut GatewayProfileListItem| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GatewayProfileListItem| { &m.name },
                    |m: &mut GatewayProfileListItem| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "network_server_id",
                    |m: &GatewayProfileListItem| { &m.network_server_id },
                    |m: &mut GatewayProfileListItem| { &mut m.network_server_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "network_server_name",
                    |m: &GatewayProfileListItem| { &m.network_server_name },
                    |m: &mut GatewayProfileListItem| { &mut m.network_server_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GatewayProfileListItem| { &m.created_at },
                    |m: &mut GatewayProfileListItem| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GatewayProfileListItem| { &m.updated_at },
                    |m: &mut GatewayProfileListItem| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayProfileListItem>(
                    "GatewayProfileListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayProfileListItem {
        static mut instance: ::protobuf::lazy::Lazy<GatewayProfileListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayProfileListItem,
        };
        unsafe {
            instance.get(GatewayProfileListItem::new)
        }
    }
}

impl ::protobuf::Clear for GatewayProfileListItem {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.network_server_id = 0;
        self.network_server_name.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayProfileListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayProfileListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GatewayProfileExtraChannel {
    // message fields
    pub modulation: super::common::Modulation,
    pub frequency: u32,
    pub bandwidth: u32,
    pub bitrate: u32,
    pub spreading_factors: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GatewayProfileExtraChannel {
    fn default() -> &'a GatewayProfileExtraChannel {
        <GatewayProfileExtraChannel as ::protobuf::Message>::default_instance()
    }
}

impl GatewayProfileExtraChannel {
    pub fn new() -> GatewayProfileExtraChannel {
        ::std::default::Default::default()
    }

    // .common.Modulation modulation = 1;


    pub fn get_modulation(&self) -> super::common::Modulation {
        self.modulation
    }
    pub fn clear_modulation(&mut self) {
        self.modulation = super::common::Modulation::LORA;
    }

    // Param is passed by value, moved
    pub fn set_modulation(&mut self, v: super::common::Modulation) {
        self.modulation = v;
    }

    // uint32 frequency = 2;


    pub fn get_frequency(&self) -> u32 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: u32) {
        self.frequency = v;
    }

    // uint32 bandwidth = 3;


    pub fn get_bandwidth(&self) -> u32 {
        self.bandwidth
    }
    pub fn clear_bandwidth(&mut self) {
        self.bandwidth = 0;
    }

    // Param is passed by value, moved
    pub fn set_bandwidth(&mut self, v: u32) {
        self.bandwidth = v;
    }

    // uint32 bitrate = 4;


    pub fn get_bitrate(&self) -> u32 {
        self.bitrate
    }
    pub fn clear_bitrate(&mut self) {
        self.bitrate = 0;
    }

    // Param is passed by value, moved
    pub fn set_bitrate(&mut self, v: u32) {
        self.bitrate = v;
    }

    // repeated uint32 spreading_factors = 5;


    pub fn get_spreading_factors(&self) -> &[u32] {
        &self.spreading_factors
    }
    pub fn clear_spreading_factors(&mut self) {
        self.spreading_factors.clear();
    }

    // Param is passed by value, moved
    pub fn set_spreading_factors(&mut self, v: ::std::vec::Vec<u32>) {
        self.spreading_factors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_spreading_factors(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.spreading_factors
    }

    // Take field
    pub fn take_spreading_factors(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.spreading_factors, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GatewayProfileExtraChannel {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.modulation, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frequency = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bandwidth = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bitrate = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.spreading_factors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.modulation != super::common::Modulation::LORA {
            my_size += ::protobuf::rt::enum_size(1, self.modulation);
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(2, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bandwidth != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bandwidth, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bitrate != 0 {
            my_size += ::protobuf::rt::value_size(4, self.bitrate, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.spreading_factors {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.modulation != super::common::Modulation::LORA {
            os.write_enum(1, self.modulation.value())?;
        }
        if self.frequency != 0 {
            os.write_uint32(2, self.frequency)?;
        }
        if self.bandwidth != 0 {
            os.write_uint32(3, self.bandwidth)?;
        }
        if self.bitrate != 0 {
            os.write_uint32(4, self.bitrate)?;
        }
        for v in &self.spreading_factors {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GatewayProfileExtraChannel {
        GatewayProfileExtraChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::Modulation>>(
                    "modulation",
                    |m: &GatewayProfileExtraChannel| { &m.modulation },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.modulation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "frequency",
                    |m: &GatewayProfileExtraChannel| { &m.frequency },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.frequency },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "bandwidth",
                    |m: &GatewayProfileExtraChannel| { &m.bandwidth },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.bandwidth },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "bitrate",
                    |m: &GatewayProfileExtraChannel| { &m.bitrate },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.bitrate },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "spreading_factors",
                    |m: &GatewayProfileExtraChannel| { &m.spreading_factors },
                    |m: &mut GatewayProfileExtraChannel| { &mut m.spreading_factors },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GatewayProfileExtraChannel>(
                    "GatewayProfileExtraChannel",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GatewayProfileExtraChannel {
        static mut instance: ::protobuf::lazy::Lazy<GatewayProfileExtraChannel> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GatewayProfileExtraChannel,
        };
        unsafe {
            instance.get(GatewayProfileExtraChannel::new)
        }
    }
}

impl ::protobuf::Clear for GatewayProfileExtraChannel {
    fn clear(&mut self) {
        self.modulation = super::common::Modulation::LORA;
        self.frequency = 0;
        self.bandwidth = 0;
        self.bitrate = 0;
        self.spreading_factors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GatewayProfileExtraChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GatewayProfileExtraChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateGatewayProfileRequest {
    // message fields
    pub gateway_profile: ::protobuf::SingularPtrField<GatewayProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateGatewayProfileRequest {
    fn default() -> &'a CreateGatewayProfileRequest {
        <CreateGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateGatewayProfileRequest {
    pub fn new() -> CreateGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // .api.GatewayProfile gateway_profile = 1;


    pub fn get_gateway_profile(&self) -> &GatewayProfile {
        self.gateway_profile.as_ref().unwrap_or_else(|| GatewayProfile::default_instance())
    }
    pub fn clear_gateway_profile(&mut self) {
        self.gateway_profile.clear();
    }

    pub fn has_gateway_profile(&self) -> bool {
        self.gateway_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile(&mut self, v: GatewayProfile) {
        self.gateway_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile(&mut self) -> &mut GatewayProfile {
        if self.gateway_profile.is_none() {
            self.gateway_profile.set_default();
        }
        self.gateway_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway_profile(&mut self) -> GatewayProfile {
        self.gateway_profile.take().unwrap_or_else(|| GatewayProfile::new())
    }
}

impl ::protobuf::Message for CreateGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateGatewayProfileRequest {
        CreateGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfile>>(
                    "gateway_profile",
                    |m: &CreateGatewayProfileRequest| { &m.gateway_profile },
                    |m: &mut CreateGatewayProfileRequest| { &mut m.gateway_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateGatewayProfileRequest>(
                    "CreateGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateGatewayProfileRequest,
        };
        unsafe {
            instance.get(CreateGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateGatewayProfileRequest {
    fn clear(&mut self) {
        self.gateway_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateGatewayProfileResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateGatewayProfileResponse {
    fn default() -> &'a CreateGatewayProfileResponse {
        <CreateGatewayProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateGatewayProfileResponse {
    pub fn new() -> CreateGatewayProfileResponse {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateGatewayProfileResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateGatewayProfileResponse {
        CreateGatewayProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CreateGatewayProfileResponse| { &m.id },
                    |m: &mut CreateGatewayProfileResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateGatewayProfileResponse>(
                    "CreateGatewayProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateGatewayProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateGatewayProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateGatewayProfileResponse,
        };
        unsafe {
            instance.get(CreateGatewayProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateGatewayProfileResponse {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateGatewayProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateGatewayProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayProfileRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayProfileRequest {
    fn default() -> &'a GetGatewayProfileRequest {
        <GetGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayProfileRequest {
    pub fn new() -> GetGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayProfileRequest {
        GetGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &GetGatewayProfileRequest| { &m.id },
                    |m: &mut GetGatewayProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayProfileRequest>(
                    "GetGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayProfileRequest,
        };
        unsafe {
            instance.get(GetGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetGatewayProfileResponse {
    // message fields
    pub gateway_profile: ::protobuf::SingularPtrField<GatewayProfile>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetGatewayProfileResponse {
    fn default() -> &'a GetGatewayProfileResponse {
        <GetGatewayProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetGatewayProfileResponse {
    pub fn new() -> GetGatewayProfileResponse {
        ::std::default::Default::default()
    }

    // .api.GatewayProfile gateway_profile = 1;


    pub fn get_gateway_profile(&self) -> &GatewayProfile {
        self.gateway_profile.as_ref().unwrap_or_else(|| GatewayProfile::default_instance())
    }
    pub fn clear_gateway_profile(&mut self) {
        self.gateway_profile.clear();
    }

    pub fn has_gateway_profile(&self) -> bool {
        self.gateway_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile(&mut self, v: GatewayProfile) {
        self.gateway_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile(&mut self) -> &mut GatewayProfile {
        if self.gateway_profile.is_none() {
            self.gateway_profile.set_default();
        }
        self.gateway_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway_profile(&mut self) -> GatewayProfile {
        self.gateway_profile.take().unwrap_or_else(|| GatewayProfile::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetGatewayProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway_profile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetGatewayProfileResponse {
        GetGatewayProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfile>>(
                    "gateway_profile",
                    |m: &GetGatewayProfileResponse| { &m.gateway_profile },
                    |m: &mut GetGatewayProfileResponse| { &mut m.gateway_profile },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetGatewayProfileResponse| { &m.created_at },
                    |m: &mut GetGatewayProfileResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetGatewayProfileResponse| { &m.updated_at },
                    |m: &mut GetGatewayProfileResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetGatewayProfileResponse>(
                    "GetGatewayProfileResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetGatewayProfileResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetGatewayProfileResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetGatewayProfileResponse,
        };
        unsafe {
            instance.get(GetGatewayProfileResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetGatewayProfileResponse {
    fn clear(&mut self) {
        self.gateway_profile.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetGatewayProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetGatewayProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateGatewayProfileRequest {
    // message fields
    pub gateway_profile: ::protobuf::SingularPtrField<GatewayProfile>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateGatewayProfileRequest {
    fn default() -> &'a UpdateGatewayProfileRequest {
        <UpdateGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateGatewayProfileRequest {
    pub fn new() -> UpdateGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // .api.GatewayProfile gateway_profile = 1;


    pub fn get_gateway_profile(&self) -> &GatewayProfile {
        self.gateway_profile.as_ref().unwrap_or_else(|| GatewayProfile::default_instance())
    }
    pub fn clear_gateway_profile(&mut self) {
        self.gateway_profile.clear();
    }

    pub fn has_gateway_profile(&self) -> bool {
        self.gateway_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gateway_profile(&mut self, v: GatewayProfile) {
        self.gateway_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway_profile(&mut self) -> &mut GatewayProfile {
        if self.gateway_profile.is_none() {
            self.gateway_profile.set_default();
        }
        self.gateway_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_gateway_profile(&mut self) -> GatewayProfile {
        self.gateway_profile.take().unwrap_or_else(|| GatewayProfile::new())
    }
}

impl ::protobuf::Message for UpdateGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.gateway_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gateway_profile)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gateway_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gateway_profile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateGatewayProfileRequest {
        UpdateGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfile>>(
                    "gateway_profile",
                    |m: &UpdateGatewayProfileRequest| { &m.gateway_profile },
                    |m: &mut UpdateGatewayProfileRequest| { &mut m.gateway_profile },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateGatewayProfileRequest>(
                    "UpdateGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateGatewayProfileRequest,
        };
        unsafe {
            instance.get(UpdateGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateGatewayProfileRequest {
    fn clear(&mut self) {
        self.gateway_profile.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteGatewayProfileRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteGatewayProfileRequest {
    fn default() -> &'a DeleteGatewayProfileRequest {
        <DeleteGatewayProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteGatewayProfileRequest {
    pub fn new() -> DeleteGatewayProfileRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteGatewayProfileRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteGatewayProfileRequest {
        DeleteGatewayProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &DeleteGatewayProfileRequest| { &m.id },
                    |m: &mut DeleteGatewayProfileRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteGatewayProfileRequest>(
                    "DeleteGatewayProfileRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteGatewayProfileRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteGatewayProfileRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteGatewayProfileRequest,
        };
        unsafe {
            instance.get(DeleteGatewayProfileRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteGatewayProfileRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteGatewayProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteGatewayProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListGatewayProfilesRequest {
    // message fields
    pub limit: i64,
    pub offset: i64,
    pub network_server_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListGatewayProfilesRequest {
    fn default() -> &'a ListGatewayProfilesRequest {
        <ListGatewayProfilesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListGatewayProfilesRequest {
    pub fn new() -> ListGatewayProfilesRequest {
        ::std::default::Default::default()
    }

    // int64 limit = 1;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // int64 offset = 2;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // int64 network_server_id = 3;


    pub fn get_network_server_id(&self) -> i64 {
        self.network_server_id
    }
    pub fn clear_network_server_id(&mut self) {
        self.network_server_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_network_server_id(&mut self, v: i64) {
        self.network_server_id = v;
    }
}

impl ::protobuf::Message for ListGatewayProfilesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.network_server_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.network_server_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.network_server_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit != 0 {
            os.write_int64(1, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int64(2, self.offset)?;
        }
        if self.network_server_id != 0 {
            os.write_int64(3, self.network_server_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListGatewayProfilesRequest {
        ListGatewayProfilesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &ListGatewayProfilesRequest| { &m.limit },
                    |m: &mut ListGatewayProfilesRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offset",
                    |m: &ListGatewayProfilesRequest| { &m.offset },
                    |m: &mut ListGatewayProfilesRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "network_server_id",
                    |m: &ListGatewayProfilesRequest| { &m.network_server_id },
                    |m: &mut ListGatewayProfilesRequest| { &mut m.network_server_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListGatewayProfilesRequest>(
                    "ListGatewayProfilesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListGatewayProfilesRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListGatewayProfilesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListGatewayProfilesRequest,
        };
        unsafe {
            instance.get(ListGatewayProfilesRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListGatewayProfilesRequest {
    fn clear(&mut self) {
        self.limit = 0;
        self.offset = 0;
        self.network_server_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListGatewayProfilesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListGatewayProfilesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListGatewayProfilesResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<GatewayProfileListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListGatewayProfilesResponse {
    fn default() -> &'a ListGatewayProfilesResponse {
        <ListGatewayProfilesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListGatewayProfilesResponse {
    pub fn new() -> ListGatewayProfilesResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.GatewayProfileListItem result = 2;


    pub fn get_result(&self) -> &[GatewayProfileListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<GatewayProfileListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<GatewayProfileListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<GatewayProfileListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListGatewayProfilesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListGatewayProfilesResponse {
        ListGatewayProfilesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListGatewayProfilesResponse| { &m.total_count },
                    |m: &mut ListGatewayProfilesResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GatewayProfileListItem>>(
                    "result",
                    |m: &ListGatewayProfilesResponse| { &m.result },
                    |m: &mut ListGatewayProfilesResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListGatewayProfilesResponse>(
                    "ListGatewayProfilesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListGatewayProfilesResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListGatewayProfilesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListGatewayProfilesResponse,
        };
        unsafe {
            instance.get(ListGatewayProfilesResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListGatewayProfilesResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListGatewayProfilesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListGatewayProfilesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$as/external/api/gatewayProfile.proto\x12\x03api\x1a\x1cgoogle/api/ann\
    otations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/prot\
    obuf/empty.proto\x1a\x13common/common.proto\"\xc4\x01\n\x0eGatewayProfil\
    e\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x12*\n\x11network_server_id\x18\x03\x20\x01(\x03R\
    \x0fnetworkServerID\x12\x1a\n\x08channels\x18\x04\x20\x03(\rR\x08channel\
    s\x12F\n\x0eextra_channels\x18\x05\x20\x03(\x0b2\x1f.api.GatewayProfileE\
    xtraChannelR\rextraChannels\"\x8e\x02\n\x16GatewayProfileListItem\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01\
    (\tR\x04name\x12*\n\x11network_server_id\x18\x03\x20\x01(\x03R\x0fnetwor\
    kServerID\x12.\n\x13network_server_name\x18\x07\x20\x01(\tR\x11networkSe\
    rverName\x129\n\ncreated_at\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.Ti\
    mestampR\tcreatedAt\x129\n\nupdated_at\x18\x06\x20\x01(\x0b2\x1a.google.\
    protobuf.TimestampR\tupdatedAt\"\xd3\x01\n\x1aGatewayProfileExtraChannel\
    \x122\n\nmodulation\x18\x01\x20\x01(\x0e2\x12.common.ModulationR\nmodula\
    tion\x12\x1c\n\tfrequency\x18\x02\x20\x01(\rR\tfrequency\x12\x1c\n\tband\
    width\x18\x03\x20\x01(\rR\tbandwidth\x12\x18\n\x07bitrate\x18\x04\x20\
    \x01(\rR\x07bitrate\x12+\n\x11spreading_factors\x18\x05\x20\x03(\rR\x10s\
    preadingFactors\"[\n\x1bCreateGatewayProfileRequest\x12<\n\x0fgateway_pr\
    ofile\x18\x01\x20\x01(\x0b2\x13.api.GatewayProfileR\x0egatewayProfile\".\
    \n\x1cCreateGatewayProfileResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\"*\n\x18GetGatewayProfileRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \tR\x02id\"\xcf\x01\n\x19GetGatewayProfileResponse\x12<\n\x0fgateway_pro\
    file\x18\x01\x20\x01(\x0b2\x13.api.GatewayProfileR\x0egatewayProfile\x12\
    9\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tcr\
    eatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.Tim\
    estampR\tupdatedAt\"[\n\x1bUpdateGatewayProfileRequest\x12<\n\x0fgateway\
    _profile\x18\x01\x20\x01(\x0b2\x13.api.GatewayProfileR\x0egatewayProfile\
    \"-\n\x1bDeleteGatewayProfileRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\"v\n\x1aListGatewayProfilesRequest\x12\x14\n\x05limit\x18\x01\x20\
    \x01(\x03R\x05limit\x12\x16\n\x06offset\x18\x02\x20\x01(\x03R\x06offset\
    \x12*\n\x11network_server_id\x18\x03\x20\x01(\x03R\x0fnetworkServerID\"s\
    \n\x1bListGatewayProfilesResponse\x12\x1f\n\x0btotal_count\x18\x01\x20\
    \x01(\x03R\ntotalCount\x123\n\x06result\x18\x02\x20\x03(\x0b2\x1b.api.Ga\
    tewayProfileListItemR\x06result2\xbf\x04\n\x15GatewayProfileService\x12o\
    \n\x06Create\x12\x20.api.CreateGatewayProfileRequest\x1a!.api.CreateGate\
    wayProfileResponse\"\x20\x82\xd3\xe4\x93\x02\x1a\"\x15/api/gateway-profi\
    les:\x01*\x12h\n\x03Get\x12\x1d.api.GetGatewayProfileRequest\x1a\x1e.api\
    .GetGatewayProfileResponse\"\"\x82\xd3\xe4\x93\x02\x1c\x12\x1a/api/gatew\
    ay-profiles/{id}\x12y\n\x06Update\x12\x20.api.UpdateGatewayProfileReques\
    t\x1a\x16.google.protobuf.Empty\"5\x82\xd3\xe4\x93\x02/\x1a*/api/gateway\
    -profiles/{gateway_profile.id}:\x01*\x12f\n\x06Delete\x12\x20.api.Delete\
    GatewayProfileRequest\x1a\x16.google.protobuf.Empty\"\"\x82\xd3\xe4\x93\
    \x02\x1c*\x1a/api/gateway-profiles/{id}\x12h\n\x04List\x12\x1f.api.ListG\
    atewayProfilesRequest\x1a\x20.api.ListGatewayProfilesResponse\"\x1d\x82\
    \xd3\xe4\x93\x02\x17\x12\x15/api/gateway-profilesB9Z7github.com/brocaar/\
    chirpstack-api/go/v3/as/external/apiJ\xe5\"\n\x07\x12\x05\0\0\xa1\x01\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0b\
    \n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\n\t\n\
    \x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\x03\x01\x12\x03\x07\x07(\n\t\n\x02\
    \x03\x02\x12\x03\x08\x07$\n\t\n\x02\x03\x03\x12\x03\t\x07\x1c\nQ\n\x02\
    \x06\0\x12\x04\r\02\x01\x1aE\x20GatewayProfileService\x20is\x20the\x20se\
    rvice\x20managing\x20the\x20gateway-profiles.\n\n\n\n\x03\x06\0\x01\x12\
    \x03\r\x08\x1d\n9\n\x04\x06\0\x02\0\x12\x04\x0f\x08\x14\t\x1a+\x20Create\
    \x20creates\x20the\x20given\x20gateway-profile.\n\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03\x0f\x0c\x12\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0f\x13.\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0f9U\n\r\n\x05\x06\0\x02\0\x04\x12\
    \x04\x10\x10\x13\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\xbc\"\x12\x04\x10\
    \x10\x13\x12\nF\n\x04\x06\0\x02\x01\x12\x04\x17\x08\x1b\t\x1a8\x20Get\
    \x20returns\x20the\x20gateway-profile\x20matching\x20the\x20given\x20id.\
    \n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x17\x0c\x0f\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03\x17\x10(\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x173\
    L\n\r\n\x05\x06\0\x02\x01\x04\x12\x04\x18\x10\x1a\x12\n\x11\n\t\x06\0\
    \x02\x01\x04\xb0\xca\xbc\"\x12\x04\x18\x10\x1a\x12\n9\n\x04\x06\0\x02\
    \x02\x12\x04\x1e\x08#\t\x1a+\x20Update\x20updates\x20the\x20given\x20gat\
    eway-profile.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1e\x0c\x12\n\x0c\
    \n\x05\x06\0\x02\x02\x02\x12\x03\x1e\x13.\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x03\x1e9N\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\x1f\x10\"\x12\n\x11\n\
    \t\x06\0\x02\x02\x04\xb0\xca\xbc\"\x12\x04\x1f\x10\"\x12\nI\n\x04\x06\0\
    \x02\x03\x12\x04&\x08*\t\x1a;\x20Delete\x20deletes\x20the\x20gateway-pro\
    file\x20matching\x20the\x20given\x20id.\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03&\x0c\x12\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03&\x13.\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03&9N\n\r\n\x05\x06\0\x02\x03\x04\x12\x04'\
    \x10)\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04'\x10)\x12\n;\
    \n\x04\x06\0\x02\x04\x12\x04-\x081\t\x1a-\x20List\x20returns\x20the\x20e\
    xisting\x20gateway-profiles.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03-\
    \x0c\x10\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03-\x11+\n\x0c\n\x05\x06\0\
    \x02\x04\x03\x12\x03-6Q\n\r\n\x05\x06\0\x02\x04\x04\x12\x04.\x100\x12\n\
    \x11\n\t\x06\0\x02\x04\x04\xb0\xca\xbc\"\x12\x04.\x100\x12\n\n\n\x02\x04\
    \0\x12\x044\0E\x01\n\n\n\x03\x04\0\x01\x12\x034\x08\x16\n0\n\x04\x04\0\
    \x02\0\x12\x036\x04\x12\x1a#\x20Gateway-profile\x20ID\x20(UUID\x20string\
    ).\n\n\r\n\x05\x04\0\x02\0\x04\x12\x046\x044\x18\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x036\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x036\x0b\r\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x036\x10\x11\n+\n\x04\x04\0\x02\x01\x12\x039\
    \x04\x14\x1a\x1e\x20Name\x20of\x20the\x20gateway-profile.\n\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x049\x046\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\
    \x039\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x039\x0b\x0f\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x039\x12\x13\n8\n\x04\x04\0\x02\x02\x12\x03<\x04@\
    \x1a+\x20Network-server\x20ID\x20of\x20the\x20gateway-profile.\n\n\r\n\
    \x05\x04\0\x02\x02\x04\x12\x04<\x049\x14\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03<\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03<\n\x1b\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03<\x1e\x1f\n\x0c\n\x05\x04\0\x02\x02\x08\x12\
    \x03<\x20?\n\x0c\n\x05\x04\0\x02\x02\n\x12\x03<->\n\x86\x01\n\x04\x04\0\
    \x02\x03\x12\x03@\x04!\x1ay\x20Default\x20channels\x20(channels\x20speci\
    fied\x20by\x20the\x20LoRaWAN\x20Regional\x20Parameters\n\x20specificatio\
    n)\x20enabled\x20for\x20this\x20configuration.\n\n\x0c\n\x05\x04\0\x02\
    \x03\x04\x12\x03@\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03@\r\x13\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03@\x14\x1c\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03@\x1f\x20\n\x7f\n\x04\x04\0\x02\x04\x12\x03D\x04;\x1ar\x20Ex\
    tra\x20channels\x20added\x20to\x20the\x20channel-configuration\x20(in\
    \x20case\x20the\x20LoRaWAN\n\x20region\x20supports\x20adding\x20custom\
    \x20channels).\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03D\x04\x0c\n\x0c\n\
    \x05\x04\0\x02\x04\x06\x12\x03D\r'\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    D(6\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03D9:\n\n\n\x02\x04\x01\x12\x04G\
    \0Y\x01\n\n\n\x03\x04\x01\x01\x12\x03G\x08\x1e\n0\n\x04\x04\x01\x02\0\
    \x12\x03I\x04\x12\x1a#\x20Gateway-profile\x20ID\x20(UUID\x20string).\n\n\
    \r\n\x05\x04\x01\x02\0\x04\x12\x04I\x04G\x20\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03I\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03I\x0b\r\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03I\x10\x11\n$\n\x04\x04\x01\x02\x01\x12\x03\
    L\x04\x14\x1a\x17\x20Gateway-profile\x20name,\n\n\r\n\x05\x04\x01\x02\
    \x01\x04\x12\x04L\x04I\x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03L\x04\
    \n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03L\x0b\x0f\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03L\x12\x13\nM\n\x04\x04\x01\x02\x02\x12\x03O\x04@\x1a\
    @\x20Network-server\x20ID\x20on\x20which\x20the\x20gateway-profile\x20is\
    \x20provisioned.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04O\x04L\x14\n\x0c\
    \n\x05\x04\x01\x02\x02\x05\x12\x03O\x04\t\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03O\n\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03O\x1e\x1f\n\
    \x0c\n\x05\x04\x01\x02\x02\x08\x12\x03O\x20?\n\x0c\n\x05\x04\x01\x02\x02\
    \n\x12\x03O->\n#\n\x04\x04\x01\x02\x03\x12\x03R\x04#\x1a\x16\x20Network-\
    server\x20name.\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04R\x04O@\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03R\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03R\x0b\x1e\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03R!\"\n$\n\x04\
    \x04\x01\x02\x04\x12\x03U\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\
    \n\r\n\x05\x04\x01\x02\x04\x04\x12\x04U\x04R#\n\x0c\n\x05\x04\x01\x02\
    \x04\x06\x12\x03U\x04\x1d\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03U\x1e(\
    \n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03U+,\n%\n\x04\x04\x01\x02\x05\x12\
    \x03X\x04-\x1a\x18\x20Last\x20update\x20timestamp.\n\n\r\n\x05\x04\x01\
    \x02\x05\x04\x12\x04X\x04U-\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03X\x04\
    \x1d\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03X\x1e(\n\x0c\n\x05\x04\x01\
    \x02\x05\x03\x12\x03X+,\n\n\n\x02\x04\x02\x12\x04[\0j\x01\n\n\n\x03\x04\
    \x02\x01\x12\x03[\x08\"\n\x1a\n\x04\x04\x02\x02\0\x12\x03]\x04%\x1a\r\
    \x20Modulation.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04]\x04[$\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x03]\x04\x15\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03]\x16\x20\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03]#$\n\x19\n\x04\x04\
    \x02\x02\x01\x12\x03`\x04\x19\x1a\x0c\x20Frequency.\n\n\r\n\x05\x04\x02\
    \x02\x01\x04\x12\x04`\x04]%\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03`\x04\
    \n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03`\x0b\x14\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03`\x17\x18\n\x19\n\x04\x04\x02\x02\x02\x12\x03c\x04\
    \x19\x1a\x0c\x20Bandwidth.\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04c\x04`\
    \x19\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03c\x04\n\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x03c\x0b\x14\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03c\
    \x17\x18\n3\n\x04\x04\x02\x02\x03\x12\x03f\x04\x17\x1a&\x20Bitrate\x20(i\
    n\x20case\x20of\x20FSK\x20modulation).\n\n\r\n\x05\x04\x02\x02\x03\x04\
    \x12\x04f\x04c\x19\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03f\x04\n\n\x0c\
    \n\x05\x04\x02\x02\x03\x01\x12\x03f\x0b\x12\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03f\x15\x16\n>\n\x04\x04\x02\x02\x04\x12\x03i\x04*\x1a1\x20Spr\
    eading\x20factors\x20(in\x20case\x20of\x20LoRa\x20modulation).\n\n\x0c\n\
    \x05\x04\x02\x02\x04\x04\x12\x03i\x04\x0c\n\x0c\n\x05\x04\x02\x02\x04\
    \x05\x12\x03i\r\x13\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03i\x14%\n\x0c\
    \n\x05\x04\x02\x02\x04\x03\x12\x03i()\n\n\n\x02\x04\x03\x12\x04l\0p\x01\
    \n\n\n\x03\x04\x03\x01\x12\x03l\x08#\n0\n\x04\x04\x03\x02\0\x12\x03n\x04\
    '\x1a#\x20Gateway-profile\x20object\x20to\x20create.\n\n\r\n\x05\x04\x03\
    \x02\0\x04\x12\x04n\x04l%\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03n\x04\x12\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03n\x13\"\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03n%&\n\n\n\x02\x04\x04\x12\x04r\0u\x01\n\n\n\x03\x04\x04\x01\
    \x12\x03r\x08$\n0\n\x04\x04\x04\x02\0\x12\x03t\x04\x12\x1a#\x20Gateway-p\
    rofile\x20ID\x20(UUID\x20string).\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04t\
    \x04r&\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03t\x04\n\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03t\x0b\r\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03t\x10\x11\
    \n\n\n\x02\x04\x05\x12\x04w\0z\x01\n\n\n\x03\x04\x05\x01\x12\x03w\x08\
    \x20\n0\n\x04\x04\x05\x02\0\x12\x03y\x04\x12\x1a#\x20Gateway-profile\x20\
    ID\x20(UUID\x20string).\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04y\x04w\"\n\
    \x0c\n\x05\x04\x05\x02\0\x05\x12\x03y\x04\n\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03y\x0b\r\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03y\x10\x11\n\x0b\
    \n\x02\x04\x06\x12\x05|\0\x85\x01\x01\n\n\n\x03\x04\x06\x01\x12\x03|\x08\
    !\n&\n\x04\x04\x06\x02\0\x12\x03~\x04'\x1a\x19\x20Gateway-profile\x20obj\
    ect.\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04~\x04|#\n\x0c\n\x05\x04\x06\
    \x02\0\x06\x12\x03~\x04\x12\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03~\x13\"\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03~%&\n%\n\x04\x04\x06\x02\x01\x12\
    \x04\x81\x01\x04-\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0e\n\x05\
    \x04\x06\x02\x01\x04\x12\x05\x81\x01\x04~'\n\r\n\x05\x04\x06\x02\x01\x06\
    \x12\x04\x81\x01\x04\x1d\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x81\x01\
    \x1e(\n\r\n\x05\x04\x06\x02\x01\x03\x12\x04\x81\x01+,\n&\n\x04\x04\x06\
    \x02\x02\x12\x04\x84\x01\x04-\x1a\x18\x20Last\x20update\x20timestamp.\n\
    \n\x0f\n\x05\x04\x06\x02\x02\x04\x12\x06\x84\x01\x04\x81\x01-\n\r\n\x05\
    \x04\x06\x02\x02\x06\x12\x04\x84\x01\x04\x1d\n\r\n\x05\x04\x06\x02\x02\
    \x01\x12\x04\x84\x01\x1e(\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\x84\x01+\
    ,\n\x0c\n\x02\x04\x07\x12\x06\x87\x01\0\x8a\x01\x01\n\x0b\n\x03\x04\x07\
    \x01\x12\x04\x87\x01\x08#\n1\n\x04\x04\x07\x02\0\x12\x04\x89\x01\x04'\
    \x1a#\x20Gateway-profile\x20object\x20to\x20update.\n\n\x0f\n\x05\x04\
    \x07\x02\0\x04\x12\x06\x89\x01\x04\x87\x01%\n\r\n\x05\x04\x07\x02\0\x06\
    \x12\x04\x89\x01\x04\x12\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\x89\x01\x13\
    \"\n\r\n\x05\x04\x07\x02\0\x03\x12\x04\x89\x01%&\n\x0c\n\x02\x04\x08\x12\
    \x06\x8c\x01\0\x8f\x01\x01\n\x0b\n\x03\x04\x08\x01\x12\x04\x8c\x01\x08#\
    \n1\n\x04\x04\x08\x02\0\x12\x04\x8e\x01\x04\x12\x1a#\x20Gateway-profile\
    \x20id\x20(UUID\x20string).\n\n\x0f\n\x05\x04\x08\x02\0\x04\x12\x06\x8e\
    \x01\x04\x8c\x01%\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x8e\x01\x04\n\n\r\
    \n\x05\x04\x08\x02\0\x01\x12\x04\x8e\x01\x0b\r\n\r\n\x05\x04\x08\x02\0\
    \x03\x12\x04\x8e\x01\x10\x11\n\x0c\n\x02\x04\t\x12\x06\x91\x01\0\x9a\x01\
    \x01\n\x0b\n\x03\x04\t\x01\x12\x04\x91\x01\x08\"\n.\n\x04\x04\t\x02\0\
    \x12\x04\x93\x01\x04\x14\x1a\x20\x20Max\x20number\x20of\x20items\x20to\
    \x20return.\n\n\x0f\n\x05\x04\t\x02\0\x04\x12\x06\x93\x01\x04\x91\x01$\n\
    \r\n\x05\x04\t\x02\0\x05\x12\x04\x93\x01\x04\t\n\r\n\x05\x04\t\x02\0\x01\
    \x12\x04\x93\x01\n\x0f\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x93\x01\x12\x13\
    \n:\n\x04\x04\t\x02\x01\x12\x04\x96\x01\x04\x15\x1a,\x20Offset\x20in\x20\
    the\x20result-set\x20(for\x20pagination).\n\n\x0f\n\x05\x04\t\x02\x01\
    \x04\x12\x06\x96\x01\x04\x93\x01\x14\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\
    \x96\x01\x04\t\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\x96\x01\n\x10\n\r\n\
    \x05\x04\t\x02\x01\x03\x12\x04\x96\x01\x13\x14\n:\n\x04\x04\t\x02\x02\
    \x12\x04\x99\x01\x04@\x1a,\x20Network-server\x20ID\x20to\x20filter\x20on\
    \x20(optional).\n\n\x0f\n\x05\x04\t\x02\x02\x04\x12\x06\x99\x01\x04\x96\
    \x01\x15\n\r\n\x05\x04\t\x02\x02\x05\x12\x04\x99\x01\x04\t\n\r\n\x05\x04\
    \t\x02\x02\x01\x12\x04\x99\x01\n\x1b\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\
    \x99\x01\x1e\x1f\n\r\n\x05\x04\t\x02\x02\x08\x12\x04\x99\x01\x20?\n\r\n\
    \x05\x04\t\x02\x02\n\x12\x04\x99\x01->\n\x0c\n\x02\x04\n\x12\x06\x9c\x01\
    \0\xa1\x01\x01\n\x0b\n\x03\x04\n\x01\x12\x04\x9c\x01\x08#\n1\n\x04\x04\n\
    \x02\0\x12\x04\x9e\x01\x04\x1a\x1a#\x20Total\x20number\x20of\x20gateway-\
    profiles.\n\n\x0f\n\x05\x04\n\x02\0\x04\x12\x06\x9e\x01\x04\x9c\x01%\n\r\
    \n\x05\x04\n\x02\0\x05\x12\x04\x9e\x01\x04\t\n\r\n\x05\x04\n\x02\0\x01\
    \x12\x04\x9e\x01\n\x15\n\r\n\x05\x04\n\x02\0\x03\x12\x04\x9e\x01\x18\x19\
    \n\x0c\n\x04\x04\n\x02\x01\x12\x04\xa0\x01\x04/\n\r\n\x05\x04\n\x02\x01\
    \x04\x12\x04\xa0\x01\x04\x0c\n\r\n\x05\x04\n\x02\x01\x06\x12\x04\xa0\x01\
    \r#\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xa0\x01$*\n\r\n\x05\x04\n\x02\
    \x01\x03\x12\x04\xa0\x01-.b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
