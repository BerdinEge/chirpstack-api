// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/user.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct User {
    // message fields
    pub id: i64,
    pub username: ::std::string::String,
    pub session_ttl: i32,
    pub is_admin: bool,
    pub is_active: bool,
    pub email: ::std::string::String,
    pub note: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a User {
    fn default() -> &'a User {
        <User as ::protobuf::Message>::default_instance()
    }
}

impl User {
    pub fn new() -> User {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // string username = 2;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // int32 session_ttl = 3;


    pub fn get_session_ttl(&self) -> i32 {
        self.session_ttl
    }
    pub fn clear_session_ttl(&mut self) {
        self.session_ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_ttl(&mut self, v: i32) {
        self.session_ttl = v;
    }

    // bool is_admin = 4;


    pub fn get_is_admin(&self) -> bool {
        self.is_admin
    }
    pub fn clear_is_admin(&mut self) {
        self.is_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_admin(&mut self, v: bool) {
        self.is_admin = v;
    }

    // bool is_active = 5;


    pub fn get_is_active(&self) -> bool {
        self.is_active
    }
    pub fn clear_is_active(&mut self) {
        self.is_active = false;
    }

    // Param is passed by value, moved
    pub fn set_is_active(&mut self, v: bool) {
        self.is_active = v;
    }

    // string email = 6;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // string note = 7;


    pub fn get_note(&self) -> &str {
        &self.note
    }
    pub fn clear_note(&mut self) {
        self.note.clear();
    }

    // Param is passed by value, moved
    pub fn set_note(&mut self, v: ::std::string::String) {
        self.note = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_note(&mut self) -> &mut ::std::string::String {
        &mut self.note
    }

    // Take field
    pub fn take_note(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.note, ::std::string::String::new())
    }
}

impl ::protobuf::Message for User {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.session_ttl = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_admin = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_active = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.note)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.username);
        }
        if self.session_ttl != 0 {
            my_size += ::protobuf::rt::value_size(3, self.session_ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_admin != false {
            my_size += 2;
        }
        if self.is_active != false {
            my_size += 2;
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.email);
        }
        if !self.note.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.note);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.username.is_empty() {
            os.write_string(2, &self.username)?;
        }
        if self.session_ttl != 0 {
            os.write_int32(3, self.session_ttl)?;
        }
        if self.is_admin != false {
            os.write_bool(4, self.is_admin)?;
        }
        if self.is_active != false {
            os.write_bool(5, self.is_active)?;
        }
        if !self.email.is_empty() {
            os.write_string(6, &self.email)?;
        }
        if !self.note.is_empty() {
            os.write_string(7, &self.note)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> User {
        User::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &User| { &m.id },
                    |m: &mut User| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "username",
                    |m: &User| { &m.username },
                    |m: &mut User| { &mut m.username },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "session_ttl",
                    |m: &User| { &m.session_ttl },
                    |m: &mut User| { &mut m.session_ttl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_admin",
                    |m: &User| { &m.is_admin },
                    |m: &mut User| { &mut m.is_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_active",
                    |m: &User| { &m.is_active },
                    |m: &mut User| { &mut m.is_active },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "email",
                    |m: &User| { &m.email },
                    |m: &mut User| { &mut m.email },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "note",
                    |m: &User| { &m.note },
                    |m: &mut User| { &mut m.note },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<User>(
                    "User",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static User {
        static mut instance: ::protobuf::lazy::Lazy<User> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const User,
        };
        unsafe {
            instance.get(User::new)
        }
    }
}

impl ::protobuf::Clear for User {
    fn clear(&mut self) {
        self.id = 0;
        self.username.clear();
        self.session_ttl = 0;
        self.is_admin = false;
        self.is_active = false;
        self.email.clear();
        self.note.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for User {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for User {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UserListItem {
    // message fields
    pub id: i64,
    pub username: ::std::string::String,
    pub session_ttl: i32,
    pub is_admin: bool,
    pub is_active: bool,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserListItem {
    fn default() -> &'a UserListItem {
        <UserListItem as ::protobuf::Message>::default_instance()
    }
}

impl UserListItem {
    pub fn new() -> UserListItem {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // string username = 2;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // int32 session_ttl = 3;


    pub fn get_session_ttl(&self) -> i32 {
        self.session_ttl
    }
    pub fn clear_session_ttl(&mut self) {
        self.session_ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_ttl(&mut self, v: i32) {
        self.session_ttl = v;
    }

    // bool is_admin = 4;


    pub fn get_is_admin(&self) -> bool {
        self.is_admin
    }
    pub fn clear_is_admin(&mut self) {
        self.is_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_admin(&mut self, v: bool) {
        self.is_admin = v;
    }

    // bool is_active = 5;


    pub fn get_is_active(&self) -> bool {
        self.is_active
    }
    pub fn clear_is_active(&mut self) {
        self.is_active = false;
    }

    // Param is passed by value, moved
    pub fn set_is_active(&mut self, v: bool) {
        self.is_active = v;
    }

    // .google.protobuf.Timestamp created_at = 8;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 9;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for UserListItem {
    fn is_initialized(&self) -> bool {
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.session_ttl = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_admin = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_active = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.username);
        }
        if self.session_ttl != 0 {
            my_size += ::protobuf::rt::value_size(3, self.session_ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_admin != false {
            my_size += 2;
        }
        if self.is_active != false {
            my_size += 2;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.username.is_empty() {
            os.write_string(2, &self.username)?;
        }
        if self.session_ttl != 0 {
            os.write_int32(3, self.session_ttl)?;
        }
        if self.is_admin != false {
            os.write_bool(4, self.is_admin)?;
        }
        if self.is_active != false {
            os.write_bool(5, self.is_active)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserListItem {
        UserListItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &UserListItem| { &m.id },
                    |m: &mut UserListItem| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "username",
                    |m: &UserListItem| { &m.username },
                    |m: &mut UserListItem| { &mut m.username },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "session_ttl",
                    |m: &UserListItem| { &m.session_ttl },
                    |m: &mut UserListItem| { &mut m.session_ttl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_admin",
                    |m: &UserListItem| { &m.is_admin },
                    |m: &mut UserListItem| { &mut m.is_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_active",
                    |m: &UserListItem| { &m.is_active },
                    |m: &mut UserListItem| { &mut m.is_active },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &UserListItem| { &m.created_at },
                    |m: &mut UserListItem| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &UserListItem| { &m.updated_at },
                    |m: &mut UserListItem| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UserListItem>(
                    "UserListItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UserListItem {
        static mut instance: ::protobuf::lazy::Lazy<UserListItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UserListItem,
        };
        unsafe {
            instance.get(UserListItem::new)
        }
    }
}

impl ::protobuf::Clear for UserListItem {
    fn clear(&mut self) {
        self.id = 0;
        self.username.clear();
        self.session_ttl = 0;
        self.is_admin = false;
        self.is_active = false;
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserListItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserListItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UserOrganization {
    // message fields
    pub organization_id: i64,
    pub is_admin: bool,
    pub is_device_admin: bool,
    pub is_gateway_admin: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UserOrganization {
    fn default() -> &'a UserOrganization {
        <UserOrganization as ::protobuf::Message>::default_instance()
    }
}

impl UserOrganization {
    pub fn new() -> UserOrganization {
        ::std::default::Default::default()
    }

    // int64 organization_id = 1;


    pub fn get_organization_id(&self) -> i64 {
        self.organization_id
    }
    pub fn clear_organization_id(&mut self) {
        self.organization_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_organization_id(&mut self, v: i64) {
        self.organization_id = v;
    }

    // bool is_admin = 2;


    pub fn get_is_admin(&self) -> bool {
        self.is_admin
    }
    pub fn clear_is_admin(&mut self) {
        self.is_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_admin(&mut self, v: bool) {
        self.is_admin = v;
    }

    // bool is_device_admin = 3;


    pub fn get_is_device_admin(&self) -> bool {
        self.is_device_admin
    }
    pub fn clear_is_device_admin(&mut self) {
        self.is_device_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_device_admin(&mut self, v: bool) {
        self.is_device_admin = v;
    }

    // bool is_gateway_admin = 4;


    pub fn get_is_gateway_admin(&self) -> bool {
        self.is_gateway_admin
    }
    pub fn clear_is_gateway_admin(&mut self) {
        self.is_gateway_admin = false;
    }

    // Param is passed by value, moved
    pub fn set_is_gateway_admin(&mut self, v: bool) {
        self.is_gateway_admin = v;
    }
}

impl ::protobuf::Message for UserOrganization {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.organization_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_admin = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_device_admin = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_gateway_admin = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.organization_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.organization_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_admin != false {
            my_size += 2;
        }
        if self.is_device_admin != false {
            my_size += 2;
        }
        if self.is_gateway_admin != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.organization_id != 0 {
            os.write_int64(1, self.organization_id)?;
        }
        if self.is_admin != false {
            os.write_bool(2, self.is_admin)?;
        }
        if self.is_device_admin != false {
            os.write_bool(3, self.is_device_admin)?;
        }
        if self.is_gateway_admin != false {
            os.write_bool(4, self.is_gateway_admin)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UserOrganization {
        UserOrganization::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "organization_id",
                    |m: &UserOrganization| { &m.organization_id },
                    |m: &mut UserOrganization| { &mut m.organization_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_admin",
                    |m: &UserOrganization| { &m.is_admin },
                    |m: &mut UserOrganization| { &mut m.is_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_device_admin",
                    |m: &UserOrganization| { &m.is_device_admin },
                    |m: &mut UserOrganization| { &mut m.is_device_admin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_gateway_admin",
                    |m: &UserOrganization| { &m.is_gateway_admin },
                    |m: &mut UserOrganization| { &mut m.is_gateway_admin },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UserOrganization>(
                    "UserOrganization",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UserOrganization {
        static mut instance: ::protobuf::lazy::Lazy<UserOrganization> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UserOrganization,
        };
        unsafe {
            instance.get(UserOrganization::new)
        }
    }
}

impl ::protobuf::Clear for UserOrganization {
    fn clear(&mut self) {
        self.organization_id = 0;
        self.is_admin = false;
        self.is_device_admin = false;
        self.is_gateway_admin = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserOrganization {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserOrganization {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateUserRequest {
    // message fields
    pub user: ::protobuf::SingularPtrField<User>,
    pub password: ::std::string::String,
    pub organizations: ::protobuf::RepeatedField<UserOrganization>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateUserRequest {
    fn default() -> &'a CreateUserRequest {
        <CreateUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateUserRequest {
    pub fn new() -> CreateUserRequest {
        ::std::default::Default::default()
    }

    // .api.User user = 1;


    pub fn get_user(&self) -> &User {
        self.user.as_ref().unwrap_or_else(|| User::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: User) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut User {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> User {
        self.user.take().unwrap_or_else(|| User::new())
    }

    // string password = 2;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }

    // repeated .api.UserOrganization organizations = 3;


    pub fn get_organizations(&self) -> &[UserOrganization] {
        &self.organizations
    }
    pub fn clear_organizations(&mut self) {
        self.organizations.clear();
    }

    // Param is passed by value, moved
    pub fn set_organizations(&mut self, v: ::protobuf::RepeatedField<UserOrganization>) {
        self.organizations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_organizations(&mut self) -> &mut ::protobuf::RepeatedField<UserOrganization> {
        &mut self.organizations
    }

    // Take field
    pub fn take_organizations(&mut self) -> ::protobuf::RepeatedField<UserOrganization> {
        ::std::mem::replace(&mut self.organizations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateUserRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.organizations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.organizations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        for value in &self.organizations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        for v in &self.organizations {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateUserRequest {
        CreateUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<User>>(
                    "user",
                    |m: &CreateUserRequest| { &m.user },
                    |m: &mut CreateUserRequest| { &mut m.user },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "password",
                    |m: &CreateUserRequest| { &m.password },
                    |m: &mut CreateUserRequest| { &mut m.password },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserOrganization>>(
                    "organizations",
                    |m: &CreateUserRequest| { &m.organizations },
                    |m: &mut CreateUserRequest| { &mut m.organizations },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateUserRequest>(
                    "CreateUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateUserRequest,
        };
        unsafe {
            instance.get(CreateUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateUserRequest {
    fn clear(&mut self) {
        self.user.clear();
        self.password.clear();
        self.organizations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateUserResponse {
    // message fields
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateUserResponse {
    fn default() -> &'a CreateUserResponse {
        <CreateUserResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateUserResponse {
    pub fn new() -> CreateUserResponse {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for CreateUserResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateUserResponse {
        CreateUserResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &CreateUserResponse| { &m.id },
                    |m: &mut CreateUserResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateUserResponse>(
                    "CreateUserResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateUserResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateUserResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateUserResponse,
        };
        unsafe {
            instance.get(CreateUserResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateUserResponse {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateUserResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateUserResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetUserRequest {
    // message fields
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetUserRequest {
    fn default() -> &'a GetUserRequest {
        <GetUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetUserRequest {
    pub fn new() -> GetUserRequest {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for GetUserRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetUserRequest {
        GetUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &GetUserRequest| { &m.id },
                    |m: &mut GetUserRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetUserRequest>(
                    "GetUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetUserRequest,
        };
        unsafe {
            instance.get(GetUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetUserRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetUserResponse {
    // message fields
    pub user: ::protobuf::SingularPtrField<User>,
    pub created_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub updated_at: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetUserResponse {
    fn default() -> &'a GetUserResponse {
        <GetUserResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetUserResponse {
    pub fn new() -> GetUserResponse {
        ::std::default::Default::default()
    }

    // .api.User user = 1;


    pub fn get_user(&self) -> &User {
        self.user.as_ref().unwrap_or_else(|| User::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: User) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut User {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> User {
        self.user.take().unwrap_or_else(|| User::new())
    }

    // .google.protobuf.Timestamp created_at = 2;


    pub fn get_created_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.created_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_created_at(&mut self) {
        self.created_at.clear();
    }

    pub fn has_created_at(&self) -> bool {
        self.created_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.created_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_created_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.created_at.is_none() {
            self.created_at.set_default();
        }
        self.created_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_created_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.created_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp updated_at = 3;


    pub fn get_updated_at(&self) -> &::protobuf::well_known_types::Timestamp {
        self.updated_at.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at.clear();
    }

    pub fn has_updated_at(&self) -> bool {
        self.updated_at.is_some()
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.updated_at = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_updated_at(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.updated_at.is_none() {
            self.updated_at.set_default();
        }
        self.updated_at.as_mut().unwrap()
    }

    // Take field
    pub fn take_updated_at(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.updated_at.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for GetUserResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.created_at {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.updated_at {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.created_at)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.updated_at)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.created_at.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.updated_at.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetUserResponse {
        GetUserResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<User>>(
                    "user",
                    |m: &GetUserResponse| { &m.user },
                    |m: &mut GetUserResponse| { &mut m.user },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "created_at",
                    |m: &GetUserResponse| { &m.created_at },
                    |m: &mut GetUserResponse| { &mut m.created_at },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "updated_at",
                    |m: &GetUserResponse| { &m.updated_at },
                    |m: &mut GetUserResponse| { &mut m.updated_at },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetUserResponse>(
                    "GetUserResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetUserResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetUserResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetUserResponse,
        };
        unsafe {
            instance.get(GetUserResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetUserResponse {
    fn clear(&mut self) {
        self.user.clear();
        self.created_at.clear();
        self.updated_at.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetUserResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateUserRequest {
    // message fields
    pub user: ::protobuf::SingularPtrField<User>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateUserRequest {
    fn default() -> &'a UpdateUserRequest {
        <UpdateUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateUserRequest {
    pub fn new() -> UpdateUserRequest {
        ::std::default::Default::default()
    }

    // .api.User user = 1;


    pub fn get_user(&self) -> &User {
        self.user.as_ref().unwrap_or_else(|| User::default_instance())
    }
    pub fn clear_user(&mut self) {
        self.user.clear();
    }

    pub fn has_user(&self) -> bool {
        self.user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user(&mut self, v: User) {
        self.user = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user(&mut self) -> &mut User {
        if self.user.is_none() {
            self.user.set_default();
        }
        self.user.as_mut().unwrap()
    }

    // Take field
    pub fn take_user(&mut self) -> User {
        self.user.take().unwrap_or_else(|| User::new())
    }
}

impl ::protobuf::Message for UpdateUserRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.user {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateUserRequest {
        UpdateUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<User>>(
                    "user",
                    |m: &UpdateUserRequest| { &m.user },
                    |m: &mut UpdateUserRequest| { &mut m.user },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateUserRequest>(
                    "UpdateUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateUserRequest,
        };
        unsafe {
            instance.get(UpdateUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateUserRequest {
    fn clear(&mut self) {
        self.user.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteUserRequest {
    // message fields
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteUserRequest {
    fn default() -> &'a DeleteUserRequest {
        <DeleteUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteUserRequest {
    pub fn new() -> DeleteUserRequest {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for DeleteUserRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteUserRequest {
        DeleteUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &DeleteUserRequest| { &m.id },
                    |m: &mut DeleteUserRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteUserRequest>(
                    "DeleteUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteUserRequest,
        };
        unsafe {
            instance.get(DeleteUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteUserRequest {
    fn clear(&mut self) {
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListUserRequest {
    // message fields
    pub limit: i64,
    pub offset: i64,
    pub search: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListUserRequest {
    fn default() -> &'a ListUserRequest {
        <ListUserRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListUserRequest {
    pub fn new() -> ListUserRequest {
        ::std::default::Default::default()
    }

    // int64 limit = 1;


    pub fn get_limit(&self) -> i64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i64) {
        self.limit = v;
    }

    // int64 offset = 2;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // string search = 3;


    pub fn get_search(&self) -> &str {
        &self.search
    }
    pub fn clear_search(&mut self) {
        self.search.clear();
    }

    // Param is passed by value, moved
    pub fn set_search(&mut self, v: ::std::string::String) {
        self.search = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_search(&mut self) -> &mut ::std::string::String {
        &mut self.search
    }

    // Take field
    pub fn take_search(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.search, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListUserRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.search)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.search.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.search);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit != 0 {
            os.write_int64(1, self.limit)?;
        }
        if self.offset != 0 {
            os.write_int64(2, self.offset)?;
        }
        if !self.search.is_empty() {
            os.write_string(3, &self.search)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListUserRequest {
        ListUserRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "limit",
                    |m: &ListUserRequest| { &m.limit },
                    |m: &mut ListUserRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offset",
                    |m: &ListUserRequest| { &m.offset },
                    |m: &mut ListUserRequest| { &mut m.offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "search",
                    |m: &ListUserRequest| { &m.search },
                    |m: &mut ListUserRequest| { &mut m.search },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListUserRequest>(
                    "ListUserRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListUserRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListUserRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListUserRequest,
        };
        unsafe {
            instance.get(ListUserRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListUserRequest {
    fn clear(&mut self) {
        self.limit = 0;
        self.offset = 0;
        self.search.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListUserRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListUserRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListUserResponse {
    // message fields
    pub total_count: i64,
    pub result: ::protobuf::RepeatedField<UserListItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListUserResponse {
    fn default() -> &'a ListUserResponse {
        <ListUserResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListUserResponse {
    pub fn new() -> ListUserResponse {
        ::std::default::Default::default()
    }

    // int64 total_count = 1;


    pub fn get_total_count(&self) -> i64 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i64) {
        self.total_count = v;
    }

    // repeated .api.UserListItem result = 2;


    pub fn get_result(&self) -> &[UserListItem] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<UserListItem>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<UserListItem> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<UserListItem> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListUserResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total_count = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.result {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total_count != 0 {
            os.write_int64(1, self.total_count)?;
        }
        for v in &self.result {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListUserResponse {
        ListUserResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total_count",
                    |m: &ListUserResponse| { &m.total_count },
                    |m: &mut ListUserResponse| { &mut m.total_count },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserListItem>>(
                    "result",
                    |m: &ListUserResponse| { &m.result },
                    |m: &mut ListUserResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListUserResponse>(
                    "ListUserResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListUserResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListUserResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListUserResponse,
        };
        unsafe {
            instance.get(ListUserResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListUserResponse {
    fn clear(&mut self) {
        self.total_count = 0;
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListUserResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListUserResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateUserPasswordRequest {
    // message fields
    pub user_id: i64,
    pub password: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateUserPasswordRequest {
    fn default() -> &'a UpdateUserPasswordRequest {
        <UpdateUserPasswordRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateUserPasswordRequest {
    pub fn new() -> UpdateUserPasswordRequest {
        ::std::default::Default::default()
    }

    // int64 user_id = 1;


    pub fn get_user_id(&self) -> i64 {
        self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: i64) {
        self.user_id = v;
    }

    // string password = 2;


    pub fn get_password(&self) -> &str {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.password, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UpdateUserPasswordRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.user_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.user_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.user_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.user_id != 0 {
            os.write_int64(1, self.user_id)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateUserPasswordRequest {
        UpdateUserPasswordRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "user_id",
                    |m: &UpdateUserPasswordRequest| { &m.user_id },
                    |m: &mut UpdateUserPasswordRequest| { &mut m.user_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "password",
                    |m: &UpdateUserPasswordRequest| { &m.password },
                    |m: &mut UpdateUserPasswordRequest| { &mut m.password },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateUserPasswordRequest>(
                    "UpdateUserPasswordRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateUserPasswordRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateUserPasswordRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateUserPasswordRequest,
        };
        unsafe {
            instance.get(UpdateUserPasswordRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateUserPasswordRequest {
    fn clear(&mut self) {
        self.user_id = 0;
        self.password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateUserPasswordRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateUserPasswordRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aas/external/api/user.proto\x12\x03api\x1a\x1cgoogle/api/annotation\
    s.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/em\
    pty.proto\"\xb5\x01\n\x04User\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02i\
    d\x12\x1a\n\x08username\x18\x02\x20\x01(\tR\x08username\x12\x1f\n\x0bses\
    sion_ttl\x18\x03\x20\x01(\x05R\nsessionTTL\x12\x19\n\x08is_admin\x18\x04\
    \x20\x01(\x08R\x07isAdmin\x12\x1b\n\tis_active\x18\x05\x20\x01(\x08R\x08\
    isActive\x12\x14\n\x05email\x18\x06\x20\x01(\tR\x05email\x12\x12\n\x04no\
    te\x18\x07\x20\x01(\tR\x04note\"\x89\x02\n\x0cUserListItem\x12\x0e\n\x02\
    id\x18\x01\x20\x01(\x03R\x02id\x12\x1a\n\x08username\x18\x02\x20\x01(\tR\
    \x08username\x12\x1f\n\x0bsession_ttl\x18\x03\x20\x01(\x05R\nsessionTTL\
    \x12\x19\n\x08is_admin\x18\x04\x20\x01(\x08R\x07isAdmin\x12\x1b\n\tis_ac\
    tive\x18\x05\x20\x01(\x08R\x08isActive\x129\n\ncreated_at\x18\x08\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\
    \x18\t\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tupdatedAt\"\xa8\x01\
    \n\x10UserOrganization\x12'\n\x0forganization_id\x18\x01\x20\x01(\x03R\
    \x0eorganizationID\x12\x19\n\x08is_admin\x18\x02\x20\x01(\x08R\x07isAdmi\
    n\x12&\n\x0fis_device_admin\x18\x03\x20\x01(\x08R\risDeviceAdmin\x12(\n\
    \x10is_gateway_admin\x18\x04\x20\x01(\x08R\x0eisGatewayAdmin\"\x8b\x01\n\
    \x11CreateUserRequest\x12\x1d\n\x04user\x18\x01\x20\x01(\x0b2\t.api.User\
    R\x04user\x12\x1a\n\x08password\x18\x02\x20\x01(\tR\x08password\x12;\n\r\
    organizations\x18\x03\x20\x03(\x0b2\x15.api.UserOrganizationR\rorganizat\
    ions\"$\n\x12CreateUserResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\
    \x02id\"\x20\n\x0eGetUserRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\
    \x02id\"\xa6\x01\n\x0fGetUserResponse\x12\x1d\n\x04user\x18\x01\x20\x01(\
    \x0b2\t.api.UserR\x04user\x129\n\ncreated_at\x18\x02\x20\x01(\x0b2\x1a.g\
    oogle.protobuf.TimestampR\tcreatedAt\x129\n\nupdated_at\x18\x03\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\tupdatedAt\"2\n\x11UpdateUserReques\
    t\x12\x1d\n\x04user\x18\x01\x20\x01(\x0b2\t.api.UserR\x04user\"#\n\x11De\
    leteUserRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\"W\n\x0fList\
    UserRequest\x12\x14\n\x05limit\x18\x01\x20\x01(\x03R\x05limit\x12\x16\n\
    \x06offset\x18\x02\x20\x01(\x03R\x06offset\x12\x16\n\x06search\x18\x03\
    \x20\x01(\tR\x06search\"^\n\x10ListUserResponse\x12\x1f\n\x0btotal_count\
    \x18\x01\x20\x01(\x03R\ntotalCount\x12)\n\x06result\x18\x02\x20\x03(\x0b\
    2\x11.api.UserListItemR\x06result\"P\n\x19UpdateUserPasswordRequest\x12\
    \x17\n\x07user_id\x18\x01\x20\x01(\x03R\x06userId\x12\x1a\n\x08password\
    \x18\x02\x20\x01(\tR\x08password2\x95\x04\n\x0bUserService\x12G\n\x04Lis\
    t\x12\x14.api.ListUserRequest\x1a\x15.api.ListUserResponse\"\x12\x82\xd3\
    \xe4\x93\x02\x0c\x12\n/api/users\x12I\n\x03Get\x12\x13.api.GetUserReques\
    t\x1a\x14.api.GetUserResponse\"\x17\x82\xd3\xe4\x93\x02\x11\x12\x0f/api/\
    users/{id}\x12P\n\x06Create\x12\x16.api.CreateUserRequest\x1a\x17.api.Cr\
    eateUserResponse\"\x15\x82\xd3\xe4\x93\x02\x0f\"\n/api/users:\x01*\x12Y\
    \n\x06Update\x12\x16.api.UpdateUserRequest\x1a\x16.google.protobuf.Empty\
    \"\x1f\x82\xd3\xe4\x93\x02\x19\x1a\x14/api/users/{user.id}:\x01*\x12Q\n\
    \x06Delete\x12\x16.api.DeleteUserRequest\x1a\x16.google.protobuf.Empty\"\
    \x17\x82\xd3\xe4\x93\x02\x11*\x0f/api/users/{id}\x12r\n\x0eUpdatePasswor\
    d\x12\x1e.api.UpdateUserPasswordRequest\x1a\x16.google.protobuf.Empty\"(\
    \x82\xd3\xe4\x93\x02\"\x1a\x1d/api/users/{user_id}/password:\x01*B9Z7git\
    hub.com/brocaar/chirpstack-api/go/v3/as/external/apiJ\xe0'\n\x07\x12\x05\
    \0\0\xbf\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\
    \x04\0N\n\t\n\x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\x03\x01\x12\x03\x07\
    \x07(\n\t\n\x02\x03\x02\x12\x03\x08\x07$\nB\n\x02\x06\0\x12\x04\x0c\0:\
    \x01\x1a6\x20UserService\x20is\x20the\x20service\x20managing\x20the\x20u\
    ser\x20access.\n\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\x13\n\x1e\n\x04\x06\
    \0\x02\0\x12\x04\x0e\x08\x12\t\x1a\x10\x20Get\x20user\x20list.\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\x0e\x0c\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x0e\x11\x20\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e+;\n\r\n\x05\x06\
    \0\x02\0\x04\x12\x04\x0f\x10\x11\x12\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x04\x0f\x10\x11\x12\n/\n\x04\x06\0\x02\x01\x12\x04\x15\x08\
    \x19\t\x1a!\x20Get\x20data\x20for\x20a\x20particular\x20user.\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x15\x0c\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x15\x10\x1e\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x15)8\n\r\n\
    \x05\x06\0\x02\x01\x04\x12\x04\x16\x10\x18\x12\n\x11\n\t\x06\0\x02\x01\
    \x04\xb0\xca\xbc\"\x12\x04\x16\x10\x18\x12\n\"\n\x04\x06\0\x02\x02\x12\
    \x04\x1c\x08!\t\x1a\x14\x20Create\x20a\x20new\x20user.\n\n\x0c\n\x05\x06\
    \0\x02\x02\x01\x12\x03\x1c\x0c\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\
    \x1c\x13$\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1c/A\n\r\n\x05\x06\0\
    \x02\x02\x04\x12\x04\x1d\x10\x20\x12\n\x11\n\t\x06\0\x02\x02\x04\xb0\xca\
    \xbc\"\x12\x04\x1d\x10\x20\x12\n(\n\x04\x06\0\x02\x03\x12\x04$\x08)\t\
    \x1a\x1a\x20Update\x20an\x20existing\x20user.\n\n\x0c\n\x05\x06\0\x02\
    \x03\x01\x12\x03$\x0c\x12\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03$\x13$\n\
    \x0c\n\x05\x06\0\x02\x03\x03\x12\x03$/D\n\r\n\x05\x06\0\x02\x03\x04\x12\
    \x04%\x10(\x12\n\x11\n\t\x06\0\x02\x03\x04\xb0\xca\xbc\"\x12\x04%\x10(\
    \x12\n\x1e\n\x04\x06\0\x02\x04\x12\x04,\x080\t\x1a\x10\x20Delete\x20a\
    \x20user.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03,\x0c\x12\n\x0c\n\x05\
    \x06\0\x02\x04\x02\x12\x03,\x13$\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03,/\
    D\n\r\n\x05\x06\0\x02\x04\x04\x12\x04-\x10/\x12\n\x11\n\t\x06\0\x02\x04\
    \x04\xb0\xca\xbc\"\x12\x04-\x10/\x12\n2\n\x04\x06\0\x02\x05\x12\x043\x08\
    8\t\x1a$\x20UpdatePassword\x20updates\x20a\x20password.\n\n\x0c\n\x05\
    \x06\0\x02\x05\x01\x12\x033\x0c\x1a\n\x0c\n\x05\x06\0\x02\x05\x02\x12\
    \x033\x1b4\n\x0c\n\x05\x06\0\x02\x05\x03\x12\x033?T\n\r\n\x05\x06\0\x02\
    \x05\x04\x12\x044\x107\x12\n\x11\n\t\x06\0\x02\x05\x04\xb0\xca\xbc\"\x12\
    \x044\x107\x12\n\n\n\x02\x04\0\x12\x04<\0R\x01\n\n\n\x03\x04\0\x01\x12\
    \x03<\x08\x0c\n=\n\x04\x04\0\x02\0\x12\x03?\x08\x15\x1a0\x20User\x20ID.\
    \n\x20Will\x20be\x20set\x20automatically\x20on\x20create.\n\n\r\n\x05\
    \x04\0\x02\0\x04\x12\x04?\x08<\x0e\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03?\
    \x08\r\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03?\x0e\x10\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03?\x13\x14\n$\n\x04\x04\0\x02\x01\x12\x03B\x08\x1c\x1a\
    \x17\x20Username\x20of\x20the\x20user.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\
    \x04B\x08?\x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03B\x08\x0e\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03B\x0f\x17\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03B\x1a\x1b\n/\n\x04\x04\0\x02\x02\x12\x03E\x089\x1a\"\x20The\x20s\
    ession\x20timeout,\x20in\x20minutes.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\
    \x04E\x08B\x1c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03E\x08\r\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03E\x0e\x19\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03E\x1c\x1d\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03E\x1e8\n\x0c\n\x05\
    \x04\0\x02\x02\n\x12\x03E+7\nC\n\x04\x04\0\x02\x03\x12\x03H\x08\x1a\x1a6\
    \x20Set\x20to\x20true\x20to\x20make\x20the\x20user\x20a\x20global\x20adm\
    inistrator.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04H\x08E9\n\x0c\n\x05\x04\
    \0\x02\x03\x05\x12\x03H\x08\x0c\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03H\r\
    \x15\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03H\x18\x19\n0\n\x04\x04\0\x02\
    \x04\x12\x03K\x08\x1b\x1a#\x20Set\x20to\x20false\x20to\x20disable\x20the\
    \x20user.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x04K\x08H\x1a\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x03K\x08\x0c\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03K\r\x16\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03K\x19\x1a\n\"\n\x04\x04\
    \0\x02\x05\x12\x03N\x08\x19\x1a\x15\x20E-mail\x20of\x20the\x20user.\n\n\
    \r\n\x05\x04\0\x02\x05\x04\x12\x04N\x08K\x1b\n\x0c\n\x05\x04\0\x02\x05\
    \x05\x12\x03N\x08\x0e\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03N\x0f\x14\n\
    \x0c\n\x05\x04\0\x02\x05\x03\x12\x03N\x17\x18\n4\n\x04\x04\0\x02\x06\x12\
    \x03Q\x08\x18\x1a'\x20Optional\x20note\x20to\x20store\x20with\x20the\x20\
    user.\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04Q\x08N\x19\n\x0c\n\x05\x04\0\
    \x02\x06\x05\x12\x03Q\x08\x0e\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03Q\x0f\
    \x13\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03Q\x16\x17\n\n\n\x02\x04\x01\
    \x12\x04T\0j\x01\n\n\n\x03\x04\x01\x01\x12\x03T\x08\x14\n=\n\x04\x04\x01\
    \x02\0\x12\x03W\x08\x15\x1a0\x20User\x20ID.\n\x20Will\x20be\x20set\x20au\
    tomatically\x20on\x20create.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04W\x08T\
    \x16\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03W\x08\r\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03W\x0e\x10\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03W\x13\
    \x14\n$\n\x04\x04\x01\x02\x01\x12\x03Z\x08\x1c\x1a\x17\x20Username\x20of\
    \x20the\x20user.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04Z\x08W\x15\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03Z\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03Z\x0f\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03Z\x1a\x1b\n\
    /\n\x04\x04\x01\x02\x02\x12\x03]\x089\x1a\"\x20The\x20session\x20timeout\
    ,\x20in\x20minutes.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04]\x08Z\x1c\n\
    \x0c\n\x05\x04\x01\x02\x02\x05\x12\x03]\x08\r\n\x0c\n\x05\x04\x01\x02\
    \x02\x01\x12\x03]\x0e\x19\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03]\x1c\
    \x1d\n\x0c\n\x05\x04\x01\x02\x02\x08\x12\x03]\x1e8\n\x0c\n\x05\x04\x01\
    \x02\x02\n\x12\x03]+7\nC\n\x04\x04\x01\x02\x03\x12\x03`\x08\x1a\x1a6\x20\
    Set\x20to\x20true\x20to\x20make\x20the\x20user\x20a\x20global\x20adminis\
    trator.\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04`\x08]9\n\x0c\n\x05\x04\
    \x01\x02\x03\x05\x12\x03`\x08\x0c\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x03`\r\x15\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03`\x18\x19\n0\n\x04\
    \x04\x01\x02\x04\x12\x03c\x08\x1b\x1a#\x20Set\x20to\x20false\x20to\x20di\
    sable\x20the\x20user.\n\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04c\x08`\x1a\
    \n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03c\x08\x0c\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x03c\r\x16\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03c\x19\
    \x1a\n$\n\x04\x04\x01\x02\x05\x12\x03f\x081\x1a\x17\x20Created\x20at\x20\
    timestamp.\n\n\r\n\x05\x04\x01\x02\x05\x04\x12\x04f\x08c\x1b\n\x0c\n\x05\
    \x04\x01\x02\x05\x06\x12\x03f\x08!\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x03f\",\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03f/0\n%\n\x04\x04\x01\x02\
    \x06\x12\x03i\x081\x1a\x18\x20Last\x20update\x20timestamp.\n\n\r\n\x05\
    \x04\x01\x02\x06\x04\x12\x04i\x08f1\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\
    \x03i\x08!\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03i\",\n\x0c\n\x05\x04\
    \x01\x02\x06\x03\x12\x03i/0\n\n\n\x02\x04\x02\x12\x04l\0z\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03l\x08\x18\n\x1f\n\x04\x04\x02\x02\0\x12\x03n\x08A\
    \x1a\x12\x20Organization\x20ID.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04n\
    \x08l\x1a\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03n\x08\r\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03n\x0e\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03n\
    \x20!\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03n\"@\n\x0c\n\x05\x04\x02\x02\
    \0\n\x12\x03n/?\n\x8e\x01\n\x04\x04\x02\x02\x01\x12\x03r\x08\x1a\x1a\x80\
    \x01\x20User\x20is\x20admin\x20within\x20the\x20context\x20of\x20the\x20\
    organization.\n\x20There\x20is\x20no\x20need\x20to\x20set\x20the\x20is_d\
    evice_admin\x20and\x20is_gateway_admin\x20flags.\n\n\r\n\x05\x04\x02\x02\
    \x01\x04\x12\x04r\x08nA\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03r\x08\x0c\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03r\r\x15\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03r\x18\x19\n{\n\x04\x04\x02\x02\x02\x12\x03v\x04\x1d\x1an\
    \x20User\x20is\x20able\x20to\x20modify\x20device\x20related\x20resources\
    \x20(applications,\n\x20device-profiles,\x20devices,\x20multicast-groups\
    ).\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04v\x04r\x1a\n\x0c\n\x05\x04\x02\
    \x02\x02\x05\x12\x03v\x04\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03v\t\
    \x18\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03v\x1b\x1c\n/\n\x04\x04\x02\
    \x02\x03\x12\x03y\x04\x1e\x1a\"\x20User\x20is\x20able\x20to\x20modify\
    \x20gateways.\n\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04y\x04v\x1d\n\x0c\n\
    \x05\x04\x02\x02\x03\x05\x12\x03y\x04\x08\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03y\t\x19\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03y\x1c\x1d\n\
    \x0b\n\x02\x04\x03\x12\x05|\0\x85\x01\x01\n\n\n\x03\x04\x03\x01\x12\x03|\
    \x08\x19\n%\n\x04\x04\x03\x02\0\x12\x03~\x08\x16\x1a\x18\x20User\x20obje\
    ct\x20to\x20create.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04~\x08|\x1b\n\
    \x0c\n\x05\x04\x03\x02\0\x06\x12\x03~\x08\x0c\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03~\r\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03~\x14\x15\n%\n\
    \x04\x04\x03\x02\x01\x12\x04\x81\x01\x08\x1c\x1a\x17\x20Password\x20of\
    \x20the\x20user.\n\n\x0e\n\x05\x04\x03\x02\x01\x04\x12\x05\x81\x01\x08~\
    \x16\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x81\x01\x08\x0e\n\r\n\x05\x04\
    \x03\x02\x01\x01\x12\x04\x81\x01\x0f\x17\n\r\n\x05\x04\x03\x02\x01\x03\
    \x12\x04\x81\x01\x1a\x1b\n<\n\x04\x04\x03\x02\x02\x12\x04\x84\x01\x084\
    \x1a.\x20Add\x20the\x20user\x20to\x20the\x20following\x20organizations.\
    \n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\x84\x01\x08\x10\n\r\n\x05\x04\
    \x03\x02\x02\x06\x12\x04\x84\x01\x11!\n\r\n\x05\x04\x03\x02\x02\x01\x12\
    \x04\x84\x01\"/\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\x84\x0123\n\x0c\n\
    \x02\x04\x04\x12\x06\x87\x01\0\x8a\x01\x01\n\x0b\n\x03\x04\x04\x01\x12\
    \x04\x87\x01\x08\x1a\n\x18\n\x04\x04\x04\x02\0\x12\x04\x89\x01\x08\x15\
    \x1a\n\x20User\x20ID.\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\x89\x01\
    \x08\x87\x01\x1c\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\x89\x01\x08\r\n\r\n\
    \x05\x04\x04\x02\0\x01\x12\x04\x89\x01\x0e\x10\n\r\n\x05\x04\x04\x02\0\
    \x03\x12\x04\x89\x01\x13\x14\n\x0c\n\x02\x04\x05\x12\x06\x8c\x01\0\x8f\
    \x01\x01\n\x0b\n\x03\x04\x05\x01\x12\x04\x8c\x01\x08\x16\n\x18\n\x04\x04\
    \x05\x02\0\x12\x04\x8e\x01\x08\x15\x1a\n\x20User\x20ID.\n\n\x0f\n\x05\
    \x04\x05\x02\0\x04\x12\x06\x8e\x01\x08\x8c\x01\x18\n\r\n\x05\x04\x05\x02\
    \0\x05\x12\x04\x8e\x01\x08\r\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x8e\x01\
    \x0e\x10\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x8e\x01\x13\x14\n\x0c\n\x02\
    \x04\x06\x12\x06\x91\x01\0\x9a\x01\x01\n\x0b\n\x03\x04\x06\x01\x12\x04\
    \x91\x01\x08\x17\n\x1c\n\x04\x04\x06\x02\0\x12\x04\x93\x01\x08\x16\x1a\
    \x0e\x20User\x20object.\n\n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\x93\x01\
    \x08\x91\x01\x19\n\r\n\x05\x04\x06\x02\0\x06\x12\x04\x93\x01\x08\x0c\n\r\
    \n\x05\x04\x06\x02\0\x01\x12\x04\x93\x01\r\x11\n\r\n\x05\x04\x06\x02\0\
    \x03\x12\x04\x93\x01\x14\x15\n%\n\x04\x04\x06\x02\x01\x12\x04\x96\x01\
    \x081\x1a\x17\x20Created\x20at\x20timestamp.\n\n\x0f\n\x05\x04\x06\x02\
    \x01\x04\x12\x06\x96\x01\x08\x93\x01\x16\n\r\n\x05\x04\x06\x02\x01\x06\
    \x12\x04\x96\x01\x08!\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x96\x01\",\n\
    \r\n\x05\x04\x06\x02\x01\x03\x12\x04\x96\x01/0\n&\n\x04\x04\x06\x02\x02\
    \x12\x04\x99\x01\x081\x1a\x18\x20Last\x20update\x20timestamp.\n\n\x0f\n\
    \x05\x04\x06\x02\x02\x04\x12\x06\x99\x01\x08\x96\x011\n\r\n\x05\x04\x06\
    \x02\x02\x06\x12\x04\x99\x01\x08!\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\
    \x99\x01\",\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\x99\x01/0\n\x0c\n\x02\
    \x04\x07\x12\x06\x9c\x01\0\x9f\x01\x01\n\x0b\n\x03\x04\x07\x01\x12\x04\
    \x9c\x01\x08\x19\n&\n\x04\x04\x07\x02\0\x12\x04\x9e\x01\x08\x16\x1a\x18\
    \x20User\x20object\x20to\x20update.\n\n\x0f\n\x05\x04\x07\x02\0\x04\x12\
    \x06\x9e\x01\x08\x9c\x01\x1b\n\r\n\x05\x04\x07\x02\0\x06\x12\x04\x9e\x01\
    \x08\x0c\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\x9e\x01\r\x11\n\r\n\x05\x04\
    \x07\x02\0\x03\x12\x04\x9e\x01\x14\x15\n\x0c\n\x02\x04\x08\x12\x06\xa1\
    \x01\0\xa4\x01\x01\n\x0b\n\x03\x04\x08\x01\x12\x04\xa1\x01\x08\x19\n\x18\
    \n\x04\x04\x08\x02\0\x12\x04\xa3\x01\x08\x15\x1a\n\x20User\x20ID.\n\n\
    \x0f\n\x05\x04\x08\x02\0\x04\x12\x06\xa3\x01\x08\xa1\x01\x1b\n\r\n\x05\
    \x04\x08\x02\0\x05\x12\x04\xa3\x01\x08\r\n\r\n\x05\x04\x08\x02\0\x01\x12\
    \x04\xa3\x01\x0e\x10\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xa3\x01\x13\x14\
    \n\x0c\n\x02\x04\t\x12\x06\xa6\x01\0\xaf\x01\x01\n\x0b\n\x03\x04\t\x01\
    \x12\x04\xa6\x01\x08\x17\n?\n\x04\x04\t\x02\0\x12\x04\xa8\x01\x08\x18\
    \x1a1\x20Max\x20number\x20of\x20user\x20to\x20return\x20in\x20the\x20res\
    ult-set.\n\n\x0f\n\x05\x04\t\x02\0\x04\x12\x06\xa8\x01\x08\xa6\x01\x19\n\
    \r\n\x05\x04\t\x02\0\x05\x12\x04\xa8\x01\x08\r\n\r\n\x05\x04\t\x02\0\x01\
    \x12\x04\xa8\x01\x0e\x13\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xa8\x01\x16\
    \x17\n:\n\x04\x04\t\x02\x01\x12\x04\xab\x01\x08\x19\x1a,\x20Offset\x20in\
    \x20the\x20result-set\x20(for\x20pagination).\n\n\x0f\n\x05\x04\t\x02\
    \x01\x04\x12\x06\xab\x01\x08\xa8\x01\x18\n\r\n\x05\x04\t\x02\x01\x05\x12\
    \x04\xab\x01\x08\r\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\xab\x01\x0e\x14\n\
    \r\n\x05\x04\t\x02\x01\x03\x12\x04\xab\x01\x17\x18\nS\n\x04\x04\t\x02\
    \x02\x12\x04\xae\x01\x08\x1a\x1aE\x20When\x20provided,\x20the\x20given\
    \x20string\x20will\x20be\x20used\x20to\x20search\x20on\x20username.\n\n\
    \x0f\n\x05\x04\t\x02\x02\x04\x12\x06\xae\x01\x08\xab\x01\x19\n\r\n\x05\
    \x04\t\x02\x02\x05\x12\x04\xae\x01\x08\x0e\n\r\n\x05\x04\t\x02\x02\x01\
    \x12\x04\xae\x01\x0f\x15\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xae\x01\x18\
    \x19\n\x0c\n\x02\x04\n\x12\x06\xb1\x01\0\xb7\x01\x01\n\x0b\n\x03\x04\n\
    \x01\x12\x04\xb1\x01\x08\x18\n&\n\x04\x04\n\x02\0\x12\x04\xb3\x01\x08\
    \x1e\x1a\x18\x20Total\x20number\x20of\x20users.\n\n\x0f\n\x05\x04\n\x02\
    \0\x04\x12\x06\xb3\x01\x08\xb1\x01\x1a\n\r\n\x05\x04\n\x02\0\x05\x12\x04\
    \xb3\x01\x08\r\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xb3\x01\x0e\x19\n\r\n\
    \x05\x04\n\x02\0\x03\x12\x04\xb3\x01\x1c\x1d\n\x1b\n\x04\x04\n\x02\x01\
    \x12\x04\xb6\x01\x08)\x1a\r\x20Result-set.\n\n\r\n\x05\x04\n\x02\x01\x04\
    \x12\x04\xb6\x01\x08\x10\n\r\n\x05\x04\n\x02\x01\x06\x12\x04\xb6\x01\x11\
    \x1d\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\xb6\x01\x1e$\n\r\n\x05\x04\n\
    \x02\x01\x03\x12\x04\xb6\x01'(\n\x0c\n\x02\x04\x0b\x12\x06\xb9\x01\0\xbf\
    \x01\x01\n\x0b\n\x03\x04\x0b\x01\x12\x04\xb9\x01\x08!\n\x18\n\x04\x04\
    \x0b\x02\0\x12\x04\xbb\x01\x08\x1a\x1a\n\x20User\x20ID.\n\n\x0f\n\x05\
    \x04\x0b\x02\0\x04\x12\x06\xbb\x01\x08\xb9\x01#\n\r\n\x05\x04\x0b\x02\0\
    \x05\x12\x04\xbb\x01\x08\r\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xbb\x01\
    \x0e\x15\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xbb\x01\x18\x19\n\x1c\n\x04\
    \x04\x0b\x02\x01\x12\x04\xbe\x01\x08\x1c\x1a\x0e\x20New\x20pasword.\n\n\
    \x0f\n\x05\x04\x0b\x02\x01\x04\x12\x06\xbe\x01\x08\xbb\x01\x1a\n\r\n\x05\
    \x04\x0b\x02\x01\x05\x12\x04\xbe\x01\x08\x0e\n\r\n\x05\x04\x0b\x02\x01\
    \x01\x12\x04\xbe\x01\x0f\x17\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\xbe\
    \x01\x1a\x1bb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
