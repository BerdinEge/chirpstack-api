// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/external/api/deviceQueue.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct DeviceQueueItem {
    // message fields
    pub dev_eui: ::std::string::String,
    pub confirmed: bool,
    pub f_cnt: u32,
    pub f_port: u32,
    pub data: ::std::vec::Vec<u8>,
    pub json_object: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceQueueItem {
    fn default() -> &'a DeviceQueueItem {
        <DeviceQueueItem as ::protobuf::Message>::default_instance()
    }
}

impl DeviceQueueItem {
    pub fn new() -> DeviceQueueItem {
        ::std::default::Default::default()
    }

    // string dev_eui = 1;


    pub fn get_dev_eui(&self) -> &str {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::string::String) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::string::String {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dev_eui, ::std::string::String::new())
    }

    // bool confirmed = 2;


    pub fn get_confirmed(&self) -> bool {
        self.confirmed
    }
    pub fn clear_confirmed(&mut self) {
        self.confirmed = false;
    }

    // Param is passed by value, moved
    pub fn set_confirmed(&mut self, v: bool) {
        self.confirmed = v;
    }

    // uint32 f_cnt = 6;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // uint32 f_port = 3;


    pub fn get_f_port(&self) -> u32 {
        self.f_port
    }
    pub fn clear_f_port(&mut self) {
        self.f_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_port(&mut self, v: u32) {
        self.f_port = v;
    }

    // bytes data = 4;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string json_object = 5;


    pub fn get_json_object(&self) -> &str {
        &self.json_object
    }
    pub fn clear_json_object(&mut self) {
        self.json_object.clear();
    }

    // Param is passed by value, moved
    pub fn set_json_object(&mut self, v: ::std::string::String) {
        self.json_object = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_json_object(&mut self) -> &mut ::std::string::String {
        &mut self.json_object
    }

    // Take field
    pub fn take_json_object(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.json_object, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeviceQueueItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.confirmed = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_port = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.json_object)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dev_eui);
        }
        if self.confirmed != false {
            my_size += 2;
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(6, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.f_port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.f_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        if !self.json_object.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.json_object);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_string(1, &self.dev_eui)?;
        }
        if self.confirmed != false {
            os.write_bool(2, self.confirmed)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(6, self.f_cnt)?;
        }
        if self.f_port != 0 {
            os.write_uint32(3, self.f_port)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        if !self.json_object.is_empty() {
            os.write_string(5, &self.json_object)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceQueueItem {
        DeviceQueueItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dev_eui",
                    |m: &DeviceQueueItem| { &m.dev_eui },
                    |m: &mut DeviceQueueItem| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "confirmed",
                    |m: &DeviceQueueItem| { &m.confirmed },
                    |m: &mut DeviceQueueItem| { &mut m.confirmed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &DeviceQueueItem| { &m.f_cnt },
                    |m: &mut DeviceQueueItem| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_port",
                    |m: &DeviceQueueItem| { &m.f_port },
                    |m: &mut DeviceQueueItem| { &mut m.f_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &DeviceQueueItem| { &m.data },
                    |m: &mut DeviceQueueItem| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "json_object",
                    |m: &DeviceQueueItem| { &m.json_object },
                    |m: &mut DeviceQueueItem| { &mut m.json_object },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeviceQueueItem>(
                    "DeviceQueueItem",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeviceQueueItem {
        static mut instance: ::protobuf::lazy::Lazy<DeviceQueueItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeviceQueueItem,
        };
        unsafe {
            instance.get(DeviceQueueItem::new)
        }
    }
}

impl ::protobuf::Clear for DeviceQueueItem {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.confirmed = false;
        self.f_cnt = 0;
        self.f_port = 0;
        self.data.clear();
        self.json_object.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceQueueItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceQueueItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnqueueDeviceQueueItemRequest {
    // message fields
    pub device_queue_item: ::protobuf::SingularPtrField<DeviceQueueItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnqueueDeviceQueueItemRequest {
    fn default() -> &'a EnqueueDeviceQueueItemRequest {
        <EnqueueDeviceQueueItemRequest as ::protobuf::Message>::default_instance()
    }
}

impl EnqueueDeviceQueueItemRequest {
    pub fn new() -> EnqueueDeviceQueueItemRequest {
        ::std::default::Default::default()
    }

    // .api.DeviceQueueItem device_queue_item = 1;


    pub fn get_device_queue_item(&self) -> &DeviceQueueItem {
        self.device_queue_item.as_ref().unwrap_or_else(|| DeviceQueueItem::default_instance())
    }
    pub fn clear_device_queue_item(&mut self) {
        self.device_queue_item.clear();
    }

    pub fn has_device_queue_item(&self) -> bool {
        self.device_queue_item.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_queue_item(&mut self, v: DeviceQueueItem) {
        self.device_queue_item = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_queue_item(&mut self) -> &mut DeviceQueueItem {
        if self.device_queue_item.is_none() {
            self.device_queue_item.set_default();
        }
        self.device_queue_item.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_queue_item(&mut self) -> DeviceQueueItem {
        self.device_queue_item.take().unwrap_or_else(|| DeviceQueueItem::new())
    }
}

impl ::protobuf::Message for EnqueueDeviceQueueItemRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.device_queue_item {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_queue_item)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.device_queue_item.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.device_queue_item.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnqueueDeviceQueueItemRequest {
        EnqueueDeviceQueueItemRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceQueueItem>>(
                    "device_queue_item",
                    |m: &EnqueueDeviceQueueItemRequest| { &m.device_queue_item },
                    |m: &mut EnqueueDeviceQueueItemRequest| { &mut m.device_queue_item },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnqueueDeviceQueueItemRequest>(
                    "EnqueueDeviceQueueItemRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnqueueDeviceQueueItemRequest {
        static mut instance: ::protobuf::lazy::Lazy<EnqueueDeviceQueueItemRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnqueueDeviceQueueItemRequest,
        };
        unsafe {
            instance.get(EnqueueDeviceQueueItemRequest::new)
        }
    }
}

impl ::protobuf::Clear for EnqueueDeviceQueueItemRequest {
    fn clear(&mut self) {
        self.device_queue_item.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnqueueDeviceQueueItemRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnqueueDeviceQueueItemRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnqueueDeviceQueueItemResponse {
    // message fields
    pub f_cnt: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnqueueDeviceQueueItemResponse {
    fn default() -> &'a EnqueueDeviceQueueItemResponse {
        <EnqueueDeviceQueueItemResponse as ::protobuf::Message>::default_instance()
    }
}

impl EnqueueDeviceQueueItemResponse {
    pub fn new() -> EnqueueDeviceQueueItemResponse {
        ::std::default::Default::default()
    }

    // uint32 f_cnt = 1;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }
}

impl ::protobuf::Message for EnqueueDeviceQueueItemResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(1, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.f_cnt != 0 {
            os.write_uint32(1, self.f_cnt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnqueueDeviceQueueItemResponse {
        EnqueueDeviceQueueItemResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &EnqueueDeviceQueueItemResponse| { &m.f_cnt },
                    |m: &mut EnqueueDeviceQueueItemResponse| { &mut m.f_cnt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnqueueDeviceQueueItemResponse>(
                    "EnqueueDeviceQueueItemResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnqueueDeviceQueueItemResponse {
        static mut instance: ::protobuf::lazy::Lazy<EnqueueDeviceQueueItemResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnqueueDeviceQueueItemResponse,
        };
        unsafe {
            instance.get(EnqueueDeviceQueueItemResponse::new)
        }
    }
}

impl ::protobuf::Clear for EnqueueDeviceQueueItemResponse {
    fn clear(&mut self) {
        self.f_cnt = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnqueueDeviceQueueItemResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnqueueDeviceQueueItemResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FlushDeviceQueueRequest {
    // message fields
    pub dev_eui: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FlushDeviceQueueRequest {
    fn default() -> &'a FlushDeviceQueueRequest {
        <FlushDeviceQueueRequest as ::protobuf::Message>::default_instance()
    }
}

impl FlushDeviceQueueRequest {
    pub fn new() -> FlushDeviceQueueRequest {
        ::std::default::Default::default()
    }

    // string dev_eui = 1;


    pub fn get_dev_eui(&self) -> &str {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::string::String) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::string::String {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dev_eui, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FlushDeviceQueueRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dev_eui)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dev_eui);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_string(1, &self.dev_eui)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FlushDeviceQueueRequest {
        FlushDeviceQueueRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dev_eui",
                    |m: &FlushDeviceQueueRequest| { &m.dev_eui },
                    |m: &mut FlushDeviceQueueRequest| { &mut m.dev_eui },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FlushDeviceQueueRequest>(
                    "FlushDeviceQueueRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FlushDeviceQueueRequest {
        static mut instance: ::protobuf::lazy::Lazy<FlushDeviceQueueRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FlushDeviceQueueRequest,
        };
        unsafe {
            instance.get(FlushDeviceQueueRequest::new)
        }
    }
}

impl ::protobuf::Clear for FlushDeviceQueueRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FlushDeviceQueueRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FlushDeviceQueueRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListDeviceQueueItemsRequest {
    // message fields
    pub dev_eui: ::std::string::String,
    pub count_only: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListDeviceQueueItemsRequest {
    fn default() -> &'a ListDeviceQueueItemsRequest {
        <ListDeviceQueueItemsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListDeviceQueueItemsRequest {
    pub fn new() -> ListDeviceQueueItemsRequest {
        ::std::default::Default::default()
    }

    // string dev_eui = 1;


    pub fn get_dev_eui(&self) -> &str {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::string::String) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::string::String {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dev_eui, ::std::string::String::new())
    }

    // bool count_only = 2;


    pub fn get_count_only(&self) -> bool {
        self.count_only
    }
    pub fn clear_count_only(&mut self) {
        self.count_only = false;
    }

    // Param is passed by value, moved
    pub fn set_count_only(&mut self, v: bool) {
        self.count_only = v;
    }
}

impl ::protobuf::Message for ListDeviceQueueItemsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.count_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.dev_eui);
        }
        if self.count_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_string(1, &self.dev_eui)?;
        }
        if self.count_only != false {
            os.write_bool(2, self.count_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListDeviceQueueItemsRequest {
        ListDeviceQueueItemsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dev_eui",
                    |m: &ListDeviceQueueItemsRequest| { &m.dev_eui },
                    |m: &mut ListDeviceQueueItemsRequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "count_only",
                    |m: &ListDeviceQueueItemsRequest| { &m.count_only },
                    |m: &mut ListDeviceQueueItemsRequest| { &mut m.count_only },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListDeviceQueueItemsRequest>(
                    "ListDeviceQueueItemsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListDeviceQueueItemsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListDeviceQueueItemsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListDeviceQueueItemsRequest,
        };
        unsafe {
            instance.get(ListDeviceQueueItemsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListDeviceQueueItemsRequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.count_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListDeviceQueueItemsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDeviceQueueItemsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListDeviceQueueItemsResponse {
    // message fields
    pub device_queue_items: ::protobuf::RepeatedField<DeviceQueueItem>,
    pub total_count: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListDeviceQueueItemsResponse {
    fn default() -> &'a ListDeviceQueueItemsResponse {
        <ListDeviceQueueItemsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListDeviceQueueItemsResponse {
    pub fn new() -> ListDeviceQueueItemsResponse {
        ::std::default::Default::default()
    }

    // repeated .api.DeviceQueueItem device_queue_items = 1;


    pub fn get_device_queue_items(&self) -> &[DeviceQueueItem] {
        &self.device_queue_items
    }
    pub fn clear_device_queue_items(&mut self) {
        self.device_queue_items.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_queue_items(&mut self, v: ::protobuf::RepeatedField<DeviceQueueItem>) {
        self.device_queue_items = v;
    }

    // Mutable pointer to the field.
    pub fn mut_device_queue_items(&mut self) -> &mut ::protobuf::RepeatedField<DeviceQueueItem> {
        &mut self.device_queue_items
    }

    // Take field
    pub fn take_device_queue_items(&mut self) -> ::protobuf::RepeatedField<DeviceQueueItem> {
        ::std::mem::replace(&mut self.device_queue_items, ::protobuf::RepeatedField::new())
    }

    // int32 total_count = 2;


    pub fn get_total_count(&self) -> i32 {
        self.total_count
    }
    pub fn clear_total_count(&mut self) {
        self.total_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_count(&mut self, v: i32) {
        self.total_count = v;
    }
}

impl ::protobuf::Message for ListDeviceQueueItemsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.device_queue_items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.device_queue_items)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.total_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.device_queue_items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.total_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.total_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.device_queue_items {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.total_count != 0 {
            os.write_int32(2, self.total_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListDeviceQueueItemsResponse {
        ListDeviceQueueItemsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceQueueItem>>(
                    "device_queue_items",
                    |m: &ListDeviceQueueItemsResponse| { &m.device_queue_items },
                    |m: &mut ListDeviceQueueItemsResponse| { &mut m.device_queue_items },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "total_count",
                    |m: &ListDeviceQueueItemsResponse| { &m.total_count },
                    |m: &mut ListDeviceQueueItemsResponse| { &mut m.total_count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListDeviceQueueItemsResponse>(
                    "ListDeviceQueueItemsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListDeviceQueueItemsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListDeviceQueueItemsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListDeviceQueueItemsResponse,
        };
        unsafe {
            instance.get(ListDeviceQueueItemsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListDeviceQueueItemsResponse {
    fn clear(&mut self) {
        self.device_queue_items.clear();
        self.total_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListDeviceQueueItemsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDeviceQueueItemsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!as/external/api/deviceQueue.proto\x12\x03api\x1a\x1cgoogle/api/annota\
    tions.proto\x1a\x1bgoogle/protobuf/empty.proto\"\xa9\x01\n\x0fDeviceQueu\
    eItem\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\tR\x06devEUI\x12\x1c\n\tconf\
    irmed\x18\x02\x20\x01(\x08R\tconfirmed\x12\x13\n\x05f_cnt\x18\x06\x20\
    \x01(\rR\x04fCnt\x12\x15\n\x06f_port\x18\x03\x20\x01(\rR\x05fPort\x12\
    \x12\n\x04data\x18\x04\x20\x01(\x0cR\x04data\x12\x1f\n\x0bjson_object\
    \x18\x05\x20\x01(\tR\njsonObject\"a\n\x1dEnqueueDeviceQueueItemRequest\
    \x12@\n\x11device_queue_item\x18\x01\x20\x01(\x0b2\x14.api.DeviceQueueIt\
    emR\x0fdeviceQueueItem\"5\n\x1eEnqueueDeviceQueueItemResponse\x12\x13\n\
    \x05f_cnt\x18\x01\x20\x01(\rR\x04fCnt\"2\n\x17FlushDeviceQueueRequest\
    \x12\x17\n\x07dev_eui\x18\x01\x20\x01(\tR\x06devEUI\"U\n\x1bListDeviceQu\
    eueItemsRequest\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\tR\x06devEUI\x12\
    \x1d\n\ncount_only\x18\x02\x20\x01(\x08R\tcountOnly\"\x83\x01\n\x1cListD\
    eviceQueueItemsResponse\x12B\n\x12device_queue_items\x18\x01\x20\x03(\
    \x0b2\x14.api.DeviceQueueItemR\x10deviceQueueItems\x12\x1f\n\x0btotal_co\
    unt\x18\x02\x20\x01(\x05R\ntotalCount2\xfc\x02\n\x12DeviceQueueService\
    \x12\x8d\x01\n\x07Enqueue\x12\".api.EnqueueDeviceQueueItemRequest\x1a#.a\
    pi.EnqueueDeviceQueueItemResponse\"9\x82\xd3\xe4\x93\x023\"./api/devices\
    /{device_queue_item.dev_eui}/queue:\x01*\x12c\n\x05Flush\x12\x1c.api.Flu\
    shDeviceQueueRequest\x1a\x16.google.protobuf.Empty\"$\x82\xd3\xe4\x93\
    \x02\x1e*\x1c/api/devices/{dev_eui}/queue\x12q\n\x04List\x12\x20.api.Lis\
    tDeviceQueueItemsRequest\x1a!.api.ListDeviceQueueItemsResponse\"$\x82\
    \xd3\xe4\x93\x02\x1e\x12\x1c/api/devices/{dev_eui}/queueB9Z7github.com/b\
    rocaar/chirpstack-api/go/v3/as/external/apiJ\xa0\x13\n\x06\x12\x04\0\0Y\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x0b\
    \n\x08\n\x01\x08\x12\x03\x04\0N\n\t\n\x02\x08\x0b\x12\x03\x04\0N\n\t\n\
    \x02\x03\0\x12\x03\x06\x07%\n\t\n\x02\x03\x01\x12\x03\x07\x07$\nQ\n\x02\
    \x06\0\x12\x04\x0b\0!\x01\x1aE\x20DeviceQueueService\x20is\x20the\x20ser\
    vice\x20managing\x20the\x20downlink\x20data\x20queue.\n\n\n\n\x03\x06\0\
    \x01\x12\x03\x0b\x08\x1a\n@\n\x04\x06\0\x02\0\x12\x04\r\x04\x12\x05\x1a2\
    \x20Enqueue\x20adds\x20the\x20given\x20item\x20to\x20the\x20device-queue\
    .\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\r\x08\x0f\n\x0c\n\x05\x06\0\x02\
    \0\x02\x12\x03\r\x10-\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\r8V\n\r\n\x05\
    \x06\0\x02\0\x04\x12\x04\x0e\x08\x11\n\n\x11\n\t\x06\0\x02\0\x04\xb0\xca\
    \xbc\"\x12\x04\x0e\x08\x11\n\n8\n\x04\x06\0\x02\x01\x12\x04\x15\x04\x19\
    \x05\x1a*\x20Flush\x20flushes\x20the\x20downlink\x20device-queue.\n\n\
    \x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x15\x08\r\n\x0c\n\x05\x06\0\x02\x01\
    \x02\x12\x03\x15\x0e%\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x150E\n\r\n\
    \x05\x06\0\x02\x01\x04\x12\x04\x16\x08\x18\n\n\x11\n\t\x06\0\x02\x01\x04\
    \xb0\xca\xbc\"\x12\x04\x16\x08\x18\n\n9\n\x04\x06\0\x02\x02\x12\x04\x1c\
    \x04\x20\x05\x1a+\x20List\x20lists\x20the\x20items\x20in\x20the\x20devic\
    e-queue.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1c\x08\x0c\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03\x1c\r(\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\
    \x1c3O\n\r\n\x05\x06\0\x02\x02\x04\x12\x04\x1d\x08\x1f\n\n\x11\n\t\x06\0\
    \x02\x02\x04\xb0\xca\xbc\"\x12\x04\x1d\x08\x1f\n\n\n\n\x02\x04\0\x12\x04\
    #\0:\x01\n\n\n\x03\x04\0\x01\x12\x03#\x08\x17\n(\n\x04\x04\0\x02\0\x12\
    \x03%\x04.\x1a\x1b\x20Device\x20EUI\x20(HEX\x20encoded).\n\n\r\n\x05\x04\
    \0\x02\0\x04\x12\x04%\x04#\x19\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03%\x04\
    \n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03%\x0b\x12\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03%\x15\x16\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03%\x17-\n\x0c\n\
    \x05\x04\0\x02\0\n\x12\x03%$,\n\x96\x01\n\x04\x04\0\x02\x01\x12\x03)\x04\
    \x17\x1a\x88\x01\x20Set\x20this\x20to\x20true\x20when\x20an\x20acknowled\
    gement\x20from\x20the\x20device\x20is\x20required.\n\x20Please\x20note\
    \x20that\x20this\x20must\x20not\x20be\x20used\x20to\x20guarantee\x20a\
    \x20delivery.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04)\x04%.\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03)\x04\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03)\t\x12\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03)\x15\x16\nQ\n\x04\x04\
    \0\x02\x02\x12\x03-\x04\x15\x1aD\x20Downlink\x20frame-counter.\n\x20This\
    \x20will\x20be\x20automatically\x20set\x20on\x20enquue.\n\n\r\n\x05\x04\
    \0\x02\x02\x04\x12\x04-\x04)\x17\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03-\
    \x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03-\x0b\x10\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03-\x13\x14\n'\n\x04\x04\0\x02\x03\x12\x030\x04\x16\
    \x1a\x1a\x20FPort\x20used\x20(must\x20be\x20>\x200)\n\n\r\n\x05\x04\0\
    \x02\x03\x04\x12\x040\x04-\x15\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x030\
    \x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x030\x0b\x11\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x030\x14\x15\np\n\x04\x04\0\x02\x04\x12\x034\x04\x13\
    \x1ac\x20Base64\x20encoded\x20data.\n\x20Or\x20use\x20the\x20json_object\
    \x20field\x20when\x20an\x20application\x20codec\x20has\x20been\x20config\
    ured.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x044\x040\x16\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x034\x04\t\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x034\n\x0e\
    \n\x0c\n\x05\x04\0\x02\x04\x03\x12\x034\x11\x12\n\x92\x01\n\x04\x04\0\
    \x02\x05\x12\x039\x04\x1b\x1a\x84\x01\x20JSON\x20object\x20(string).\n\
    \x20Only\x20use\x20this\x20when\x20an\x20application\x20codec\x20has\x20\
    been\x20configured\x20that\x20can\x20convert\n\x20this\x20object\x20into\
    \x20binary\x20form.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x049\x044\x13\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x039\x04\n\n\x0c\n\x05\x04\0\x02\x05\
    \x01\x12\x039\x0b\x16\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x039\x19\x1a\n\n\
    \n\x02\x04\x01\x12\x04<\0?\x01\n\n\n\x03\x04\x01\x01\x12\x03<\x08%\n,\n\
    \x04\x04\x01\x02\0\x12\x03>\x04*\x1a\x1f\x20Queue-item\x20object\x20to\
    \x20enqueue.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04>\x04<'\n\x0c\n\x05\
    \x04\x01\x02\0\x06\x12\x03>\x04\x13\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03>\x14%\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03>()\n\n\n\x02\x04\x02\
    \x12\x04A\0D\x01\n\n\n\x03\x04\x02\x01\x12\x03A\x08&\n6\n\x04\x04\x02\
    \x02\0\x12\x03C\x04\x15\x1a)\x20Frame-counter\x20for\x20the\x20enqueued\
    \x20payload.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04C\x04A(\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03C\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03C\
    \x0b\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03C\x13\x14\n\n\n\x02\x04\
    \x03\x12\x04F\0I\x01\n\n\n\x03\x04\x03\x01\x12\x03F\x08\x1f\n(\n\x04\x04\
    \x03\x02\0\x12\x03H\x04.\x1a\x1b\x20Device\x20EUI\x20(HEX\x20encoded).\n\
    \n\r\n\x05\x04\x03\x02\0\x04\x12\x04H\x04F!\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03H\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03H\x0b\x12\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03H\x15\x16\n\x0c\n\x05\x04\x03\x02\0\x08\
    \x12\x03H\x17-\n\x0c\n\x05\x04\x03\x02\0\n\x12\x03H$,\n\n\n\x02\x04\x04\
    \x12\x04K\0Q\x01\n\n\n\x03\x04\x04\x01\x12\x03K\x08#\n(\n\x04\x04\x04\
    \x02\0\x12\x03M\x04.\x1a\x1b\x20Device\x20EUI\x20(HEX\x20encoded).\n\n\r\
    \n\x05\x04\x04\x02\0\x04\x12\x04M\x04K%\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03M\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03M\x0b\x12\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x03M\x15\x16\n\x0c\n\x05\x04\x04\x02\0\x08\
    \x12\x03M\x17-\n\x0c\n\x05\x04\x04\x02\0\n\x12\x03M$,\n9\n\x04\x04\x04\
    \x02\x01\x12\x03P\x04\x18\x1a,\x20Return\x20only\x20the\x20count,\x20not\
    \x20the\x20result-set.\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04P\x04M.\n\
    \x0c\n\x05\x04\x04\x02\x01\x05\x12\x03P\x04\x08\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03P\t\x13\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03P\x16\x17\
    \n\n\n\x02\x04\x05\x12\x04S\0Y\x01\n\n\n\x03\x04\x05\x01\x12\x03S\x08$\n\
    &\n\x04\x04\x05\x02\0\x12\x03U\x044\x1a\x19\x20The\x20device\x20queue\
    \x20items.\n\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x03U\x04\x0c\n\x0c\n\x05\
    \x04\x05\x02\0\x06\x12\x03U\r\x1c\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03U\
    \x1d/\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03U23\n2\n\x04\x04\x05\x02\x01\
    \x12\x03X\x04\x1a\x1a%\x20Total\x20number\x20of\x20items\x20in\x20the\
    \x20queue.\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04X\x04U4\n\x0c\n\x05\
    \x04\x05\x02\x01\x05\x12\x03X\x04\t\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\
    \x03X\n\x15\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03X\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
