// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `as/integration/integration.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct UplinkEvent {
    // message fields
    pub application_id: u64,
    pub application_name: ::std::string::String,
    pub device_name: ::std::string::String,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub rx_info: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>,
    pub tx_info: ::protobuf::SingularPtrField<super::gw::UplinkTXInfo>,
    pub adr: bool,
    pub dr: u32,
    pub f_cnt: u32,
    pub f_port: u32,
    pub data: ::std::vec::Vec<u8>,
    pub object_json: ::std::string::String,
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UplinkEvent {
    fn default() -> &'a UplinkEvent {
        <UplinkEvent as ::protobuf::Message>::default_instance()
    }
}

impl UplinkEvent {
    pub fn new() -> UplinkEvent {
        ::std::default::Default::default()
    }

    // uint64 application_id = 1;


    pub fn get_application_id(&self) -> u64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: u64) {
        self.application_id = v;
    }

    // string application_name = 2;


    pub fn get_application_name(&self) -> &str {
        &self.application_name
    }
    pub fn clear_application_name(&mut self) {
        self.application_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_name(&mut self, v: ::std::string::String) {
        self.application_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_name(&mut self) -> &mut ::std::string::String {
        &mut self.application_name
    }

    // Take field
    pub fn take_application_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_name, ::std::string::String::new())
    }

    // string device_name = 3;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        self.device_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_name, ::std::string::String::new())
    }

    // bytes dev_eui = 4;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // repeated .gw.UplinkRXInfo rx_info = 5;


    pub fn get_rx_info(&self) -> &[super::gw::UplinkRXInfo] {
        &self.rx_info
    }
    pub fn clear_rx_info(&mut self) {
        self.rx_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_rx_info(&mut self, v: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>) {
        self.rx_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rx_info(&mut self) -> &mut ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        &mut self.rx_info
    }

    // Take field
    pub fn take_rx_info(&mut self) -> ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        ::std::mem::replace(&mut self.rx_info, ::protobuf::RepeatedField::new())
    }

    // .gw.UplinkTXInfo tx_info = 6;


    pub fn get_tx_info(&self) -> &super::gw::UplinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::UplinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::UplinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::UplinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::UplinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::UplinkTXInfo::new())
    }

    // bool adr = 7;


    pub fn get_adr(&self) -> bool {
        self.adr
    }
    pub fn clear_adr(&mut self) {
        self.adr = false;
    }

    // Param is passed by value, moved
    pub fn set_adr(&mut self, v: bool) {
        self.adr = v;
    }

    // uint32 dr = 8;


    pub fn get_dr(&self) -> u32 {
        self.dr
    }
    pub fn clear_dr(&mut self) {
        self.dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr(&mut self, v: u32) {
        self.dr = v;
    }

    // uint32 f_cnt = 9;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // uint32 f_port = 10;


    pub fn get_f_port(&self) -> u32 {
        self.f_port
    }
    pub fn clear_f_port(&mut self) {
        self.f_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_port(&mut self, v: u32) {
        self.f_port = v;
    }

    // bytes data = 11;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string object_json = 12;


    pub fn get_object_json(&self) -> &str {
        &self.object_json
    }
    pub fn clear_object_json(&mut self) {
        self.object_json.clear();
    }

    // Param is passed by value, moved
    pub fn set_object_json(&mut self, v: ::std::string::String) {
        self.object_json = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_object_json(&mut self) -> &mut ::std::string::String {
        &mut self.object_json
    }

    // Take field
    pub fn take_object_json(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.object_json, ::std::string::String::new())
    }

    // repeated .integration.UplinkEvent.TagsEntry tags = 13;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for UplinkEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.application_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rx_info)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.adr = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dr = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_port = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.object_json)?;
                },
                13 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.application_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.application_name);
        }
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device_name);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dev_eui);
        }
        for value in &self.rx_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.adr != false {
            my_size += 2;
        }
        if self.dr != 0 {
            my_size += ::protobuf::rt::value_size(8, self.dr, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(9, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.f_port != 0 {
            my_size += ::protobuf::rt::value_size(10, self.f_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.data);
        }
        if !self.object_json.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.object_json);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(13, &self.tags);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.application_id != 0 {
            os.write_uint64(1, self.application_id)?;
        }
        if !self.application_name.is_empty() {
            os.write_string(2, &self.application_name)?;
        }
        if !self.device_name.is_empty() {
            os.write_string(3, &self.device_name)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(4, &self.dev_eui)?;
        }
        for v in &self.rx_info {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.adr != false {
            os.write_bool(7, self.adr)?;
        }
        if self.dr != 0 {
            os.write_uint32(8, self.dr)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(9, self.f_cnt)?;
        }
        if self.f_port != 0 {
            os.write_uint32(10, self.f_port)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(11, &self.data)?;
        }
        if !self.object_json.is_empty() {
            os.write_string(12, &self.object_json)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(13, &self.tags, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UplinkEvent {
        UplinkEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "application_id",
                    |m: &UplinkEvent| { &m.application_id },
                    |m: &mut UplinkEvent| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_name",
                    |m: &UplinkEvent| { &m.application_name },
                    |m: &mut UplinkEvent| { &mut m.application_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_name",
                    |m: &UplinkEvent| { &m.device_name },
                    |m: &mut UplinkEvent| { &mut m.device_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &UplinkEvent| { &m.dev_eui },
                    |m: &mut UplinkEvent| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkRXInfo>>(
                    "rx_info",
                    |m: &UplinkEvent| { &m.rx_info },
                    |m: &mut UplinkEvent| { &mut m.rx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkTXInfo>>(
                    "tx_info",
                    |m: &UplinkEvent| { &m.tx_info },
                    |m: &mut UplinkEvent| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "adr",
                    |m: &UplinkEvent| { &m.adr },
                    |m: &mut UplinkEvent| { &mut m.adr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dr",
                    |m: &UplinkEvent| { &m.dr },
                    |m: &mut UplinkEvent| { &mut m.dr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &UplinkEvent| { &m.f_cnt },
                    |m: &mut UplinkEvent| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_port",
                    |m: &UplinkEvent| { &m.f_port },
                    |m: &mut UplinkEvent| { &mut m.f_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &UplinkEvent| { &m.data },
                    |m: &mut UplinkEvent| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "object_json",
                    |m: &UplinkEvent| { &m.object_json },
                    |m: &mut UplinkEvent| { &mut m.object_json },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "tags",
                    |m: &UplinkEvent| { &m.tags },
                    |m: &mut UplinkEvent| { &mut m.tags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UplinkEvent>(
                    "UplinkEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UplinkEvent {
        static mut instance: ::protobuf::lazy::Lazy<UplinkEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UplinkEvent,
        };
        unsafe {
            instance.get(UplinkEvent::new)
        }
    }
}

impl ::protobuf::Clear for UplinkEvent {
    fn clear(&mut self) {
        self.application_id = 0;
        self.application_name.clear();
        self.device_name.clear();
        self.dev_eui.clear();
        self.rx_info.clear();
        self.tx_info.clear();
        self.adr = false;
        self.dr = 0;
        self.f_cnt = 0;
        self.f_port = 0;
        self.data.clear();
        self.object_json.clear();
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UplinkEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UplinkEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JoinEvent {
    // message fields
    pub application_id: u64,
    pub application_name: ::std::string::String,
    pub device_name: ::std::string::String,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub dev_addr: ::std::vec::Vec<u8>,
    pub rx_info: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>,
    pub tx_info: ::protobuf::SingularPtrField<super::gw::UplinkTXInfo>,
    pub dr: u32,
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JoinEvent {
    fn default() -> &'a JoinEvent {
        <JoinEvent as ::protobuf::Message>::default_instance()
    }
}

impl JoinEvent {
    pub fn new() -> JoinEvent {
        ::std::default::Default::default()
    }

    // uint64 application_id = 1;


    pub fn get_application_id(&self) -> u64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: u64) {
        self.application_id = v;
    }

    // string application_name = 2;


    pub fn get_application_name(&self) -> &str {
        &self.application_name
    }
    pub fn clear_application_name(&mut self) {
        self.application_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_name(&mut self, v: ::std::string::String) {
        self.application_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_name(&mut self) -> &mut ::std::string::String {
        &mut self.application_name
    }

    // Take field
    pub fn take_application_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_name, ::std::string::String::new())
    }

    // string device_name = 3;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        self.device_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_name, ::std::string::String::new())
    }

    // bytes dev_eui = 4;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes dev_addr = 5;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }

    // repeated .gw.UplinkRXInfo rx_info = 6;


    pub fn get_rx_info(&self) -> &[super::gw::UplinkRXInfo] {
        &self.rx_info
    }
    pub fn clear_rx_info(&mut self) {
        self.rx_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_rx_info(&mut self, v: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>) {
        self.rx_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rx_info(&mut self) -> &mut ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        &mut self.rx_info
    }

    // Take field
    pub fn take_rx_info(&mut self) -> ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        ::std::mem::replace(&mut self.rx_info, ::protobuf::RepeatedField::new())
    }

    // .gw.UplinkTXInfo tx_info = 7;


    pub fn get_tx_info(&self) -> &super::gw::UplinkTXInfo {
        self.tx_info.as_ref().unwrap_or_else(|| super::gw::UplinkTXInfo::default_instance())
    }
    pub fn clear_tx_info(&mut self) {
        self.tx_info.clear();
    }

    pub fn has_tx_info(&self) -> bool {
        self.tx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_info(&mut self, v: super::gw::UplinkTXInfo) {
        self.tx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_info(&mut self) -> &mut super::gw::UplinkTXInfo {
        if self.tx_info.is_none() {
            self.tx_info.set_default();
        }
        self.tx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_info(&mut self) -> super::gw::UplinkTXInfo {
        self.tx_info.take().unwrap_or_else(|| super::gw::UplinkTXInfo::new())
    }

    // uint32 dr = 8;


    pub fn get_dr(&self) -> u32 {
        self.dr
    }
    pub fn clear_dr(&mut self) {
        self.dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_dr(&mut self, v: u32) {
        self.dr = v;
    }

    // repeated .integration.JoinEvent.TagsEntry tags = 9;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for JoinEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.application_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rx_info)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_info)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dr = tmp;
                },
                9 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.application_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.application_name);
        }
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device_name);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dev_eui);
        }
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.dev_addr);
        }
        for value in &self.rx_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.tx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.dr != 0 {
            my_size += ::protobuf::rt::value_size(8, self.dr, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(9, &self.tags);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.application_id != 0 {
            os.write_uint64(1, self.application_id)?;
        }
        if !self.application_name.is_empty() {
            os.write_string(2, &self.application_name)?;
        }
        if !self.device_name.is_empty() {
            os.write_string(3, &self.device_name)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(4, &self.dev_eui)?;
        }
        if !self.dev_addr.is_empty() {
            os.write_bytes(5, &self.dev_addr)?;
        }
        for v in &self.rx_info {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.tx_info.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.dr != 0 {
            os.write_uint32(8, self.dr)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(9, &self.tags, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JoinEvent {
        JoinEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "application_id",
                    |m: &JoinEvent| { &m.application_id },
                    |m: &mut JoinEvent| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_name",
                    |m: &JoinEvent| { &m.application_name },
                    |m: &mut JoinEvent| { &mut m.application_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_name",
                    |m: &JoinEvent| { &m.device_name },
                    |m: &mut JoinEvent| { &mut m.device_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &JoinEvent| { &m.dev_eui },
                    |m: &mut JoinEvent| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &JoinEvent| { &m.dev_addr },
                    |m: &mut JoinEvent| { &mut m.dev_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkRXInfo>>(
                    "rx_info",
                    |m: &JoinEvent| { &m.rx_info },
                    |m: &mut JoinEvent| { &mut m.rx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkTXInfo>>(
                    "tx_info",
                    |m: &JoinEvent| { &m.tx_info },
                    |m: &mut JoinEvent| { &mut m.tx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "dr",
                    |m: &JoinEvent| { &m.dr },
                    |m: &mut JoinEvent| { &mut m.dr },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "tags",
                    |m: &JoinEvent| { &m.tags },
                    |m: &mut JoinEvent| { &mut m.tags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JoinEvent>(
                    "JoinEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JoinEvent {
        static mut instance: ::protobuf::lazy::Lazy<JoinEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JoinEvent,
        };
        unsafe {
            instance.get(JoinEvent::new)
        }
    }
}

impl ::protobuf::Clear for JoinEvent {
    fn clear(&mut self) {
        self.application_id = 0;
        self.application_name.clear();
        self.device_name.clear();
        self.dev_eui.clear();
        self.dev_addr.clear();
        self.rx_info.clear();
        self.tx_info.clear();
        self.dr = 0;
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JoinEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AckEvent {
    // message fields
    pub application_id: u64,
    pub application_name: ::std::string::String,
    pub device_name: ::std::string::String,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub acknowledged: bool,
    pub f_cnt: u32,
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AckEvent {
    fn default() -> &'a AckEvent {
        <AckEvent as ::protobuf::Message>::default_instance()
    }
}

impl AckEvent {
    pub fn new() -> AckEvent {
        ::std::default::Default::default()
    }

    // uint64 application_id = 1;


    pub fn get_application_id(&self) -> u64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: u64) {
        self.application_id = v;
    }

    // string application_name = 2;


    pub fn get_application_name(&self) -> &str {
        &self.application_name
    }
    pub fn clear_application_name(&mut self) {
        self.application_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_name(&mut self, v: ::std::string::String) {
        self.application_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_name(&mut self) -> &mut ::std::string::String {
        &mut self.application_name
    }

    // Take field
    pub fn take_application_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_name, ::std::string::String::new())
    }

    // string device_name = 3;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        self.device_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_name, ::std::string::String::new())
    }

    // bytes dev_eui = 4;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bool acknowledged = 5;


    pub fn get_acknowledged(&self) -> bool {
        self.acknowledged
    }
    pub fn clear_acknowledged(&mut self) {
        self.acknowledged = false;
    }

    // Param is passed by value, moved
    pub fn set_acknowledged(&mut self, v: bool) {
        self.acknowledged = v;
    }

    // uint32 f_cnt = 6;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // repeated .integration.AckEvent.TagsEntry tags = 7;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for AckEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.application_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.acknowledged = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.application_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.application_name);
        }
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device_name);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dev_eui);
        }
        if self.acknowledged != false {
            my_size += 2;
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(6, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.tags);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.application_id != 0 {
            os.write_uint64(1, self.application_id)?;
        }
        if !self.application_name.is_empty() {
            os.write_string(2, &self.application_name)?;
        }
        if !self.device_name.is_empty() {
            os.write_string(3, &self.device_name)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(4, &self.dev_eui)?;
        }
        if self.acknowledged != false {
            os.write_bool(5, self.acknowledged)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(6, self.f_cnt)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.tags, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AckEvent {
        AckEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "application_id",
                    |m: &AckEvent| { &m.application_id },
                    |m: &mut AckEvent| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_name",
                    |m: &AckEvent| { &m.application_name },
                    |m: &mut AckEvent| { &mut m.application_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_name",
                    |m: &AckEvent| { &m.device_name },
                    |m: &mut AckEvent| { &mut m.device_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &AckEvent| { &m.dev_eui },
                    |m: &mut AckEvent| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "acknowledged",
                    |m: &AckEvent| { &m.acknowledged },
                    |m: &mut AckEvent| { &mut m.acknowledged },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &AckEvent| { &m.f_cnt },
                    |m: &mut AckEvent| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "tags",
                    |m: &AckEvent| { &m.tags },
                    |m: &mut AckEvent| { &mut m.tags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AckEvent>(
                    "AckEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AckEvent {
        static mut instance: ::protobuf::lazy::Lazy<AckEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AckEvent,
        };
        unsafe {
            instance.get(AckEvent::new)
        }
    }
}

impl ::protobuf::Clear for AckEvent {
    fn clear(&mut self) {
        self.application_id = 0;
        self.application_name.clear();
        self.device_name.clear();
        self.dev_eui.clear();
        self.acknowledged = false;
        self.f_cnt = 0;
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AckEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AckEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ErrorEvent {
    // message fields
    pub application_id: u64,
    pub application_name: ::std::string::String,
    pub device_name: ::std::string::String,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub field_type: ErrorType,
    pub error: ::std::string::String,
    pub f_cnt: u32,
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ErrorEvent {
    fn default() -> &'a ErrorEvent {
        <ErrorEvent as ::protobuf::Message>::default_instance()
    }
}

impl ErrorEvent {
    pub fn new() -> ErrorEvent {
        ::std::default::Default::default()
    }

    // uint64 application_id = 1;


    pub fn get_application_id(&self) -> u64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: u64) {
        self.application_id = v;
    }

    // string application_name = 2;


    pub fn get_application_name(&self) -> &str {
        &self.application_name
    }
    pub fn clear_application_name(&mut self) {
        self.application_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_name(&mut self, v: ::std::string::String) {
        self.application_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_name(&mut self) -> &mut ::std::string::String {
        &mut self.application_name
    }

    // Take field
    pub fn take_application_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_name, ::std::string::String::new())
    }

    // string device_name = 3;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        self.device_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_name, ::std::string::String::new())
    }

    // bytes dev_eui = 4;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // .integration.ErrorType type = 5;


    pub fn get_field_type(&self) -> ErrorType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ErrorType::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ErrorType) {
        self.field_type = v;
    }

    // string error = 6;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    // uint32 f_cnt = 7;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // repeated .integration.ErrorEvent.TagsEntry tags = 8;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for ErrorEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.application_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 5, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.application_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.application_name);
        }
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device_name);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dev_eui);
        }
        if self.field_type != ErrorType::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(5, self.field_type);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.error);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(7, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.tags);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.application_id != 0 {
            os.write_uint64(1, self.application_id)?;
        }
        if !self.application_name.is_empty() {
            os.write_string(2, &self.application_name)?;
        }
        if !self.device_name.is_empty() {
            os.write_string(3, &self.device_name)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(4, &self.dev_eui)?;
        }
        if self.field_type != ErrorType::UNKNOWN {
            os.write_enum(5, self.field_type.value())?;
        }
        if !self.error.is_empty() {
            os.write_string(6, &self.error)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(7, self.f_cnt)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.tags, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ErrorEvent {
        ErrorEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "application_id",
                    |m: &ErrorEvent| { &m.application_id },
                    |m: &mut ErrorEvent| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_name",
                    |m: &ErrorEvent| { &m.application_name },
                    |m: &mut ErrorEvent| { &mut m.application_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_name",
                    |m: &ErrorEvent| { &m.device_name },
                    |m: &mut ErrorEvent| { &mut m.device_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &ErrorEvent| { &m.dev_eui },
                    |m: &mut ErrorEvent| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorType>>(
                    "type",
                    |m: &ErrorEvent| { &m.field_type },
                    |m: &mut ErrorEvent| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &ErrorEvent| { &m.error },
                    |m: &mut ErrorEvent| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &ErrorEvent| { &m.f_cnt },
                    |m: &mut ErrorEvent| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "tags",
                    |m: &ErrorEvent| { &m.tags },
                    |m: &mut ErrorEvent| { &mut m.tags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ErrorEvent>(
                    "ErrorEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ErrorEvent {
        static mut instance: ::protobuf::lazy::Lazy<ErrorEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ErrorEvent,
        };
        unsafe {
            instance.get(ErrorEvent::new)
        }
    }
}

impl ::protobuf::Clear for ErrorEvent {
    fn clear(&mut self) {
        self.application_id = 0;
        self.application_name.clear();
        self.device_name.clear();
        self.dev_eui.clear();
        self.field_type = ErrorType::UNKNOWN;
        self.error.clear();
        self.f_cnt = 0;
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ErrorEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatusEvent {
    // message fields
    pub application_id: u64,
    pub application_name: ::std::string::String,
    pub device_name: ::std::string::String,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub margin: u32,
    pub external_power_source: bool,
    pub battery_level_unavailable: bool,
    pub battery_level: f32,
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatusEvent {
    fn default() -> &'a StatusEvent {
        <StatusEvent as ::protobuf::Message>::default_instance()
    }
}

impl StatusEvent {
    pub fn new() -> StatusEvent {
        ::std::default::Default::default()
    }

    // uint64 application_id = 1;


    pub fn get_application_id(&self) -> u64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: u64) {
        self.application_id = v;
    }

    // string application_name = 2;


    pub fn get_application_name(&self) -> &str {
        &self.application_name
    }
    pub fn clear_application_name(&mut self) {
        self.application_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_name(&mut self, v: ::std::string::String) {
        self.application_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_name(&mut self) -> &mut ::std::string::String {
        &mut self.application_name
    }

    // Take field
    pub fn take_application_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_name, ::std::string::String::new())
    }

    // string device_name = 3;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        self.device_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_name, ::std::string::String::new())
    }

    // bytes dev_eui = 4;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // uint32 margin = 5;


    pub fn get_margin(&self) -> u32 {
        self.margin
    }
    pub fn clear_margin(&mut self) {
        self.margin = 0;
    }

    // Param is passed by value, moved
    pub fn set_margin(&mut self, v: u32) {
        self.margin = v;
    }

    // bool external_power_source = 6;


    pub fn get_external_power_source(&self) -> bool {
        self.external_power_source
    }
    pub fn clear_external_power_source(&mut self) {
        self.external_power_source = false;
    }

    // Param is passed by value, moved
    pub fn set_external_power_source(&mut self, v: bool) {
        self.external_power_source = v;
    }

    // bool battery_level_unavailable = 7;


    pub fn get_battery_level_unavailable(&self) -> bool {
        self.battery_level_unavailable
    }
    pub fn clear_battery_level_unavailable(&mut self) {
        self.battery_level_unavailable = false;
    }

    // Param is passed by value, moved
    pub fn set_battery_level_unavailable(&mut self, v: bool) {
        self.battery_level_unavailable = v;
    }

    // float battery_level = 8;


    pub fn get_battery_level(&self) -> f32 {
        self.battery_level
    }
    pub fn clear_battery_level(&mut self) {
        self.battery_level = 0.;
    }

    // Param is passed by value, moved
    pub fn set_battery_level(&mut self, v: f32) {
        self.battery_level = v;
    }

    // repeated .integration.StatusEvent.TagsEntry tags = 9;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for StatusEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.application_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.margin = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.external_power_source = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.battery_level_unavailable = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.battery_level = tmp;
                },
                9 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.application_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.application_name);
        }
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device_name);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dev_eui);
        }
        if self.margin != 0 {
            my_size += ::protobuf::rt::value_size(5, self.margin, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.external_power_source != false {
            my_size += 2;
        }
        if self.battery_level_unavailable != false {
            my_size += 2;
        }
        if self.battery_level != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(9, &self.tags);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.application_id != 0 {
            os.write_uint64(1, self.application_id)?;
        }
        if !self.application_name.is_empty() {
            os.write_string(2, &self.application_name)?;
        }
        if !self.device_name.is_empty() {
            os.write_string(3, &self.device_name)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(4, &self.dev_eui)?;
        }
        if self.margin != 0 {
            os.write_uint32(5, self.margin)?;
        }
        if self.external_power_source != false {
            os.write_bool(6, self.external_power_source)?;
        }
        if self.battery_level_unavailable != false {
            os.write_bool(7, self.battery_level_unavailable)?;
        }
        if self.battery_level != 0. {
            os.write_float(8, self.battery_level)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(9, &self.tags, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatusEvent {
        StatusEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "application_id",
                    |m: &StatusEvent| { &m.application_id },
                    |m: &mut StatusEvent| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_name",
                    |m: &StatusEvent| { &m.application_name },
                    |m: &mut StatusEvent| { &mut m.application_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_name",
                    |m: &StatusEvent| { &m.device_name },
                    |m: &mut StatusEvent| { &mut m.device_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &StatusEvent| { &m.dev_eui },
                    |m: &mut StatusEvent| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "margin",
                    |m: &StatusEvent| { &m.margin },
                    |m: &mut StatusEvent| { &mut m.margin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "external_power_source",
                    |m: &StatusEvent| { &m.external_power_source },
                    |m: &mut StatusEvent| { &mut m.external_power_source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "battery_level_unavailable",
                    |m: &StatusEvent| { &m.battery_level_unavailable },
                    |m: &mut StatusEvent| { &mut m.battery_level_unavailable },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "battery_level",
                    |m: &StatusEvent| { &m.battery_level },
                    |m: &mut StatusEvent| { &mut m.battery_level },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "tags",
                    |m: &StatusEvent| { &m.tags },
                    |m: &mut StatusEvent| { &mut m.tags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StatusEvent>(
                    "StatusEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StatusEvent {
        static mut instance: ::protobuf::lazy::Lazy<StatusEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StatusEvent,
        };
        unsafe {
            instance.get(StatusEvent::new)
        }
    }
}

impl ::protobuf::Clear for StatusEvent {
    fn clear(&mut self) {
        self.application_id = 0;
        self.application_name.clear();
        self.device_name.clear();
        self.dev_eui.clear();
        self.margin = 0;
        self.external_power_source = false;
        self.battery_level_unavailable = false;
        self.battery_level = 0.;
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatusEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocationEvent {
    // message fields
    pub application_id: u64,
    pub application_name: ::std::string::String,
    pub device_name: ::std::string::String,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub location: ::protobuf::SingularPtrField<super::common::Location>,
    pub tags: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocationEvent {
    fn default() -> &'a LocationEvent {
        <LocationEvent as ::protobuf::Message>::default_instance()
    }
}

impl LocationEvent {
    pub fn new() -> LocationEvent {
        ::std::default::Default::default()
    }

    // uint64 application_id = 1;


    pub fn get_application_id(&self) -> u64 {
        self.application_id
    }
    pub fn clear_application_id(&mut self) {
        self.application_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_application_id(&mut self, v: u64) {
        self.application_id = v;
    }

    // string application_name = 2;


    pub fn get_application_name(&self) -> &str {
        &self.application_name
    }
    pub fn clear_application_name(&mut self) {
        self.application_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_name(&mut self, v: ::std::string::String) {
        self.application_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_application_name(&mut self) -> &mut ::std::string::String {
        &mut self.application_name
    }

    // Take field
    pub fn take_application_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.application_name, ::std::string::String::new())
    }

    // string device_name = 3;


    pub fn get_device_name(&self) -> &str {
        &self.device_name
    }
    pub fn clear_device_name(&mut self) {
        self.device_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_name(&mut self, v: ::std::string::String) {
        self.device_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_name(&mut self) -> &mut ::std::string::String {
        &mut self.device_name
    }

    // Take field
    pub fn take_device_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_name, ::std::string::String::new())
    }

    // bytes dev_eui = 4;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // .common.Location location = 5;


    pub fn get_location(&self) -> &super::common::Location {
        self.location.as_ref().unwrap_or_else(|| super::common::Location::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: super::common::Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut super::common::Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> super::common::Location {
        self.location.take().unwrap_or_else(|| super::common::Location::new())
    }

    // repeated .integration.LocationEvent.TagsEntry tags = 6;


    pub fn get_tags(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for LocationEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.application_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.application_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.application_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.application_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.application_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.application_name);
        }
        if !self.device_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.device_name);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dev_eui);
        }
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.tags);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.application_id != 0 {
            os.write_uint64(1, self.application_id)?;
        }
        if !self.application_name.is_empty() {
            os.write_string(2, &self.application_name)?;
        }
        if !self.device_name.is_empty() {
            os.write_string(3, &self.device_name)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(4, &self.dev_eui)?;
        }
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.tags, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocationEvent {
        LocationEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "application_id",
                    |m: &LocationEvent| { &m.application_id },
                    |m: &mut LocationEvent| { &mut m.application_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "application_name",
                    |m: &LocationEvent| { &m.application_name },
                    |m: &mut LocationEvent| { &mut m.application_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "device_name",
                    |m: &LocationEvent| { &m.device_name },
                    |m: &mut LocationEvent| { &mut m.device_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &LocationEvent| { &m.dev_eui },
                    |m: &mut LocationEvent| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Location>>(
                    "location",
                    |m: &LocationEvent| { &m.location },
                    |m: &mut LocationEvent| { &mut m.location },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "tags",
                    |m: &LocationEvent| { &m.tags },
                    |m: &mut LocationEvent| { &mut m.tags },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LocationEvent>(
                    "LocationEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LocationEvent {
        static mut instance: ::protobuf::lazy::Lazy<LocationEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LocationEvent,
        };
        unsafe {
            instance.get(LocationEvent::new)
        }
    }
}

impl ::protobuf::Clear for LocationEvent {
    fn clear(&mut self) {
        self.application_id = 0;
        self.application_name.clear();
        self.device_name.clear();
        self.dev_eui.clear();
        self.location.clear();
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocationEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocationEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorType {
    UNKNOWN = 0,
    DOWNLINK_PAYLOAD_SIZE = 1,
    DOWNLINK_FCNT = 2,
    UPLINK_CODEC = 3,
    DOWNLINK_CODEC = 4,
    OTAA = 5,
    UPLINK_FCNT_RESET = 6,
    UPLINK_MIC = 7,
    UPLINK_FCNT_RETRANSMISSION = 8,
}

impl ::protobuf::ProtobufEnum for ErrorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorType> {
        match value {
            0 => ::std::option::Option::Some(ErrorType::UNKNOWN),
            1 => ::std::option::Option::Some(ErrorType::DOWNLINK_PAYLOAD_SIZE),
            2 => ::std::option::Option::Some(ErrorType::DOWNLINK_FCNT),
            3 => ::std::option::Option::Some(ErrorType::UPLINK_CODEC),
            4 => ::std::option::Option::Some(ErrorType::DOWNLINK_CODEC),
            5 => ::std::option::Option::Some(ErrorType::OTAA),
            6 => ::std::option::Option::Some(ErrorType::UPLINK_FCNT_RESET),
            7 => ::std::option::Option::Some(ErrorType::UPLINK_MIC),
            8 => ::std::option::Option::Some(ErrorType::UPLINK_FCNT_RETRANSMISSION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorType] = &[
            ErrorType::UNKNOWN,
            ErrorType::DOWNLINK_PAYLOAD_SIZE,
            ErrorType::DOWNLINK_FCNT,
            ErrorType::UPLINK_CODEC,
            ErrorType::DOWNLINK_CODEC,
            ErrorType::OTAA,
            ErrorType::UPLINK_FCNT_RESET,
            ErrorType::UPLINK_MIC,
            ErrorType::UPLINK_FCNT_RETRANSMISSION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ErrorType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ErrorType {
}

impl ::std::default::Default for ErrorType {
    fn default() -> Self {
        ErrorType::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20as/integration/integration.proto\x12\x0bintegration\x1a\x13common/\
    common.proto\x1a\x0bgw/gw.proto\"\xe3\x03\n\x0bUplinkEvent\x12%\n\x0eapp\
    lication_id\x18\x01\x20\x01(\x04R\rapplicationID\x12)\n\x10application_n\
    ame\x18\x02\x20\x01(\tR\x0fapplicationName\x12\x1f\n\x0bdevice_name\x18\
    \x03\x20\x01(\tR\ndeviceName\x12\x17\n\x07dev_eui\x18\x04\x20\x01(\x0cR\
    \x06devEUI\x12)\n\x07rx_info\x18\x05\x20\x03(\x0b2\x10.gw.UplinkRXInfoR\
    \x06rxInfo\x12)\n\x07tx_info\x18\x06\x20\x01(\x0b2\x10.gw.UplinkTXInfoR\
    \x06txInfo\x12\x10\n\x03adr\x18\x07\x20\x01(\x08R\x03adr\x12\x0e\n\x02dr\
    \x18\x08\x20\x01(\rR\x02dr\x12\x13\n\x05f_cnt\x18\t\x20\x01(\rR\x04fCnt\
    \x12\x15\n\x06f_port\x18\n\x20\x01(\rR\x05fPort\x12\x12\n\x04data\x18\
    \x0b\x20\x01(\x0cR\x04data\x12\x1f\n\x0bobject_json\x18\x0c\x20\x01(\tR\
    \nobjectJSON\x126\n\x04tags\x18\r\x20\x03(\x0b2\".integration.UplinkEven\
    t.TagsEntryR\x04tags\x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\
    \x87\x03\n\tJoinEvent\x12%\n\x0eapplication_id\x18\x01\x20\x01(\x04R\rap\
    plicationID\x12)\n\x10application_name\x18\x02\x20\x01(\tR\x0fapplicatio\
    nName\x12\x1f\n\x0bdevice_name\x18\x03\x20\x01(\tR\ndeviceName\x12\x17\n\
    \x07dev_eui\x18\x04\x20\x01(\x0cR\x06devEUI\x12\x19\n\x08dev_addr\x18\
    \x05\x20\x01(\x0cR\x07devAddr\x12)\n\x07rx_info\x18\x06\x20\x03(\x0b2\
    \x10.gw.UplinkRXInfoR\x06rxInfo\x12)\n\x07tx_info\x18\x07\x20\x01(\x0b2\
    \x10.gw.UplinkTXInfoR\x06txInfo\x12\x0e\n\x02dr\x18\x08\x20\x01(\rR\x02d\
    r\x124\n\x04tags\x18\t\x20\x03(\x0b2\x20.integration.JoinEvent.TagsEntry\
    R\x04tags\x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xbd\x02\n\
    \x08AckEvent\x12%\n\x0eapplication_id\x18\x01\x20\x01(\x04R\rapplication\
    ID\x12)\n\x10application_name\x18\x02\x20\x01(\tR\x0fapplicationName\x12\
    \x1f\n\x0bdevice_name\x18\x03\x20\x01(\tR\ndeviceName\x12\x17\n\x07dev_e\
    ui\x18\x04\x20\x01(\x0cR\x06devEUI\x12\"\n\x0cacknowledged\x18\x05\x20\
    \x01(\x08R\x0cacknowledged\x12\x13\n\x05f_cnt\x18\x06\x20\x01(\rR\x04fCn\
    t\x123\n\x04tags\x18\x07\x20\x03(\x0b2\x1f.integration.AckEvent.TagsEntr\
    yR\x04tags\x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xdf\x02\n\n\
    ErrorEvent\x12%\n\x0eapplication_id\x18\x01\x20\x01(\x04R\rapplicationID\
    \x12)\n\x10application_name\x18\x02\x20\x01(\tR\x0fapplicationName\x12\
    \x1f\n\x0bdevice_name\x18\x03\x20\x01(\tR\ndeviceName\x12\x17\n\x07dev_e\
    ui\x18\x04\x20\x01(\x0cR\x06devEUI\x12*\n\x04type\x18\x05\x20\x01(\x0e2\
    \x16.integration.ErrorTypeR\x04type\x12\x14\n\x05error\x18\x06\x20\x01(\
    \tR\x05error\x12\x13\n\x05f_cnt\x18\x07\x20\x01(\rR\x04fCnt\x125\n\x04ta\
    gs\x18\x08\x20\x03(\x0b2!.integration.ErrorEvent.TagsEntryR\x04tags\x1a7\
    \n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05v\
    alue\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xb7\x03\n\x0bStatusEvent\
    \x12%\n\x0eapplication_id\x18\x01\x20\x01(\x04R\rapplicationID\x12)\n\
    \x10application_name\x18\x02\x20\x01(\tR\x0fapplicationName\x12\x1f\n\
    \x0bdevice_name\x18\x03\x20\x01(\tR\ndeviceName\x12\x17\n\x07dev_eui\x18\
    \x04\x20\x01(\x0cR\x06devEUI\x12\x16\n\x06margin\x18\x05\x20\x01(\rR\x06\
    margin\x122\n\x15external_power_source\x18\x06\x20\x01(\x08R\x13external\
    PowerSource\x12:\n\x19battery_level_unavailable\x18\x07\x20\x01(\x08R\
    \x17batteryLevelUnavailable\x12#\n\rbattery_level\x18\x08\x20\x01(\x02R\
    \x0cbatteryLevel\x126\n\x04tags\x18\t\x20\x03(\x0b2\".integration.Status\
    Event.TagsEntryR\x04tags\x1a7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\"\xbc\x02\n\rLocationEvent\x12%\n\x0eapplication_id\x18\x01\x20\x01\
    (\x04R\rapplicationID\x12)\n\x10application_name\x18\x02\x20\x01(\tR\x0f\
    applicationName\x12\x1f\n\x0bdevice_name\x18\x03\x20\x01(\tR\ndeviceName\
    \x12\x17\n\x07dev_eui\x18\x04\x20\x01(\x0cR\x06devEUI\x12,\n\x08location\
    \x18\x05\x20\x01(\x0b2\x10.common.LocationR\x08location\x128\n\x04tags\
    \x18\x06\x20\x03(\x0b2$.integration.LocationEvent.TagsEntryR\x04tags\x1a\
    7\n\tTagsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05\
    value\x18\x02\x20\x01(\tR\x05value:\x028\x01*\xbd\x01\n\tErrorType\x12\
    \x0b\n\x07UNKNOWN\x10\0\x12\x19\n\x15DOWNLINK_PAYLOAD_SIZE\x10\x01\x12\
    \x11\n\rDOWNLINK_FCNT\x10\x02\x12\x10\n\x0cUPLINK_CODEC\x10\x03\x12\x12\
    \n\x0eDOWNLINK_CODEC\x10\x04\x12\x08\n\x04OTAA\x10\x05\x12\x15\n\x11UPLI\
    NK_FCNT_RESET\x10\x06\x12\x0e\n\nUPLINK_MIC\x10\x07\x12\x1e\n\x1aUPLINK_\
    FCNT_RETRANSMISSION\x10\x08B8Z6github.com/brocaar/chirpstack-api/go/v3/a\
    s/integrationJ\x9b8\n\x07\x12\x05\0\0\xda\x01\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x13\n\x08\n\x01\x08\x12\x03\
    \x04\0M\n\t\n\x02\x08\x0b\x12\x03\x04\0M\n\t\n\x02\x03\0\x12\x03\x06\x07\
    \x1c\n\t\n\x02\x03\x01\x12\x03\x07\x07\x14\n\n\n\x02\x05\0\x12\x04\t\0&\
    \x01\n\n\n\x03\x05\0\x01\x12\x03\t\x05\x0e\n\x1c\n\x04\x05\0\x02\0\x12\
    \x03\x0b\x04\x10\x1a\x0f\x20Unknown\x20type.\n\n\x0c\n\x05\x05\0\x02\0\
    \x01\x12\x03\x0b\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x0b\x0e\x0f\
    \n\x84\x01\n\x04\x05\0\x02\x01\x12\x03\x0f\x04\x1e\x1aw\x20Error\x20rela\
    ted\x20to\x20the\x20downlink\x20payload\x20size.\n\x20Usually\x20seen\
    \x20when\x20the\x20payload\x20exceeded\x20the\x20maximum\x20allowed\x20p\
    ayload\x20size.\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0f\x04\x19\n\
    \x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0f\x1c\x1d\nw\n\x04\x05\0\x02\x02\
    \x12\x03\x13\x04\x16\x1aj\x20Error\x20related\x20to\x20the\x20downlink\
    \x20frame-counter.\n\x20Usually\x20seen\x20when\x20the\x20frame-counter\
    \x20has\x20already\x20been\x20used.\n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\x13\x04\x11\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x13\x14\x15\n\"\n\
    \x04\x05\0\x02\x03\x12\x03\x16\x04\x15\x1a\x15\x20Uplink\x20codec\x20err\
    or.\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x16\x04\x10\n\x0c\n\x05\x05\
    \0\x02\x03\x02\x12\x03\x16\x13\x14\n$\n\x04\x05\0\x02\x04\x12\x03\x19\
    \x04\x17\x1a\x17\x20Downlink\x20codec\x20error.\n\n\x0c\n\x05\x05\0\x02\
    \x04\x01\x12\x03\x19\x04\x12\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x19\
    \x15\x16\n\x1a\n\x04\x05\0\x02\x05\x12\x03\x1c\x04\r\x1a\r\x20OTAA\x20er\
    ror.\n\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x1c\x04\x08\n\x0c\n\x05\x05\
    \0\x02\x05\x02\x12\x03\x1c\x0b\x0c\n.\n\x04\x05\0\x02\x06\x12\x03\x1f\
    \x04\x1a\x1a!\x20Uplink\x20frame-counter\x20was\x20reset.\n\n\x0c\n\x05\
    \x05\0\x02\x06\x01\x12\x03\x1f\x04\x15\n\x0c\n\x05\x05\0\x02\x06\x02\x12\
    \x03\x1f\x18\x19\n\x20\n\x04\x05\0\x02\x07\x12\x03\"\x04\x13\x1a\x13\x20\
    Uplink\x20MIC\x20error.\n\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\"\x04\
    \x0e\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\"\x11\x12\n3\n\x04\x05\0\x02\
    \x08\x12\x03%\x04#\x1a&\x20Uplink\x20frame-counter\x20retransmission.\n\
    \n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03%\x04\x1e\n\x0c\n\x05\x05\0\x02\
    \x08\x02\x12\x03%!\"\nW\n\x02\x04\0\x12\x04)\0Q\x01\x1aK\x20UplinkEvent\
    \x20is\x20the\x20message\x20sent\x20when\x20an\x20uplink\x20payload\x20h\
    as\x20been\x20received.\n\n\n\n\x03\x04\0\x01\x12\x03)\x08\x13\n\x1e\n\
    \x04\x04\0\x02\0\x12\x03+\x04<\x1a\x11\x20Application\x20ID.\n\n\r\n\x05\
    \x04\0\x02\0\x04\x12\x04+\x04)\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03+\
    \x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03+\x0b\x19\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03+\x1c\x1d\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03+\x1e;\n\
    \x0c\n\x05\x04\0\x02\0\n\x12\x03++:\n\x20\n\x04\x04\0\x02\x01\x12\x03.\
    \x04\x20\x1a\x13\x20Application\x20name.\n\n\r\n\x05\x04\0\x02\x01\x04\
    \x12\x04.\x04+<\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03.\x04\n\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03.\x0b\x1b\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03.\x1e\x1f\n\x1b\n\x04\x04\0\x02\x02\x12\x031\x04\x1b\x1a\x0e\x20Devi\
    ce\x20name.\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x041\x04.\x20\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x031\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x031\
    \x0b\x16\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x031\x19\x1a\n\x1a\n\x04\x04\
    \0\x02\x03\x12\x034\x04-\x1a\r\x20Device\x20EUI.\n\n\r\n\x05\x04\0\x02\
    \x03\x04\x12\x044\x041\x1b\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x034\x04\t\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x034\n\x11\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x034\x14\x15\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x034\x16,\n\x0c\
    \n\x05\x04\0\x02\x03\n\x12\x034#+\n)\n\x04\x04\0\x02\x04\x12\x037\x04)\
    \x1a\x1c\x20Receiving\x20gateway\x20RX\x20info.\n\n\x0c\n\x05\x04\0\x02\
    \x04\x04\x12\x037\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x037\r\x1c\n\
    \x0c\n\x05\x04\0\x02\x04\x01\x12\x037\x1d$\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x037'(\n\x17\n\x04\x04\0\x02\x05\x12\x03:\x04\x20\x1a\n\x20TX\x20in\
    fo.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04:\x047)\n\x0c\n\x05\x04\0\x02\
    \x05\x06\x12\x03:\x04\x13\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03:\x14\x1b\
    \n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03:\x1e\x1f\n&\n\x04\x04\0\x02\x06\
    \x12\x03=\x04\x11\x1a\x19\x20Device\x20has\x20ADR\x20bit\x20set.\n\n\r\n\
    \x05\x04\0\x02\x06\x04\x12\x04=\x04:\x20\n\x0c\n\x05\x04\0\x02\x06\x05\
    \x12\x03=\x04\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03=\t\x0c\n\x0c\n\
    \x05\x04\0\x02\x06\x03\x12\x03=\x0f\x10\n\x19\n\x04\x04\0\x02\x07\x12\
    \x03@\x04\x12\x1a\x0c\x20Data-rate.\n\n\r\n\x05\x04\0\x02\x07\x04\x12\
    \x04@\x04=\x11\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03@\x04\n\n\x0c\n\x05\
    \x04\0\x02\x07\x01\x12\x03@\x0b\r\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03@\
    \x10\x11\n\x1d\n\x04\x04\0\x02\x08\x12\x03C\x04\x15\x1a\x10\x20Frame\x20\
    counter.\n\n\r\n\x05\x04\0\x02\x08\x04\x12\x04C\x04@\x12\n\x0c\n\x05\x04\
    \0\x02\x08\x05\x12\x03C\x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03C\x0b\
    \x10\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03C\x13\x14\n\x1a\n\x04\x04\0\
    \x02\t\x12\x03F\x04\x17\x1a\r\x20Frame\x20port.\n\n\r\n\x05\x04\0\x02\t\
    \x04\x12\x04F\x04C\x15\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03F\x04\n\n\x0c\
    \n\x05\x04\0\x02\t\x01\x12\x03F\x0b\x11\n\x0c\n\x05\x04\0\x02\t\x03\x12\
    \x03F\x14\x16\n\x1f\n\x04\x04\0\x02\n\x12\x03I\x04\x14\x1a\x12\x20FRMPay\
    load\x20data.\n\n\r\n\x05\x04\0\x02\n\x04\x12\x04I\x04F\x17\n\x0c\n\x05\
    \x04\0\x02\n\x05\x12\x03I\x04\t\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03I\n\
    \x0e\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03I\x11\x13\n\x87\x01\n\x04\x04\0\
    \x02\x0b\x12\x03M\x047\x1az\x20JSON\x20string\x20containing\x20the\x20de\
    coded\x20object.\n\x20Note\x20that\x20this\x20is\x20only\x20set\x20when\
    \x20a\x20codec\x20is\x20configured\x20in\x20the\x20Device\x20Profile.\n\
    \n\r\n\x05\x04\0\x02\x0b\x04\x12\x04M\x04I\x14\n\x0c\n\x05\x04\0\x02\x0b\
    \x05\x12\x03M\x04\n\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03M\x0b\x16\n\x0c\
    \n\x05\x04\0\x02\x0b\x03\x12\x03M\x19\x1b\n\x0c\n\x05\x04\0\x02\x0b\x08\
    \x12\x03M\x1c6\n\x0c\n\x05\x04\0\x02\x0b\n\x12\x03M)5\n(\n\x04\x04\0\x02\
    \x0c\x12\x03P\x04\"\x1a\x1b\x20User-defined\x20device\x20tags.\n\n\r\n\
    \x05\x04\0\x02\x0c\x04\x12\x04P\x04M7\n\x0c\n\x05\x04\0\x02\x0c\x06\x12\
    \x03P\x04\x17\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x03P\x18\x1c\n\x0c\n\x05\
    \x04\0\x02\x0c\x03\x12\x03P\x1f!\n\xad\x01\n\x02\x04\x01\x12\x04V\0q\x01\
    \x1a\xa0\x01\x20JoinEvent\x20is\x20the\x20message\x20sent\x20when\x20a\
    \x20device\x20joined\x20the\x20network.\n\x20Note\x20that\x20this\x20is\
    \x20only\x20sent\x20after\x20the\x20first\x20received\x20uplink\x20after\
    \x20the\n\x20device\x20(re)activation.\n\n\n\n\x03\x04\x01\x01\x12\x03V\
    \x08\x11\n\x1e\n\x04\x04\x01\x02\0\x12\x03X\x04<\x1a\x11\x20Application\
    \x20ID.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04X\x04V\x13\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03X\x0b\
    \x19\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03X\x1c\x1d\n\x0c\n\x05\x04\x01\
    \x02\0\x08\x12\x03X\x1e;\n\x0c\n\x05\x04\x01\x02\0\n\x12\x03X+:\n\x20\n\
    \x04\x04\x01\x02\x01\x12\x03[\x04\x20\x1a\x13\x20Application\x20name.\n\
    \n\r\n\x05\x04\x01\x02\x01\x04\x12\x04[\x04X<\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03[\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03[\x0b\x1b\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03[\x1e\x1f\n\x1b\n\x04\x04\x01\
    \x02\x02\x12\x03^\x04\x1b\x1a\x0e\x20Device\x20name.\n\n\r\n\x05\x04\x01\
    \x02\x02\x04\x12\x04^\x04[\x20\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03^\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03^\x0b\x16\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03^\x19\x1a\n\x1a\n\x04\x04\x01\x02\x03\x12\x03a\
    \x04-\x1a\r\x20Device\x20EUI.\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04a\
    \x04^\x1b\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03a\x04\t\n\x0c\n\x05\x04\
    \x01\x02\x03\x01\x12\x03a\n\x11\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03a\
    \x14\x15\n\x0c\n\x05\x04\x01\x02\x03\x08\x12\x03a\x16,\n\x0c\n\x05\x04\
    \x01\x02\x03\n\x12\x03a#+\n\x1e\n\x04\x04\x01\x02\x04\x12\x03d\x04\x17\
    \x1a\x11\x20Device\x20address.\n\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04d\
    \x04a-\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03d\x04\t\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x03d\n\x12\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03d\
    \x15\x16\n)\n\x04\x04\x01\x02\x05\x12\x03g\x04)\x1a\x1c\x20Receiving\x20\
    gateway\x20RX\x20info.\n\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03g\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\x03g\r\x1c\n\x0c\n\x05\x04\x01\
    \x02\x05\x01\x12\x03g\x1d$\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03g'(\n\
    \x17\n\x04\x04\x01\x02\x06\x12\x03j\x04\x20\x1a\n\x20TX\x20info.\n\n\r\n\
    \x05\x04\x01\x02\x06\x04\x12\x04j\x04g)\n\x0c\n\x05\x04\x01\x02\x06\x06\
    \x12\x03j\x04\x13\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03j\x14\x1b\n\x0c\
    \n\x05\x04\x01\x02\x06\x03\x12\x03j\x1e\x1f\n\x19\n\x04\x04\x01\x02\x07\
    \x12\x03m\x04\x12\x1a\x0c\x20Data-rate.\n\n\r\n\x05\x04\x01\x02\x07\x04\
    \x12\x04m\x04j\x20\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03m\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x07\x01\x12\x03m\x0b\r\n\x0c\n\x05\x04\x01\x02\x07\
    \x03\x12\x03m\x10\x11\n(\n\x04\x04\x01\x02\x08\x12\x03p\x04!\x1a\x1b\x20\
    User-defined\x20device\x20tags.\n\n\r\n\x05\x04\x01\x02\x08\x04\x12\x04p\
    \x04m\x12\n\x0c\n\x05\x04\x01\x02\x08\x06\x12\x03p\x04\x17\n\x0c\n\x05\
    \x04\x01\x02\x08\x01\x12\x03p\x18\x1c\n\x0c\n\x05\x04\x01\x02\x08\x03\
    \x12\x03p\x1f\x20\n\x8c\x01\n\x02\x04\x02\x12\x05u\0\x8a\x01\x01\x1a\x7f\
    \x20AckEvent\x20is\x20the\x20message\x20sent\x20when\x20a\x20confirmatio\
    n\x20on\x20a\x20confirmed\x20downlink\n\x20has\x20been\x20received\x20-o\
    r-\x20when\x20the\x20downlink\x20timed\x20out.\n\n\n\n\x03\x04\x02\x01\
    \x12\x03u\x08\x10\n\x1e\n\x04\x04\x02\x02\0\x12\x03w\x04<\x1a\x11\x20App\
    lication\x20ID.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04w\x04u\x12\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03w\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03w\x0b\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03w\x1c\x1d\n\x0c\n\x05\
    \x04\x02\x02\0\x08\x12\x03w\x1e;\n\x0c\n\x05\x04\x02\x02\0\n\x12\x03w+:\
    \n\x20\n\x04\x04\x02\x02\x01\x12\x03z\x04\x20\x1a\x13\x20Application\x20\
    name.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04z\x04w<\n\x0c\n\x05\x04\x02\
    \x02\x01\x05\x12\x03z\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03z\x0b\
    \x1b\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03z\x1e\x1f\n\x1b\n\x04\x04\
    \x02\x02\x02\x12\x03}\x04\x1b\x1a\x0e\x20Device\x20name.\n\n\r\n\x05\x04\
    \x02\x02\x02\x04\x12\x04}\x04z\x20\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03}\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03}\x0b\x16\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03}\x19\x1a\n\x1b\n\x04\x04\x02\x02\x03\x12\
    \x04\x80\x01\x04-\x1a\r\x20Device\x20EUI.\n\n\x0e\n\x05\x04\x02\x02\x03\
    \x04\x12\x05\x80\x01\x04}\x1b\n\r\n\x05\x04\x02\x02\x03\x05\x12\x04\x80\
    \x01\x04\t\n\r\n\x05\x04\x02\x02\x03\x01\x12\x04\x80\x01\n\x11\n\r\n\x05\
    \x04\x02\x02\x03\x03\x12\x04\x80\x01\x14\x15\n\r\n\x05\x04\x02\x02\x03\
    \x08\x12\x04\x80\x01\x16,\n\r\n\x05\x04\x02\x02\x03\n\x12\x04\x80\x01#+\
    \n'\n\x04\x04\x02\x02\x04\x12\x04\x83\x01\x04\x1a\x1a\x19\x20Frame\x20wa\
    s\x20acknowledged.\n\n\x0f\n\x05\x04\x02\x02\x04\x04\x12\x06\x83\x01\x04\
    \x80\x01-\n\r\n\x05\x04\x02\x02\x04\x05\x12\x04\x83\x01\x04\x08\n\r\n\
    \x05\x04\x02\x02\x04\x01\x12\x04\x83\x01\t\x15\n\r\n\x05\x04\x02\x02\x04\
    \x03\x12\x04\x83\x01\x18\x19\nL\n\x04\x04\x02\x02\x05\x12\x04\x86\x01\
    \x04\x15\x1a>\x20Downlink\x20frame\x20counter\x20to\x20which\x20the\x20a\
    cknowledgement\x20relates.\n\n\x0f\n\x05\x04\x02\x02\x05\x04\x12\x06\x86\
    \x01\x04\x83\x01\x1a\n\r\n\x05\x04\x02\x02\x05\x05\x12\x04\x86\x01\x04\n\
    \n\r\n\x05\x04\x02\x02\x05\x01\x12\x04\x86\x01\x0b\x10\n\r\n\x05\x04\x02\
    \x02\x05\x03\x12\x04\x86\x01\x13\x14\n)\n\x04\x04\x02\x02\x06\x12\x04\
    \x89\x01\x04!\x1a\x1b\x20User-defined\x20device\x20tags.\n\n\x0f\n\x05\
    \x04\x02\x02\x06\x04\x12\x06\x89\x01\x04\x86\x01\x15\n\r\n\x05\x04\x02\
    \x02\x06\x06\x12\x04\x89\x01\x04\x17\n\r\n\x05\x04\x02\x02\x06\x01\x12\
    \x04\x89\x01\x18\x1c\n\r\n\x05\x04\x02\x02\x06\x03\x12\x04\x89\x01\x1f\
    \x20\nF\n\x02\x04\x03\x12\x06\x8d\x01\0\xa5\x01\x01\x1a8\x20ErrorEvent\
    \x20is\x20the\x20message\x20sent\x20when\x20an\x20error\x20occurred.\n\n\
    \x0b\n\x03\x04\x03\x01\x12\x04\x8d\x01\x08\x12\n\x1f\n\x04\x04\x03\x02\0\
    \x12\x04\x8f\x01\x04<\x1a\x11\x20Application\x20ID.\n\n\x0f\n\x05\x04\
    \x03\x02\0\x04\x12\x06\x8f\x01\x04\x8d\x01\x14\n\r\n\x05\x04\x03\x02\0\
    \x05\x12\x04\x8f\x01\x04\n\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x8f\x01\
    \x0b\x19\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x8f\x01\x1c\x1d\n\r\n\x05\
    \x04\x03\x02\0\x08\x12\x04\x8f\x01\x1e;\n\r\n\x05\x04\x03\x02\0\n\x12\
    \x04\x8f\x01+:\n!\n\x04\x04\x03\x02\x01\x12\x04\x92\x01\x04\x20\x1a\x13\
    \x20Application\x20name.\n\n\x0f\n\x05\x04\x03\x02\x01\x04\x12\x06\x92\
    \x01\x04\x8f\x01<\n\r\n\x05\x04\x03\x02\x01\x05\x12\x04\x92\x01\x04\n\n\
    \r\n\x05\x04\x03\x02\x01\x01\x12\x04\x92\x01\x0b\x1b\n\r\n\x05\x04\x03\
    \x02\x01\x03\x12\x04\x92\x01\x1e\x1f\n\x1c\n\x04\x04\x03\x02\x02\x12\x04\
    \x95\x01\x04\x1b\x1a\x0e\x20Device\x20name.\n\n\x0f\n\x05\x04\x03\x02\
    \x02\x04\x12\x06\x95\x01\x04\x92\x01\x20\n\r\n\x05\x04\x03\x02\x02\x05\
    \x12\x04\x95\x01\x04\n\n\r\n\x05\x04\x03\x02\x02\x01\x12\x04\x95\x01\x0b\
    \x16\n\r\n\x05\x04\x03\x02\x02\x03\x12\x04\x95\x01\x19\x1a\n\x1b\n\x04\
    \x04\x03\x02\x03\x12\x04\x98\x01\x04-\x1a\r\x20Device\x20EUI.\n\n\x0f\n\
    \x05\x04\x03\x02\x03\x04\x12\x06\x98\x01\x04\x95\x01\x1b\n\r\n\x05\x04\
    \x03\x02\x03\x05\x12\x04\x98\x01\x04\t\n\r\n\x05\x04\x03\x02\x03\x01\x12\
    \x04\x98\x01\n\x11\n\r\n\x05\x04\x03\x02\x03\x03\x12\x04\x98\x01\x14\x15\
    \n\r\n\x05\x04\x03\x02\x03\x08\x12\x04\x98\x01\x16,\n\r\n\x05\x04\x03\
    \x02\x03\n\x12\x04\x98\x01#+\n\x1b\n\x04\x04\x03\x02\x04\x12\x04\x9b\x01\
    \x04\x17\x1a\r\x20Error\x20type.\n\n\x0f\n\x05\x04\x03\x02\x04\x04\x12\
    \x06\x9b\x01\x04\x98\x01-\n\r\n\x05\x04\x03\x02\x04\x06\x12\x04\x9b\x01\
    \x04\r\n\r\n\x05\x04\x03\x02\x04\x01\x12\x04\x9b\x01\x0e\x12\n\r\n\x05\
    \x04\x03\x02\x04\x03\x12\x04\x9b\x01\x15\x16\n\x1e\n\x04\x04\x03\x02\x05\
    \x12\x04\x9e\x01\x04\x15\x1a\x10\x20Error\x20message.\n\n\x0f\n\x05\x04\
    \x03\x02\x05\x04\x12\x06\x9e\x01\x04\x9b\x01\x17\n\r\n\x05\x04\x03\x02\
    \x05\x05\x12\x04\x9e\x01\x04\n\n\r\n\x05\x04\x03\x02\x05\x01\x12\x04\x9e\
    \x01\x0b\x10\n\r\n\x05\x04\x03\x02\x05\x03\x12\x04\x9e\x01\x13\x14\na\n\
    \x04\x04\x03\x02\x06\x12\x04\xa1\x01\x04\x15\x1aS\x20Downlink\x20frame-c\
    ounter\x20(in\x20case\x20the\x20downlink\x20is\x20related\x20to\x20a\x20\
    scheduled\x20downlink).\n\n\x0f\n\x05\x04\x03\x02\x06\x04\x12\x06\xa1\
    \x01\x04\x9e\x01\x15\n\r\n\x05\x04\x03\x02\x06\x05\x12\x04\xa1\x01\x04\n\
    \n\r\n\x05\x04\x03\x02\x06\x01\x12\x04\xa1\x01\x0b\x10\n\r\n\x05\x04\x03\
    \x02\x06\x03\x12\x04\xa1\x01\x13\x14\n)\n\x04\x04\x03\x02\x07\x12\x04\
    \xa4\x01\x04!\x1a\x1b\x20User-defined\x20device\x20tags.\n\n\x0f\n\x05\
    \x04\x03\x02\x07\x04\x12\x06\xa4\x01\x04\xa1\x01\x15\n\r\n\x05\x04\x03\
    \x02\x07\x06\x12\x04\xa4\x01\x04\x17\n\r\n\x05\x04\x03\x02\x07\x01\x12\
    \x04\xa4\x01\x18\x1c\n\r\n\x05\x04\x03\x02\x07\x03\x12\x04\xa4\x01\x1f\
    \x20\ni\n\x02\x04\x04\x12\x06\xa9\x01\0\xc5\x01\x01\x1a[\x20StatusEvent\
    \x20is\x20the\x20message\x20sent\x20when\x20a\x20device-status\x20mac-co\
    mmand\x20was\x20sent\n\x20by\x20the\x20device.\n\n\x0b\n\x03\x04\x04\x01\
    \x12\x04\xa9\x01\x08\x13\n\x1f\n\x04\x04\x04\x02\0\x12\x04\xab\x01\x04<\
    \x1a\x11\x20Application\x20ID.\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\
    \xab\x01\x04\xa9\x01\x15\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\xab\x01\x04\
    \n\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xab\x01\x0b\x19\n\r\n\x05\x04\x04\
    \x02\0\x03\x12\x04\xab\x01\x1c\x1d\n\r\n\x05\x04\x04\x02\0\x08\x12\x04\
    \xab\x01\x1e;\n\r\n\x05\x04\x04\x02\0\n\x12\x04\xab\x01+:\n!\n\x04\x04\
    \x04\x02\x01\x12\x04\xae\x01\x04\x20\x1a\x13\x20Application\x20name.\n\n\
    \x0f\n\x05\x04\x04\x02\x01\x04\x12\x06\xae\x01\x04\xab\x01<\n\r\n\x05\
    \x04\x04\x02\x01\x05\x12\x04\xae\x01\x04\n\n\r\n\x05\x04\x04\x02\x01\x01\
    \x12\x04\xae\x01\x0b\x1b\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\xae\x01\
    \x1e\x1f\n\x1c\n\x04\x04\x04\x02\x02\x12\x04\xb1\x01\x04\x1b\x1a\x0e\x20\
    Device\x20name.\n\n\x0f\n\x05\x04\x04\x02\x02\x04\x12\x06\xb1\x01\x04\
    \xae\x01\x20\n\r\n\x05\x04\x04\x02\x02\x05\x12\x04\xb1\x01\x04\n\n\r\n\
    \x05\x04\x04\x02\x02\x01\x12\x04\xb1\x01\x0b\x16\n\r\n\x05\x04\x04\x02\
    \x02\x03\x12\x04\xb1\x01\x19\x1a\n\x1b\n\x04\x04\x04\x02\x03\x12\x04\xb4\
    \x01\x04-\x1a\r\x20Device\x20EUI.\n\n\x0f\n\x05\x04\x04\x02\x03\x04\x12\
    \x06\xb4\x01\x04\xb1\x01\x1b\n\r\n\x05\x04\x04\x02\x03\x05\x12\x04\xb4\
    \x01\x04\t\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\xb4\x01\n\x11\n\r\n\x05\
    \x04\x04\x02\x03\x03\x12\x04\xb4\x01\x14\x15\n\r\n\x05\x04\x04\x02\x03\
    \x08\x12\x04\xb4\x01\x16,\n\r\n\x05\x04\x04\x02\x03\n\x12\x04\xb4\x01#+\
    \n\x8d\x01\n\x04\x04\x04\x02\x04\x12\x04\xb8\x01\x04\x16\x1a\x7f\x20The\
    \x20demodulation\x20signal-to-noise\x20ratio\x20in\x20dB\x20for\x20the\
    \x20last\x20successfully\n\x20received\x20device-status\x20request\x20by\
    \x20the\x20Network\x20Server.\n\n\x0f\n\x05\x04\x04\x02\x04\x04\x12\x06\
    \xb8\x01\x04\xb4\x01-\n\r\n\x05\x04\x04\x02\x04\x05\x12\x04\xb8\x01\x04\
    \n\n\r\n\x05\x04\x04\x02\x04\x01\x12\x04\xb8\x01\x0b\x11\n\r\n\x05\x04\
    \x04\x02\x04\x03\x12\x04\xb8\x01\x14\x15\n@\n\x04\x04\x04\x02\x05\x12\
    \x04\xbb\x01\x04#\x1a2\x20Device\x20is\x20connected\x20to\x20an\x20exter\
    nal\x20power\x20source.\n\n\x0f\n\x05\x04\x04\x02\x05\x04\x12\x06\xbb\
    \x01\x04\xb8\x01\x16\n\r\n\x05\x04\x04\x02\x05\x05\x12\x04\xbb\x01\x04\
    \x08\n\r\n\x05\x04\x04\x02\x05\x01\x12\x04\xbb\x01\t\x1e\n\r\n\x05\x04\
    \x04\x02\x05\x03\x12\x04\xbb\x01!\"\n/\n\x04\x04\x04\x02\x06\x12\x04\xbe\
    \x01\x04'\x1a!\x20Battery\x20level\x20is\x20not\x20available.\n\n\x0f\n\
    \x05\x04\x04\x02\x06\x04\x12\x06\xbe\x01\x04\xbb\x01#\n\r\n\x05\x04\x04\
    \x02\x06\x05\x12\x04\xbe\x01\x04\x08\n\r\n\x05\x04\x04\x02\x06\x01\x12\
    \x04\xbe\x01\t\"\n\r\n\x05\x04\x04\x02\x06\x03\x12\x04\xbe\x01%&\n\x1e\n\
    \x04\x04\x04\x02\x07\x12\x04\xc1\x01\x04\x1c\x1a\x10\x20Battery\x20level\
    .\n\n\x0f\n\x05\x04\x04\x02\x07\x04\x12\x06\xc1\x01\x04\xbe\x01'\n\r\n\
    \x05\x04\x04\x02\x07\x05\x12\x04\xc1\x01\x04\t\n\r\n\x05\x04\x04\x02\x07\
    \x01\x12\x04\xc1\x01\n\x17\n\r\n\x05\x04\x04\x02\x07\x03\x12\x04\xc1\x01\
    \x1a\x1b\n)\n\x04\x04\x04\x02\x08\x12\x04\xc4\x01\x04!\x1a\x1b\x20User-d\
    efined\x20device\x20tags.\n\n\x0f\n\x05\x04\x04\x02\x08\x04\x12\x06\xc4\
    \x01\x04\xc1\x01\x1c\n\r\n\x05\x04\x04\x02\x08\x06\x12\x04\xc4\x01\x04\
    \x17\n\r\n\x05\x04\x04\x02\x08\x01\x12\x04\xc4\x01\x18\x1c\n\r\n\x05\x04\
    \x04\x02\x08\x03\x12\x04\xc4\x01\x1f\x20\nZ\n\x02\x04\x05\x12\x06\xc8\
    \x01\0\xda\x01\x01\x1aL\x20LocationEvent\x20is\x20the\x20message\x20sent\
    \x20when\x20a\x20geolocation\x20resolve\x20was\x20returned.\n\n\x0b\n\
    \x03\x04\x05\x01\x12\x04\xc8\x01\x08\x15\n\x1f\n\x04\x04\x05\x02\0\x12\
    \x04\xca\x01\x04<\x1a\x11\x20Application\x20ID.\n\n\x0f\n\x05\x04\x05\
    \x02\0\x04\x12\x06\xca\x01\x04\xc8\x01\x17\n\r\n\x05\x04\x05\x02\0\x05\
    \x12\x04\xca\x01\x04\n\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\xca\x01\x0b\
    \x19\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\xca\x01\x1c\x1d\n\r\n\x05\x04\
    \x05\x02\0\x08\x12\x04\xca\x01\x1e;\n\r\n\x05\x04\x05\x02\0\n\x12\x04\
    \xca\x01+:\n!\n\x04\x04\x05\x02\x01\x12\x04\xcd\x01\x04\x20\x1a\x13\x20A\
    pplication\x20name.\n\n\x0f\n\x05\x04\x05\x02\x01\x04\x12\x06\xcd\x01\
    \x04\xca\x01<\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xcd\x01\x04\n\n\r\n\
    \x05\x04\x05\x02\x01\x01\x12\x04\xcd\x01\x0b\x1b\n\r\n\x05\x04\x05\x02\
    \x01\x03\x12\x04\xcd\x01\x1e\x1f\n\x1c\n\x04\x04\x05\x02\x02\x12\x04\xd0\
    \x01\x04\x1b\x1a\x0e\x20Device\x20name.\n\n\x0f\n\x05\x04\x05\x02\x02\
    \x04\x12\x06\xd0\x01\x04\xcd\x01\x20\n\r\n\x05\x04\x05\x02\x02\x05\x12\
    \x04\xd0\x01\x04\n\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xd0\x01\x0b\x16\
    \n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xd0\x01\x19\x1a\n\x1b\n\x04\x04\
    \x05\x02\x03\x12\x04\xd3\x01\x04-\x1a\r\x20Device\x20EUI.\n\n\x0f\n\x05\
    \x04\x05\x02\x03\x04\x12\x06\xd3\x01\x04\xd0\x01\x1b\n\r\n\x05\x04\x05\
    \x02\x03\x05\x12\x04\xd3\x01\x04\t\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\
    \xd3\x01\n\x11\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xd3\x01\x14\x15\n\r\
    \n\x05\x04\x05\x02\x03\x08\x12\x04\xd3\x01\x16,\n\r\n\x05\x04\x05\x02\
    \x03\n\x12\x04\xd3\x01#+\n\x19\n\x04\x04\x05\x02\x04\x12\x04\xd6\x01\x04\
    !\x1a\x0b\x20Location.\n\n\x0f\n\x05\x04\x05\x02\x04\x04\x12\x06\xd6\x01\
    \x04\xd3\x01-\n\r\n\x05\x04\x05\x02\x04\x06\x12\x04\xd6\x01\x04\x13\n\r\
    \n\x05\x04\x05\x02\x04\x01\x12\x04\xd6\x01\x14\x1c\n\r\n\x05\x04\x05\x02\
    \x04\x03\x12\x04\xd6\x01\x1f\x20\n)\n\x04\x04\x05\x02\x05\x12\x04\xd9\
    \x01\x04!\x1a\x1b\x20User-defined\x20device\x20tags.\n\n\x0f\n\x05\x04\
    \x05\x02\x05\x04\x12\x06\xd9\x01\x04\xd6\x01!\n\r\n\x05\x04\x05\x02\x05\
    \x06\x12\x04\xd9\x01\x04\x17\n\r\n\x05\x04\x05\x02\x05\x01\x12\x04\xd9\
    \x01\x18\x1c\n\r\n\x05\x04\x05\x02\x05\x03\x12\x04\xd9\x01\x1f\x20b\x06p\
    roto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
