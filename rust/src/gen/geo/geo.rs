// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `geo/geo.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ResolveResult {
    // message fields
    pub location: ::protobuf::SingularPtrField<super::common::Location>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResolveResult {
    fn default() -> &'a ResolveResult {
        <ResolveResult as ::protobuf::Message>::default_instance()
    }
}

impl ResolveResult {
    pub fn new() -> ResolveResult {
        ::std::default::Default::default()
    }

    // .common.Location location = 1;


    pub fn get_location(&self) -> &super::common::Location {
        self.location.as_ref().unwrap_or_else(|| super::common::Location::default_instance())
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    pub fn has_location(&self) -> bool {
        self.location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: super::common::Location) {
        self.location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut super::common::Location {
        if self.location.is_none() {
            self.location.set_default();
        }
        self.location.as_mut().unwrap()
    }

    // Take field
    pub fn take_location(&mut self) -> super::common::Location {
        self.location.take().unwrap_or_else(|| super::common::Location::new())
    }
}

impl ::protobuf::Message for ResolveResult {
    fn is_initialized(&self) -> bool {
        for v in &self.location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.location.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolveResult {
        ResolveResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Location>>(
                    "location",
                    |m: &ResolveResult| { &m.location },
                    |m: &mut ResolveResult| { &mut m.location },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResolveResult>(
                    "ResolveResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResolveResult {
        static mut instance: ::protobuf::lazy::Lazy<ResolveResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResolveResult,
        };
        unsafe {
            instance.get(ResolveResult::new)
        }
    }
}

impl ::protobuf::Clear for ResolveResult {
    fn clear(&mut self) {
        self.location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolveResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolveResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FrameRXInfo {
    // message fields
    pub rx_info: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FrameRXInfo {
    fn default() -> &'a FrameRXInfo {
        <FrameRXInfo as ::protobuf::Message>::default_instance()
    }
}

impl FrameRXInfo {
    pub fn new() -> FrameRXInfo {
        ::std::default::Default::default()
    }

    // repeated .gw.UplinkRXInfo rx_info = 1;


    pub fn get_rx_info(&self) -> &[super::gw::UplinkRXInfo] {
        &self.rx_info
    }
    pub fn clear_rx_info(&mut self) {
        self.rx_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_rx_info(&mut self, v: ::protobuf::RepeatedField<super::gw::UplinkRXInfo>) {
        self.rx_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rx_info(&mut self) -> &mut ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        &mut self.rx_info
    }

    // Take field
    pub fn take_rx_info(&mut self) -> ::protobuf::RepeatedField<super::gw::UplinkRXInfo> {
        ::std::mem::replace(&mut self.rx_info, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FrameRXInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rx_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rx_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rx_info {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FrameRXInfo {
        FrameRXInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gw::UplinkRXInfo>>(
                    "rx_info",
                    |m: &FrameRXInfo| { &m.rx_info },
                    |m: &mut FrameRXInfo| { &mut m.rx_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FrameRXInfo>(
                    "FrameRXInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FrameRXInfo {
        static mut instance: ::protobuf::lazy::Lazy<FrameRXInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FrameRXInfo,
        };
        unsafe {
            instance.get(FrameRXInfo::new)
        }
    }
}

impl ::protobuf::Clear for FrameRXInfo {
    fn clear(&mut self) {
        self.rx_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FrameRXInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FrameRXInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResolveTDOARequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub frame_rx_info: ::protobuf::SingularPtrField<FrameRXInfo>,
    pub device_reference_altitude: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResolveTDOARequest {
    fn default() -> &'a ResolveTDOARequest {
        <ResolveTDOARequest as ::protobuf::Message>::default_instance()
    }
}

impl ResolveTDOARequest {
    pub fn new() -> ResolveTDOARequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // .geo.FrameRXInfo frame_rx_info = 2;


    pub fn get_frame_rx_info(&self) -> &FrameRXInfo {
        self.frame_rx_info.as_ref().unwrap_or_else(|| FrameRXInfo::default_instance())
    }
    pub fn clear_frame_rx_info(&mut self) {
        self.frame_rx_info.clear();
    }

    pub fn has_frame_rx_info(&self) -> bool {
        self.frame_rx_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frame_rx_info(&mut self, v: FrameRXInfo) {
        self.frame_rx_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frame_rx_info(&mut self) -> &mut FrameRXInfo {
        if self.frame_rx_info.is_none() {
            self.frame_rx_info.set_default();
        }
        self.frame_rx_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_frame_rx_info(&mut self) -> FrameRXInfo {
        self.frame_rx_info.take().unwrap_or_else(|| FrameRXInfo::new())
    }

    // double device_reference_altitude = 3;


    pub fn get_device_reference_altitude(&self) -> f64 {
        self.device_reference_altitude
    }
    pub fn clear_device_reference_altitude(&mut self) {
        self.device_reference_altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_device_reference_altitude(&mut self, v: f64) {
        self.device_reference_altitude = v;
    }
}

impl ::protobuf::Message for ResolveTDOARequest {
    fn is_initialized(&self) -> bool {
        for v in &self.frame_rx_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.frame_rx_info)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.device_reference_altitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        if let Some(ref v) = self.frame_rx_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.device_reference_altitude != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        if let Some(ref v) = self.frame_rx_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.device_reference_altitude != 0. {
            os.write_double(3, self.device_reference_altitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolveTDOARequest {
        ResolveTDOARequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &ResolveTDOARequest| { &m.dev_eui },
                    |m: &mut ResolveTDOARequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FrameRXInfo>>(
                    "frame_rx_info",
                    |m: &ResolveTDOARequest| { &m.frame_rx_info },
                    |m: &mut ResolveTDOARequest| { &mut m.frame_rx_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "device_reference_altitude",
                    |m: &ResolveTDOARequest| { &m.device_reference_altitude },
                    |m: &mut ResolveTDOARequest| { &mut m.device_reference_altitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResolveTDOARequest>(
                    "ResolveTDOARequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResolveTDOARequest {
        static mut instance: ::protobuf::lazy::Lazy<ResolveTDOARequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResolveTDOARequest,
        };
        unsafe {
            instance.get(ResolveTDOARequest::new)
        }
    }
}

impl ::protobuf::Clear for ResolveTDOARequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.frame_rx_info.clear();
        self.device_reference_altitude = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolveTDOARequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolveTDOARequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResolveMultiFrameTDOARequest {
    // message fields
    pub dev_eui: ::std::vec::Vec<u8>,
    pub frame_rx_info_set: ::protobuf::RepeatedField<FrameRXInfo>,
    pub device_reference_altitude: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResolveMultiFrameTDOARequest {
    fn default() -> &'a ResolveMultiFrameTDOARequest {
        <ResolveMultiFrameTDOARequest as ::protobuf::Message>::default_instance()
    }
}

impl ResolveMultiFrameTDOARequest {
    pub fn new() -> ResolveMultiFrameTDOARequest {
        ::std::default::Default::default()
    }

    // bytes dev_eui = 1;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // repeated .geo.FrameRXInfo frame_rx_info_set = 2;


    pub fn get_frame_rx_info_set(&self) -> &[FrameRXInfo] {
        &self.frame_rx_info_set
    }
    pub fn clear_frame_rx_info_set(&mut self) {
        self.frame_rx_info_set.clear();
    }

    // Param is passed by value, moved
    pub fn set_frame_rx_info_set(&mut self, v: ::protobuf::RepeatedField<FrameRXInfo>) {
        self.frame_rx_info_set = v;
    }

    // Mutable pointer to the field.
    pub fn mut_frame_rx_info_set(&mut self) -> &mut ::protobuf::RepeatedField<FrameRXInfo> {
        &mut self.frame_rx_info_set
    }

    // Take field
    pub fn take_frame_rx_info_set(&mut self) -> ::protobuf::RepeatedField<FrameRXInfo> {
        ::std::mem::replace(&mut self.frame_rx_info_set, ::protobuf::RepeatedField::new())
    }

    // double device_reference_altitude = 3;


    pub fn get_device_reference_altitude(&self) -> f64 {
        self.device_reference_altitude
    }
    pub fn clear_device_reference_altitude(&mut self) {
        self.device_reference_altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_device_reference_altitude(&mut self, v: f64) {
        self.device_reference_altitude = v;
    }
}

impl ::protobuf::Message for ResolveMultiFrameTDOARequest {
    fn is_initialized(&self) -> bool {
        for v in &self.frame_rx_info_set {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.frame_rx_info_set)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.device_reference_altitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_eui);
        }
        for value in &self.frame_rx_info_set {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.device_reference_altitude != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_eui.is_empty() {
            os.write_bytes(1, &self.dev_eui)?;
        }
        for v in &self.frame_rx_info_set {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.device_reference_altitude != 0. {
            os.write_double(3, self.device_reference_altitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolveMultiFrameTDOARequest {
        ResolveMultiFrameTDOARequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &ResolveMultiFrameTDOARequest| { &m.dev_eui },
                    |m: &mut ResolveMultiFrameTDOARequest| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FrameRXInfo>>(
                    "frame_rx_info_set",
                    |m: &ResolveMultiFrameTDOARequest| { &m.frame_rx_info_set },
                    |m: &mut ResolveMultiFrameTDOARequest| { &mut m.frame_rx_info_set },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "device_reference_altitude",
                    |m: &ResolveMultiFrameTDOARequest| { &m.device_reference_altitude },
                    |m: &mut ResolveMultiFrameTDOARequest| { &mut m.device_reference_altitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResolveMultiFrameTDOARequest>(
                    "ResolveMultiFrameTDOARequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResolveMultiFrameTDOARequest {
        static mut instance: ::protobuf::lazy::Lazy<ResolveMultiFrameTDOARequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResolveMultiFrameTDOARequest,
        };
        unsafe {
            instance.get(ResolveMultiFrameTDOARequest::new)
        }
    }
}

impl ::protobuf::Clear for ResolveMultiFrameTDOARequest {
    fn clear(&mut self) {
        self.dev_eui.clear();
        self.frame_rx_info_set.clear();
        self.device_reference_altitude = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolveMultiFrameTDOARequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolveMultiFrameTDOARequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResolveTDOAResponse {
    // message fields
    pub result: ::protobuf::SingularPtrField<ResolveResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResolveTDOAResponse {
    fn default() -> &'a ResolveTDOAResponse {
        <ResolveTDOAResponse as ::protobuf::Message>::default_instance()
    }
}

impl ResolveTDOAResponse {
    pub fn new() -> ResolveTDOAResponse {
        ::std::default::Default::default()
    }

    // .geo.ResolveResult result = 1;


    pub fn get_result(&self) -> &ResolveResult {
        self.result.as_ref().unwrap_or_else(|| ResolveResult::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ResolveResult) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut ResolveResult {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> ResolveResult {
        self.result.take().unwrap_or_else(|| ResolveResult::new())
    }
}

impl ::protobuf::Message for ResolveTDOAResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolveTDOAResponse {
        ResolveTDOAResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResolveResult>>(
                    "result",
                    |m: &ResolveTDOAResponse| { &m.result },
                    |m: &mut ResolveTDOAResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResolveTDOAResponse>(
                    "ResolveTDOAResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResolveTDOAResponse {
        static mut instance: ::protobuf::lazy::Lazy<ResolveTDOAResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResolveTDOAResponse,
        };
        unsafe {
            instance.get(ResolveTDOAResponse::new)
        }
    }
}

impl ::protobuf::Clear for ResolveTDOAResponse {
    fn clear(&mut self) {
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolveTDOAResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolveTDOAResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResolveMultiFrameTDOAResponse {
    // message fields
    pub result: ::protobuf::SingularPtrField<ResolveResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResolveMultiFrameTDOAResponse {
    fn default() -> &'a ResolveMultiFrameTDOAResponse {
        <ResolveMultiFrameTDOAResponse as ::protobuf::Message>::default_instance()
    }
}

impl ResolveMultiFrameTDOAResponse {
    pub fn new() -> ResolveMultiFrameTDOAResponse {
        ::std::default::Default::default()
    }

    // .geo.ResolveResult result = 1;


    pub fn get_result(&self) -> &ResolveResult {
        self.result.as_ref().unwrap_or_else(|| ResolveResult::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ResolveResult) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut ResolveResult {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> ResolveResult {
        self.result.take().unwrap_or_else(|| ResolveResult::new())
    }
}

impl ::protobuf::Message for ResolveMultiFrameTDOAResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResolveMultiFrameTDOAResponse {
        ResolveMultiFrameTDOAResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResolveResult>>(
                    "result",
                    |m: &ResolveMultiFrameTDOAResponse| { &m.result },
                    |m: &mut ResolveMultiFrameTDOAResponse| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResolveMultiFrameTDOAResponse>(
                    "ResolveMultiFrameTDOAResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResolveMultiFrameTDOAResponse {
        static mut instance: ::protobuf::lazy::Lazy<ResolveMultiFrameTDOAResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResolveMultiFrameTDOAResponse,
        };
        unsafe {
            instance.get(ResolveMultiFrameTDOAResponse::new)
        }
    }
}

impl ::protobuf::Clear for ResolveMultiFrameTDOAResponse {
    fn clear(&mut self) {
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResolveMultiFrameTDOAResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResolveMultiFrameTDOAResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rgeo/geo.proto\x12\x03geo\x1a\x0bgw/gw.proto\x1a\x13common/common.pro\
    to\"=\n\rResolveResult\x12,\n\x08location\x18\x01\x20\x01(\x0b2\x10.comm\
    on.LocationR\x08location\"8\n\x0bFrameRXInfo\x12)\n\x07rx_info\x18\x01\
    \x20\x03(\x0b2\x10.gw.UplinkRXInfoR\x06rxInfo\"\x9f\x01\n\x12ResolveTDOA\
    Request\x12\x17\n\x07dev_eui\x18\x01\x20\x01(\x0cR\x06devEUI\x124\n\rfra\
    me_rx_info\x18\x02\x20\x01(\x0b2\x10.geo.FrameRXInfoR\x0bframeRXInfo\x12\
    :\n\x19device_reference_altitude\x18\x03\x20\x01(\x01R\x17deviceReferenc\
    eAltitude\"\xb0\x01\n\x1cResolveMultiFrameTDOARequest\x12\x17\n\x07dev_e\
    ui\x18\x01\x20\x01(\x0cR\x06devEUI\x12;\n\x11frame_rx_info_set\x18\x02\
    \x20\x03(\x0b2\x10.geo.FrameRXInfoR\x0eframeRXInfoSet\x12:\n\x19device_r\
    eference_altitude\x18\x03\x20\x01(\x01R\x17deviceReferenceAltitude\"A\n\
    \x13ResolveTDOAResponse\x12*\n\x06result\x18\x01\x20\x01(\x0b2\x12.geo.R\
    esolveResultR\x06result\"K\n\x1dResolveMultiFrameTDOAResponse\x12*\n\x06\
    result\x18\x01\x20\x01(\x0b2\x12.geo.ResolveResultR\x06result2\xc0\x01\n\
    \x18GeolocationServerService\x12B\n\x0bResolveTDOA\x12\x17.geo.ResolveTD\
    OARequest\x1a\x18.geo.ResolveTDOAResponse\"\0\x12`\n\x15ResolveMultiFram\
    eTDOA\x12!.geo.ResolveMultiFrameTDOARequest\x1a\".geo.ResolveMultiFrameT\
    DOAResponse\"\0B-Z+github.com/brocaar/chirpstack-api/go/v3/geoJ\xb0\x0c\
    \n\x06\x12\x04\0\0<\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\x08\x0b\n\x08\n\x01\x08\x12\x03\x04\0B\n\t\n\x02\x08\x0b\
    \x12\x03\x04\0B\n\t\n\x02\x03\0\x12\x03\x06\x07\x14\n\t\n\x02\x03\x01\
    \x12\x03\x07\x07\x1c\nO\n\x02\x06\0\x12\x04\x0b\0\x12\x01\x1aC\x20Geoloc\
    ationServerService\x20implements\x20a\x20geolocation-server\x20service.\
    \n\n\n\n\x03\x06\0\x01\x12\x03\x0b\x08\x20\n?\n\x04\x06\0\x02\0\x12\x03\
    \r\x04H\x1a2\x20ResolveTDOA\x20resolves\x20the\x20location\x20based\x20o\
    n\x20TDOA.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\r\x08\x13\n\x0c\n\x05\
    \x06\0\x02\0\x02\x12\x03\r\x14&\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\r1D\
    \na\n\x04\x06\0\x02\x01\x12\x03\x11\x04f\x1aT\x20ResolveMultiFrameTDOA\
    \x20resolves\x20the\x20location\x20using\x20TDOA,\x20based\x20on\n\x20mu\
    ltiple\x20frames.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x11\x08\x1d\n\
    \x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x11\x1e:\n\x0c\n\x05\x06\0\x02\x01\
    \x03\x12\x03\x11Eb\n\n\n\x02\x04\0\x12\x04\x14\0\x17\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x14\x08\x15\n!\n\x04\x04\0\x02\0\x12\x03\x16\x04!\x1a\x14\
    \x20Resolved\x20location.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x16\x04\
    \x14\x17\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x16\x04\x13\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x16\x14\x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x16\
    \x1f\x20\n\n\n\x02\x04\x01\x12\x04\x19\0\x1c\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x19\x08\x13\n(\n\x04\x04\x01\x02\0\x12\x03\x1b\x04)\x1a\x1b\x20\
    Uplink\x20Gateway\x20meta-data.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \x1b\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1b\r\x1c\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x1b\x1d$\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x1b'(\n\n\n\x02\x04\x02\x12\x04\x1e\0'\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x1e\x08\x1a\n\x19\n\x04\x04\x02\x02\0\x12\x03\x20\x04-\x1a\x0c\
    \x20Device\x20ID.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x20\x04\x1e\x1c\
    \n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\x04\t\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x20\n\x11\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x20\x14\
    \x15\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03\x20\x16,\n\x0c\n\x05\x04\x02\
    \x02\0\n\x12\x03\x20#+\n\x1f\n\x04\x04\x02\x02\x01\x12\x03#\x04>\x1a\x12\
    \x20Frame\x20meta-data.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04#\x04\x20\
    -\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03#\x04\x0f\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03#\x10\x1d\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03#\
    \x20!\n\x0c\n\x05\x04\x02\x02\x01\x08\x12\x03#\"=\n\x0c\n\x05\x04\x02\
    \x02\x01\n\x12\x03#/<\n)\n\x04\x04\x02\x02\x02\x12\x03&\x04)\x1a\x1c\x20\
    Device\x20reference\x20altitude.\n\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\
    &\x04#>\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03&\x0b$\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03&'\
    (\n\n\n\x02\x04\x03\x12\x04)\02\x01\n\n\n\x03\x04\x03\x01\x12\x03)\x08$\
    \n\x19\n\x04\x04\x03\x02\0\x12\x03+\x04-\x1a\x0c\x20Device\x20ID.\n\n\r\
    \n\x05\x04\x03\x02\0\x04\x12\x04+\x04)&\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03+\x04\t\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03+\n\x11\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03+\x14\x15\n\x0c\n\x05\x04\x03\x02\0\x08\x12\
    \x03+\x16,\n\x0c\n\x05\x04\x03\x02\0\n\x12\x03+#+\n\x20\n\x04\x04\x03\
    \x02\x01\x12\x03.\x04N\x1a\x13\x20Frames\x20meta-data.\n\n\x0c\n\x05\x04\
    \x03\x02\x01\x04\x12\x03.\x04\x0c\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x03.\r\x18\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03.\x19*\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03.-.\n\x0c\n\x05\x04\x03\x02\x01\x08\x12\x03.\
    /M\n\x0c\n\x05\x04\x03\x02\x01\n\x12\x03.<L\n)\n\x04\x04\x03\x02\x02\x12\
    \x031\x04)\x1a\x1c\x20Device\x20reference\x20altitude.\n\n\r\n\x05\x04\
    \x03\x02\x02\x04\x12\x041\x04.N\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x031\
    \x04\n\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x031\x0b$\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x031'(\n\n\n\x02\x04\x04\x12\x044\07\x01\n\n\n\x03\x04\
    \x04\x01\x12\x034\x08\x1b\n\x1e\n\x04\x04\x04\x02\0\x12\x036\x04\x1d\x1a\
    \x11\x20Resolve\x20result.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x046\x044\
    \x1d\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x036\x04\x11\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x036\x12\x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x036\x1b\
    \x1c\n\n\n\x02\x04\x05\x12\x049\0<\x01\n\n\n\x03\x04\x05\x01\x12\x039\
    \x08%\n\x1e\n\x04\x04\x05\x02\0\x12\x03;\x04\x1d\x1a\x11\x20Resolve\x20r\
    esult.\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04;\x049'\n\x0c\n\x05\x04\x05\
    \x02\0\x06\x12\x03;\x04\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03;\x12\
    \x18\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03;\x1b\x1cb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
